
TERM_PRJCT_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006360  08006360  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006368  08006368  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000084  080063f4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080063f4  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013608  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f3  00000000  00000000  000336bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00035db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00036da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f82  00000000  00000000  00037cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d72  00000000  00000000  00051c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e84  00000000  00000000  000659c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  000f9898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006238 	.word	0x08006238

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08006238 	.word	0x08006238

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>:
{

}

// Implementation of initializing constructor
motor_driver::motor_driver(TIM_HandleTypeDef* _htim,
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
		uint32_t _ch_a,
		uint32_t _ch_b)
    		:htim(_htim),
			 ch_a(_ch_a),
			 ch_b(_ch_b)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	60da      	str	r2, [r3, #12]
{
	htim = _htim;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	60da      	str	r2, [r3, #12]
	ch_a = _ch_a;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	605a      	str	r2, [r3, #4]
	ch_b = _ch_b;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	609a      	str	r2, [r3, #8]
	Duty_Cycle = 0;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2200      	movs	r2, #0
 80005ba:	801a      	strh	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch_a);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	68da      	ldr	r2, [r3, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	4610      	mov	r0, r2
 80005c8:	f003 fb7c 	bl	8003cc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch_b);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	4619      	mov	r1, r3
 80005d6:	4610      	mov	r0, r2
 80005d8:	f003 fb74 	bl	8003cc4 <HAL_TIM_PWM_Start>
}
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4618      	mov	r0, r3
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <_ZN12motor_driver7Set_PWMEs>:


// Implementation of Set PWM Method
void motor_driver::Set_PWM(int16_t	_Duty_Cycle)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
	  */

	// Saturate the input between -1000 and 1000


	if (_Duty_Cycle < -10000) {
 80005f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005f8:	4a72      	ldr	r2, [pc, #456]	; (80007c4 <_ZN12motor_driver7Set_PWMEs+0x1dc>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	da03      	bge.n	8000606 <_ZN12motor_driver7Set_PWMEs+0x1e>
		_Duty_Cycle = -10000;
 80005fe:	f64d 03f0 	movw	r3, #55536	; 0xd8f0
 8000602:	807b      	strh	r3, [r7, #2]
 8000604:	e008      	b.n	8000618 <_ZN12motor_driver7Set_PWMEs+0x30>
	} else if (_Duty_Cycle > 10000){
 8000606:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800060a:	f242 7210 	movw	r2, #10000	; 0x2710
 800060e:	4293      	cmp	r3, r2
 8000610:	dd02      	ble.n	8000618 <_ZN12motor_driver7Set_PWMEs+0x30>
		_Duty_Cycle = 10000;
 8000612:	f242 7310 	movw	r3, #10000	; 0x2710
 8000616:	807b      	strh	r3, [r7, #2]
	}


	Duty_Cycle = _Duty_Cycle;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	887a      	ldrh	r2, [r7, #2]
 800061c:	801a      	strh	r2, [r3, #0]

	int16_t PULSE = abs(Duty_Cycle*4899/10000);	// convert the duty cycle in percentage to the pulse width of PWM signal
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000624:	461a      	mov	r2, r3
 8000626:	f241 3323 	movw	r3, #4899	; 0x1323
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	4a66      	ldr	r2, [pc, #408]	; (80007c8 <_ZN12motor_driver7Set_PWMEs+0x1e0>)
 8000630:	fb82 1203 	smull	r1, r2, r2, r3
 8000634:	1312      	asrs	r2, r2, #12
 8000636:	17db      	asrs	r3, r3, #31
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	bfb8      	it	lt
 800063e:	425b      	neglt	r3, r3
 8000640:	81fb      	strh	r3, [r7, #14]

	// Set the output PWM channels per the sign of input duty cycle
	if (Duty_Cycle < 0){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000648:	2b00      	cmp	r3, #0
 800064a:	da5a      	bge.n	8000702 <_ZN12motor_driver7Set_PWMEs+0x11a>
		__HAL_TIM_SET_COMPARE(htim,ch_a,4899);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d106      	bne.n	8000662 <_ZN12motor_driver7Set_PWMEs+0x7a>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f241 3223 	movw	r2, #4899	; 0x1323
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
 8000660:	e01b      	b.n	800069a <_ZN12motor_driver7Set_PWMEs+0xb2>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d106      	bne.n	8000678 <_ZN12motor_driver7Set_PWMEs+0x90>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f241 3223 	movw	r2, #4899	; 0x1323
 8000674:	639a      	str	r2, [r3, #56]	; 0x38
 8000676:	e010      	b.n	800069a <_ZN12motor_driver7Set_PWMEs+0xb2>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	2b08      	cmp	r3, #8
 800067e:	d106      	bne.n	800068e <_ZN12motor_driver7Set_PWMEs+0xa6>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f241 3223 	movw	r2, #4899	; 0x1323
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
 800068c:	e005      	b.n	800069a <_ZN12motor_driver7Set_PWMEs+0xb2>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f241 3223 	movw	r2, #4899	; 0x1323
 8000698:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d109      	bne.n	80006b6 <_ZN12motor_driver7Set_PWMEs+0xce>
 80006a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006a6:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80006aa:	3303      	adds	r3, #3
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	68d2      	ldr	r2, [r2, #12]
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(htim,ch_a,(4899-PULSE));
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
	}
}
 80006b4:	e07f      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d109      	bne.n	80006d2 <_ZN12motor_driver7Set_PWMEs+0xea>
 80006be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006c2:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80006c6:	3303      	adds	r3, #3
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	68d2      	ldr	r2, [r2, #12]
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80006d0:	e071      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	2b08      	cmp	r3, #8
 80006d8:	d109      	bne.n	80006ee <_ZN12motor_driver7Set_PWMEs+0x106>
 80006da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006de:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80006e2:	3303      	adds	r3, #3
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	68d2      	ldr	r2, [r2, #12]
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80006ec:	e063      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 80006ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006f2:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80006f6:	3303      	adds	r3, #3
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	68d2      	ldr	r2, [r2, #12]
 80006fc:	6812      	ldr	r2, [r2, #0]
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000700:	e059      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_a,(4899-PULSE));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d109      	bne.n	800071e <_ZN12motor_driver7Set_PWMEs+0x136>
 800070a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800070e:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 8000712:	3303      	adds	r3, #3
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	68d2      	ldr	r2, [r2, #12]
 8000718:	6812      	ldr	r2, [r2, #0]
 800071a:	6353      	str	r3, [r2, #52]	; 0x34
 800071c:	e024      	b.n	8000768 <_ZN12motor_driver7Set_PWMEs+0x180>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	2b04      	cmp	r3, #4
 8000724:	d109      	bne.n	800073a <_ZN12motor_driver7Set_PWMEs+0x152>
 8000726:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800072a:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 800072e:	3303      	adds	r3, #3
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	68d2      	ldr	r2, [r2, #12]
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	6393      	str	r3, [r2, #56]	; 0x38
 8000738:	e016      	b.n	8000768 <_ZN12motor_driver7Set_PWMEs+0x180>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	2b08      	cmp	r3, #8
 8000740:	d109      	bne.n	8000756 <_ZN12motor_driver7Set_PWMEs+0x16e>
 8000742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000746:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 800074a:	3303      	adds	r3, #3
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	68d2      	ldr	r2, [r2, #12]
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000754:	e008      	b.n	8000768 <_ZN12motor_driver7Set_PWMEs+0x180>
 8000756:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800075a:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 800075e:	3303      	adds	r3, #3
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	68d2      	ldr	r2, [r2, #12]
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d106      	bne.n	800077e <_ZN12motor_driver7Set_PWMEs+0x196>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f241 3223 	movw	r2, #4899	; 0x1323
 800077a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800077c:	e01b      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d106      	bne.n	8000794 <_ZN12motor_driver7Set_PWMEs+0x1ac>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f241 3223 	movw	r2, #4899	; 0x1323
 8000790:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000792:	e010      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	2b08      	cmp	r3, #8
 800079a:	d106      	bne.n	80007aa <_ZN12motor_driver7Set_PWMEs+0x1c2>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f241 3223 	movw	r2, #4899	; 0x1323
 80007a6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007a8:	e005      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f241 3223 	movw	r2, #4899	; 0x1323
 80007b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	ffffd8f0 	.word	0xffffd8f0
 80007c8:	68db8bad 	.word	0x68db8bad

080007cc <_ZN14encoder_readerC1EP17TIM_HandleTypeDef>:
{

}

// Implementation of initializing constructor
encoder_reader::encoder_reader(TIM_HandleTypeDef* _htim)
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
    		:htim(_htim)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	60da      	str	r2, [r3, #12]

{
	htim = _htim;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(htim,TIM_CHANNEL_ALL);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	213c      	movs	r1, #60	; 0x3c
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fbc1 	bl	8003f70 <HAL_TIM_Encoder_Start>

	// Initialize delta and count to zero
	COUNT = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
	DELTA = 0;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
	prev_value 	= 	__HAL_TIM_GET_COUNTER(htim); // Initialize the previous value to current timer count
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	605a      	str	r2, [r3, #4]
}
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_ZN14encoder_reader9get_countEv>:
}


// Implementation of method to get the current encoder position and store in the object
int32_t encoder_reader::get_count(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	DELTA 		= 	__HAL_TIM_GET_COUNTER(htim) - prev_value;	// calculate the change in encoder position
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	609a      	str	r2, [r3, #8]
	prev_value 	= 	__HAL_TIM_GET_COUNTER(htim);			// store current value for next encoder read callback
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	605a      	str	r2, [r3, #4]


	if (DELTA > 32768){		// overflow condition
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000840:	dd06      	ble.n	8000850 <_ZN14encoder_reader9get_countEv+0x40>
		DELTA -= 65536;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	e00a      	b.n	8000866 <_ZN14encoder_reader9get_countEv+0x56>
	}

	else if (DELTA < -32768){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000858:	da05      	bge.n	8000866 <_ZN14encoder_reader9get_countEv+0x56>
		DELTA += 65536;		// under flow condition
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	609a      	str	r2, [r3, #8]
	}

	COUNT += DELTA;			// increment counter delta
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	441a      	add	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	601a      	str	r2, [r3, #0]

	return COUNT;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <_ZN19feedback_controllerC1Ev>:

// Implementation of the feedback controller class
feedback_controller::feedback_controller(void)
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
{
	// Initialize all gains, error and setpoints to zero
	KP = 0;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	801a      	strh	r2, [r3, #0]
	KI = 0;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	805a      	strh	r2, [r3, #2]
	DUTY_CYCLE = 0;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	809a      	strh	r2, [r3, #4]
	SET_POINT = 0;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	CURR_CNT = 0;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
	INT_ERR = 0;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	821a      	strh	r2, [r3, #16]
}
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_ZN19feedback_controller12set_setpointEl>:

// Implementation of method to set the setpoint of feedback controller
void feedback_controller::set_setpoint(int32_t _SET_POINT)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
	SET_POINT = _SET_POINT;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	609a      	str	r2, [r3, #8]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <_ZN19feedback_controller6set_KPEs>:

// Implementation of method to set the porportional gain
void feedback_controller::set_KP(int16_t _KP)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	460b      	mov	r3, r1
 80008e4:	807b      	strh	r3, [r7, #2]
	KP = _KP;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	887a      	ldrh	r2, [r7, #2]
 80008ea:	801a      	strh	r2, [r3, #0]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>:
{

}

// Implementation of initializing constructor
servo_driver::servo_driver(TIM_HandleTypeDef* _htim,
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
		uint32_t _channel)
    		:htim(_htim),
			 channel(_channel)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	609a      	str	r2, [r3, #8]
{
	htim = _htim;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	609a      	str	r2, [r3, #8]
	channel = _channel;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	605a      	str	r2, [r3, #4]
	ANGLE = 0;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2200      	movs	r2, #0
 8000920:	801a      	strh	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,channel);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4619      	mov	r1, r3
 800092c:	4610      	mov	r0, r2
 800092e:	f003 f9c9 	bl	8003cc4 <HAL_TIM_PWM_Start>
}
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZN10BNO055_imuC1EP17I2C_HandleTypeDef>:
{

}

// Initialize the IMU
BNO055_imu::BNO055_imu(I2C_HandleTypeDef* _hi2c)
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af04      	add	r7, sp, #16
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
						:hi2c(_hi2c)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	609a      	str	r2, [r3, #8]
{
	hi2c = _hi2c;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	609a      	str	r2, [r3, #8]
	uint8_t imu_mode = 0b00001000; // Operating Mode Register: IMU Mode
 8000952:	2308      	movs	r3, #8
 8000954:	73fb      	strb	r3, [r7, #15]
	uint8_t pwr_mode = 0b00000000; // Set to Normal Power Mode
 8000956:	2300      	movs	r3, #0
 8000958:	73bb      	strb	r3, [r7, #14]
	uint8_t unit_sel = 0b00000000; // Select Desired Units
 800095a:	2300      	movs	r3, #0
 800095c:	737b      	strb	r3, [r7, #13]
	state = 0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	71da      	strb	r2, [r3, #7]
	uint8_t cur_opmode[1] = {0};
 8000964:	2300      	movs	r3, #0
 8000966:	733b      	strb	r3, [r7, #12]
	while (state == 0)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	79db      	ldrb	r3, [r3, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d153      	bne.n	8000a18 <_ZN10BNO055_imuC1EP17I2C_HandleTypeDef+0xdc>
	{
		if (HAL_I2C_IsDeviceReady(hi2c, imuaddr, 1, HAL_MAX_DELAY) == HAL_OK)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6898      	ldr	r0, [r3, #8]
 8000974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000978:	2201      	movs	r2, #1
 800097a:	2150      	movs	r1, #80	; 0x50
 800097c:	f002 f870 	bl	8002a60 <HAL_I2C_IsDeviceReady>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf0c      	ite	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	2300      	movne	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d02c      	beq.n	80009ea <_ZN10BNO055_imuC1EP17I2C_HandleTypeDef+0xae>
		{
			HAL_I2C_Mem_Write(hi2c, imuaddr, oprmode_addr, 1, &imu_mode, 1, HAL_MAX_DELAY);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6898      	ldr	r0, [r3, #8]
 8000994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	2301      	movs	r3, #1
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	f107 030f 	add.w	r3, r7, #15
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2301      	movs	r3, #1
 80009a6:	223d      	movs	r2, #61	; 0x3d
 80009a8:	2150      	movs	r1, #80	; 0x50
 80009aa:	f001 fd39 	bl	8002420 <HAL_I2C_Mem_Write>
			HAL_I2C_Mem_Write(hi2c, imuaddr, pwrmode_addr, 1, &pwr_mode, 1, HAL_MAX_DELAY);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6898      	ldr	r0, [r3, #8]
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b6:	9302      	str	r3, [sp, #8]
 80009b8:	2301      	movs	r3, #1
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	f107 030e 	add.w	r3, r7, #14
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2301      	movs	r3, #1
 80009c4:	223e      	movs	r2, #62	; 0x3e
 80009c6:	2150      	movs	r1, #80	; 0x50
 80009c8:	f001 fd2a 	bl	8002420 <HAL_I2C_Mem_Write>
			HAL_I2C_Mem_Write(hi2c, imuaddr, unit_sel_addr, 1, &unit_sel, 1, HAL_MAX_DELAY);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6898      	ldr	r0, [r3, #8]
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d4:	9302      	str	r3, [sp, #8]
 80009d6:	2301      	movs	r3, #1
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	f107 030d 	add.w	r3, r7, #13
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2301      	movs	r3, #1
 80009e2:	223b      	movs	r2, #59	; 0x3b
 80009e4:	2150      	movs	r1, #80	; 0x50
 80009e6:	f001 fd1b 	bl	8002420 <HAL_I2C_Mem_Write>
		}
		HAL_I2C_Mem_Read(hi2c, imuaddr, oprmode_addr, 1, cur_opmode, 1, HAL_MAX_DELAY);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6898      	ldr	r0, [r3, #8]
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	223d      	movs	r2, #61	; 0x3d
 8000a02:	2150      	movs	r1, #80	; 0x50
 8000a04:	f001 fe06 	bl	8002614 <HAL_I2C_Mem_Read>
		if (cur_opmode[0] == imu_mode)
 8000a08:	7b3a      	ldrb	r2, [r7, #12]
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d1ab      	bne.n	8000968 <_ZN10BNO055_imuC1EP17I2C_HandleTypeDef+0x2c>
		{
			state = 1;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	71da      	strb	r2, [r3, #7]
	while (state == 0)
 8000a16:	e7a7      	b.n	8000968 <_ZN10BNO055_imuC1EP17I2C_HandleTypeDef+0x2c>
		}

	}


}
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0b4      	sub	sp, #208	; 0xd0
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 ffdf 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f965 	bl	8000cfc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 fc9b 	bl	800136c <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000a36:	f000 faaf 	bl	8000f98 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8000a3a:	f000 fc69 	bl	8001310 <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 8000a3e:	f000 fb43 	bl	80010c8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000a42:	f000 fb9f 	bl	8001184 <_ZL12MX_TIM4_Initv>
  MX_TIM1_Init();
 8000a46:	f000 f9ff 	bl	8000e48 <_ZL12MX_TIM1_Initv>
  MX_TIM5_Init();
 8000a4a:	f000 fbf9 	bl	8001240 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 8000a4e:	f000 f9c7 	bl	8000de0 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &char_buffer, 1);	// Initialize UART Receive
 8000a52:	2201      	movs	r2, #1
 8000a54:	4992      	ldr	r1, [pc, #584]	; (8000ca0 <main+0x27c>)
 8000a56:	4893      	ldr	r0, [pc, #588]	; (8000ca4 <main+0x280>)
 8000a58:	f003 ffab 	bl	80049b2 <HAL_UART_Receive_IT>
           encoder_reader ENCD1 = encoder_reader(&htim3); //A6 A7
 8000a5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a60:	4991      	ldr	r1, [pc, #580]	; (8000ca8 <main+0x284>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff feb2 	bl	80007cc <_ZN14encoder_readerC1EP17TIM_HandleTypeDef>
           encoder_reader ENCD2 = encoder_reader(&htim4); //B6 B7
 8000a68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a6c:	498f      	ldr	r1, [pc, #572]	; (8000cac <main+0x288>)
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff feac 	bl	80007cc <_ZN14encoder_readerC1EP17TIM_HandleTypeDef>
           motor_driver MOTOR_1 = motor_driver(&htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);		// Initialize the motor driver object as MOTOR_1
 8000a74:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000a78:	2304      	movs	r3, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	498c      	ldr	r1, [pc, #560]	; (8000cb0 <main+0x28c>)
 8000a7e:	f7ff fd81 	bl	8000584 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>
           // A5 A1
           motor_driver MOTOR_2 = motor_driver(&htim2, TIM_CHANNEL_3, TIM_CHANNEL_4);		// Initialize the motor driver object as MOTOR_2
 8000a82:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000a86:	230c      	movs	r3, #12
 8000a88:	2208      	movs	r2, #8
 8000a8a:	4989      	ldr	r1, [pc, #548]	; (8000cb0 <main+0x28c>)
 8000a8c:	f7ff fd7a 	bl	8000584 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>
           // A2 A3
           feedback_controller controller_1 = feedback_controller();
 8000a90:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fef5 	bl	8000884 <_ZN19feedback_controllerC1Ev>
           feedback_controller controller_2 = feedback_controller();
 8000a9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fef0 	bl	8000884 <_ZN19feedback_controllerC1Ev>
           motor_driver FLYWHEEL = motor_driver(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2); // A8 A9
 8000aa4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4981      	ldr	r1, [pc, #516]	; (8000cb4 <main+0x290>)
 8000aae:	f7ff fd69 	bl	8000584 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>

           controller_1.set_KP(KP);
 8000ab2:	4b81      	ldr	r3, [pc, #516]	; (8000cb8 <main+0x294>)
 8000ab4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ab8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff0b 	bl	80008da <_ZN19feedback_controller6set_KPEs>
           controller_2.set_KP(KP);
 8000ac4:	4b7c      	ldr	r3, [pc, #496]	; (8000cb8 <main+0x294>)
 8000ac6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000aca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff02 	bl	80008da <_ZN19feedback_controller6set_KPEs>

           controller_1.set_setpoint(SP1);
 8000ad6:	4b79      	ldr	r3, [pc, #484]	; (8000cbc <main+0x298>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff feec 	bl	80008be <_ZN19feedback_controller12set_setpointEl>
           controller_2.set_setpoint(SP2);
 8000ae6:	4b76      	ldr	r3, [pc, #472]	; (8000cc0 <main+0x29c>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fee4 	bl	80008be <_ZN19feedback_controller12set_setpointEl>

           BNO055_imu IMU = BNO055_imu(&hi2c1);
 8000af6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000afa:	4972      	ldr	r1, [pc, #456]	; (8000cc4 <main+0x2a0>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff1d 	bl	800093c <_ZN10BNO055_imuC1EP17I2C_HandleTypeDef>

           servo_driver SERVO1 = servo_driver(&htim5,TIM_CHANNEL_1);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	2200      	movs	r2, #0
 8000b08:	496f      	ldr	r1, [pc, #444]	; (8000cc8 <main+0x2a4>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fef4 	bl	80008f8 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>





    uint8_t config_mode = 0x00;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    uint8_t imu_mode = 0b00001000;
 8000b16:	2308      	movs	r3, #8
 8000b18:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
    uint8_t cur_opmode[1] = {0};
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 3020 	strb.w	r3, [r7, #32]

    uint8_t calib_state[1] = {0};
 8000b22:	2300      	movs	r3, #0
 8000b24:	773b      	strb	r3, [r7, #28]

    uint8_t cur_pwrmode[1] = {0};
 8000b26:	2300      	movs	r3, #0
 8000b28:	763b      	strb	r3, [r7, #24]

    uint8_t unit_sel = 0b00010001;
 8000b2a:	2311      	movs	r3, #17
 8000b2c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd

	uint8_t raw_heading[2] = {0};
 8000b30:	2300      	movs	r3, #0
 8000b32:	82bb      	strh	r3, [r7, #20]
	uint8_t raw_heading1[2] = {0};
 8000b34:	2300      	movs	r3, #0
 8000b36:	823b      	strh	r3, [r7, #16]
	uint8_t raw_heading2[2] = {0};
 8000b38:	2300      	movs	r3, #0
 8000b3a:	81bb      	strh	r3, [r7, #12]
	uint8_t raw_heading3[2] = {0};
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	813b      	strh	r3, [r7, #8]
	uint16_t heading, heading1, heading2, heading3;
	uint8_t heading_deg;
	uint8_t raw_headinglsb[1], raw_headingmsb[1];

    uint32_t test = HAL_I2C_IsDeviceReady(&hi2c1, imuaddr, 1, HAL_MAX_DELAY);
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b44:	2201      	movs	r2, #1
 8000b46:	2150      	movs	r1, #80	; 0x50
 8000b48:	485e      	ldr	r0, [pc, #376]	; (8000cc4 <main+0x2a0>)
 8000b4a:	f001 ff89 	bl	8002a60 <HAL_I2C_IsDeviceReady>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    uint32_t a = sprintf(buffer, "Device Ready: %ld \r\n", test);
 8000b54:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000b58:	495c      	ldr	r1, [pc, #368]	; (8000ccc <main+0x2a8>)
 8000b5a:	485d      	ldr	r0, [pc, #372]	; (8000cd0 <main+0x2ac>)
 8000b5c:	f004 ffee 	bl	8005b3c <siprintf>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    FLYWHEEL.Set_PWM(duty_cycle_flywheel);
 8000b66:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <main+0x2b0>)
 8000b68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fd38 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
	  	  HAL_Delay(100);
	  	  */



	 HAL_Delay(200);
 8000b78:	20c8      	movs	r0, #200	; 0xc8
 8000b7a:	f000 ffa9 	bl	8001ad0 <HAL_Delay>
	 COUNT_1 = ENCD1.get_count();
 8000b7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe44 	bl	8000810 <_ZN14encoder_reader9get_countEv>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4a53      	ldr	r2, [pc, #332]	; (8000cd8 <main+0x2b4>)
 8000b8c:	6013      	str	r3, [r2, #0]
	 COUNT_2 = ENCD2.get_count();
 8000b8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe3c 	bl	8000810 <_ZN14encoder_reader9get_countEv>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a50      	ldr	r2, [pc, #320]	; (8000cdc <main+0x2b8>)
 8000b9c:	6013      	str	r3, [r2, #0]

				 int32_t n3 = sprintf(buffer, "ENCODER 1:%d  ",COUNT_1);
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <main+0x2b4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	494e      	ldr	r1, [pc, #312]	; (8000ce0 <main+0x2bc>)
 8000ba6:	484a      	ldr	r0, [pc, #296]	; (8000cd0 <main+0x2ac>)
 8000ba8:	f004 ffc8 	bl	8005b3c <siprintf>
 8000bac:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
				HAL_UART_Transmit(&huart1,(uint8_t*) buffer, n3, 1000);
 8000bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	4945      	ldr	r1, [pc, #276]	; (8000cd0 <main+0x2ac>)
 8000bbc:	4839      	ldr	r0, [pc, #228]	; (8000ca4 <main+0x280>)
 8000bbe:	f003 fe66 	bl	800488e <HAL_UART_Transmit>
				int32_t n2 = sprintf(buffer, "ENCODER 1 %d \r\n",COUNT_2);
 8000bc2:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <main+0x2b8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4946      	ldr	r1, [pc, #280]	; (8000ce4 <main+0x2c0>)
 8000bca:	4841      	ldr	r0, [pc, #260]	; (8000cd0 <main+0x2ac>)
 8000bcc:	f004 ffb6 	bl	8005b3c <siprintf>
 8000bd0:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
				HAL_UART_Transmit(&huart1,(uint8_t*) buffer, n2, 1000);
 8000bd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	493c      	ldr	r1, [pc, #240]	; (8000cd0 <main+0x2ac>)
 8000be0:	4830      	ldr	r0, [pc, #192]	; (8000ca4 <main+0x280>)
 8000be2:	f003 fe54 	bl	800488e <HAL_UART_Transmit>

		  		  // State where the remote button is pressed
				  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8000be6:	2101      	movs	r1, #1
 8000be8:	483f      	ldr	r0, [pc, #252]	; (8000ce8 <main+0x2c4>)
 8000bea:	f001 fabd 	bl	8002168 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf0c      	ite	eq
 8000bf4:	2301      	moveq	r3, #1
 8000bf6:	2300      	movne	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d02a      	beq.n	8000c54 <main+0x230>
					  int32_t n1 = sprintf(buffer, "BUTTON PRESSED  \r\n");
 8000bfe:	493b      	ldr	r1, [pc, #236]	; (8000cec <main+0x2c8>)
 8000c00:	4833      	ldr	r0, [pc, #204]	; (8000cd0 <main+0x2ac>)
 8000c02:	f004 ff9b 	bl	8005b3c <siprintf>
 8000c06:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
					  MOTOR_1.Set_PWM(duty_cycle_1);	// Turn on the motors when the button is pressed
 8000c0a:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <main+0x2cc>)
 8000c0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fce6 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
					  MOTOR_2.Set_PWM(duty_cycle_2);
 8000c1c:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <main+0x2d0>)
 8000c1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c22:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fcdd 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
					  FLYWHEEL.Set_PWM(duty_cycle_flywheel);
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <main+0x2b0>)
 8000c30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fcd4 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
					  HAL_UART_Transmit(&huart1,(uint8_t*) buffer, n1, 1000);
 8000c40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4a:	4921      	ldr	r1, [pc, #132]	; (8000cd0 <main+0x2ac>)
 8000c4c:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <main+0x280>)
 8000c4e:	f003 fe1e 	bl	800488e <HAL_UART_Transmit>
 8000c52:	e791      	b.n	8000b78 <main+0x154>

				  // State where the remote button is not pressed
				      } else {
						  int32_t n1 = sprintf(buffer, "BUTTON NOT PRESSED \r\n ");
 8000c54:	4928      	ldr	r1, [pc, #160]	; (8000cf8 <main+0x2d4>)
 8000c56:	481e      	ldr	r0, [pc, #120]	; (8000cd0 <main+0x2ac>)
 8000c58:	f004 ff70 	bl	8005b3c <siprintf>
 8000c5c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
						  HAL_UART_Transmit(&huart1,(uint8_t*) buffer, n1, 1000);
 8000c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	4919      	ldr	r1, [pc, #100]	; (8000cd0 <main+0x2ac>)
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <main+0x280>)
 8000c6e:	f003 fe0e 	bl	800488e <HAL_UART_Transmit>
						  MOTOR_1.Set_PWM(0);	// Turn off the motors when the button is not pressed
 8000c72:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fcb5 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
						  MOTOR_2.Set_PWM(0);
 8000c7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fcaf 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
						  FLYWHEEL.Set_PWM(duty_cycle_flywheel);
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <main+0x2b0>)
 8000c8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fca6 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
				      }


    /* USER CODE BEGIN 3 */
  }
 8000c9c:	e76c      	b.n	8000b78 <main+0x154>
 8000c9e:	bf00      	nop
 8000ca0:	200000a0 	.word	0x200000a0
 8000ca4:	200002cc 	.word	0x200002cc
 8000ca8:	200001f4 	.word	0x200001f4
 8000cac:	2000023c 	.word	0x2000023c
 8000cb0:	200001ac 	.word	0x200001ac
 8000cb4:	20000164 	.word	0x20000164
 8000cb8:	20000010 	.word	0x20000010
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	2000000c 	.word	0x2000000c
 8000cc4:	20000110 	.word	0x20000110
 8000cc8:	20000284 	.word	0x20000284
 8000ccc:	08006250 	.word	0x08006250
 8000cd0:	200000a4 	.word	0x200000a4
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	20000108 	.word	0x20000108
 8000cdc:	2000010c 	.word	0x2000010c
 8000ce0:	08006268 	.word	0x08006268
 8000ce4:	08006278 	.word	0x08006278
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	08006288 	.word	0x08006288
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000002 	.word	0x20000002
 8000cf8:	0800629c 	.word	0x0800629c

08000cfc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	; 0x50
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	2230      	movs	r2, #48	; 0x30
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 fe1e 	bl	800594c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <_Z18SystemClock_Configv+0xdc>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	4a2b      	ldr	r2, [pc, #172]	; (8000dd8 <_Z18SystemClock_Configv+0xdc>)
 8000d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <_Z18SystemClock_Configv+0xdc>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <_Z18SystemClock_Configv+0xe0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <_Z18SystemClock_Configv+0xe0>)
 8000d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <_Z18SystemClock_Configv+0xe0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d6c:	2319      	movs	r3, #25
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d70:	23c0      	movs	r3, #192	; 0xc0
 8000d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 faf7 	bl	8003374 <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000d96:	f000 fb4f 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2103      	movs	r1, #3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fd54 	bl	8003864 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000dcc:	f000 fb34 	bl	8001438 <Error_Handler>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3750      	adds	r7, #80	; 0x50
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40007000 	.word	0x40007000

08000de0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000de6:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <_ZL12MX_I2C1_Initv+0x60>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000dec:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <_ZL12MX_I2C1_Initv+0x64>)
 8000dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <_ZL12MX_I2C1_Initv+0x5c>)
 8000e1e:	f001 f9bb 	bl	8002198 <HAL_I2C_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf14      	ite	ne
 8000e28:	2301      	movne	r3, #1
 8000e2a:	2300      	moveq	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000e32:	f000 fb01 	bl	8001438 <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000110 	.word	0x20000110
 8000e40:	40005400 	.word	0x40005400
 8000e44:	00061a80 	.word	0x00061a80

08000e48 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b092      	sub	sp, #72	; 0x48
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2220      	movs	r2, #32
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 fd6a 	bl	800594c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e78:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000e7a:	4a46      	ldr	r2, [pc, #280]	; (8000f94 <_ZL12MX_TIM1_Initv+0x14c>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4899;
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000e8c:	f241 3223 	movw	r2, #4899	; 0x1323
 8000e90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e92:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ea4:	483a      	ldr	r0, [pc, #232]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000ea6:	f002 febd 	bl	8003c24 <HAL_TIM_PWM_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8000eba:	f000 fabd 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4830      	ldr	r0, [pc, #192]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000ece:	f003 fbd1 	bl	8004674 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bf14      	ite	ne
 8000ed8:	2301      	movne	r3, #1
 8000eda:	2300      	moveq	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000ee2:	f000 faa9 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee6:	2360      	movs	r3, #96	; 0x60
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4821      	ldr	r0, [pc, #132]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000f0c:	f003 f8be 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bf14      	ite	ne
 8000f16:	2301      	movne	r3, #1
 8000f18:	2300      	moveq	r3, #0
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000f20:	f000 fa8a 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	2204      	movs	r2, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4818      	ldr	r0, [pc, #96]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000f2e:	f003 f8ad 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8000f42:	f000 fa79 	bl	8001438 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000f6a:	f003 fbf1 	bl	8004750 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bf14      	ite	ne
 8000f74:	2301      	movne	r3, #1
 8000f76:	2300      	moveq	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <_ZL12MX_TIM1_Initv+0x13a>
  {
    Error_Handler();
 8000f7e:	f000 fa5b 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <_ZL12MX_TIM1_Initv+0x148>)
 8000f84:	f000 fb98 	bl	80016b8 <HAL_TIM_MspPostInit>

}
 8000f88:	bf00      	nop
 8000f8a:	3748      	adds	r7, #72	; 0x48
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000164 	.word	0x20000164
 8000f94:	40010000 	.word	0x40010000

08000f98 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
 8000fb6:	615a      	str	r2, [r3, #20]
 8000fb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fba:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 8000fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fc2:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4899;
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 8000fd0:	f241 3223 	movw	r2, #4899	; 0x1323
 8000fd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fe2:	4838      	ldr	r0, [pc, #224]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 8000fe4:	f002 fe1e 	bl	8003c24 <HAL_TIM_PWM_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bf14      	ite	ne
 8000fee:	2301      	movne	r3, #1
 8000ff0:	2300      	moveq	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8000ff8:	f000 fa1e 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	4619      	mov	r1, r3
 800100a:	482e      	ldr	r0, [pc, #184]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 800100c:	f003 fb32 	bl	8004674 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf14      	ite	ne
 8001016:	2301      	movne	r3, #1
 8001018:	2300      	moveq	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8001020:	f000 fa0a 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	4822      	ldr	r0, [pc, #136]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 800103c:	f003 f826 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf14      	ite	ne
 8001046:	2301      	movne	r3, #1
 8001048:	2300      	moveq	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8001050:	f000 f9f2 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2204      	movs	r2, #4
 8001058:	4619      	mov	r1, r3
 800105a:	481a      	ldr	r0, [pc, #104]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 800105c:	f003 f816 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	bf14      	ite	ne
 8001066:	2301      	movne	r3, #1
 8001068:	2300      	moveq	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001070:	f000 f9e2 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2208      	movs	r2, #8
 8001078:	4619      	mov	r1, r3
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 800107c:	f003 f806 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf14      	ite	ne
 8001086:	2301      	movne	r3, #1
 8001088:	2300      	moveq	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 8001090:	f000 f9d2 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	220c      	movs	r2, #12
 8001098:	4619      	mov	r1, r3
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 800109c:	f002 fff6 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf14      	ite	ne
 80010a6:	2301      	movne	r3, #1
 80010a8:	2300      	moveq	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <_ZL12MX_TIM2_Initv+0x11c>
  {
    Error_Handler();
 80010b0:	f000 f9c2 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <_ZL12MX_TIM2_Initv+0x12c>)
 80010b6:	f000 faff 	bl	80016b8 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001ac 	.word	0x200001ac

080010c8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2224      	movs	r2, #36	; 0x24
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 fc38 	bl	800594c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <_ZL12MX_TIM3_Initv+0xb4>)
 80010e6:	4a26      	ldr	r2, [pc, #152]	; (8001180 <_ZL12MX_TIM3_Initv+0xb8>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <_ZL12MX_TIM3_Initv+0xb4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <_ZL12MX_TIM3_Initv+0xb4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <_ZL12MX_TIM3_Initv+0xb4>)
 80010f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <_ZL12MX_TIM3_Initv+0xb4>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <_ZL12MX_TIM3_Initv+0xb4>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800110a:	2301      	movs	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001112:	2301      	movs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001122:	2301      	movs	r3, #1
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4619      	mov	r1, r3
 8001134:	4811      	ldr	r0, [pc, #68]	; (800117c <_ZL12MX_TIM3_Initv+0xb4>)
 8001136:	f002 fe75 	bl	8003e24 <HAL_TIM_Encoder_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800114a:	f000 f975 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4808      	ldr	r0, [pc, #32]	; (800117c <_ZL12MX_TIM3_Initv+0xb4>)
 800115c:	f003 fa8a 	bl	8004674 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001170:	f000 f962 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001f4 	.word	0x200001f4
 8001180:	40000400 	.word	0x40000400

08001184 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2224      	movs	r2, #36	; 0x24
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f004 fbda 	bl	800594c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <_ZL12MX_TIM4_Initv+0xb4>)
 80011a2:	4a26      	ldr	r2, [pc, #152]	; (800123c <_ZL12MX_TIM4_Initv+0xb8>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011a6:	4b24      	ldr	r3, [pc, #144]	; (8001238 <_ZL12MX_TIM4_Initv+0xb4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <_ZL12MX_TIM4_Initv+0xb4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <_ZL12MX_TIM4_Initv+0xb4>)
 80011b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <_ZL12MX_TIM4_Initv+0xb4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <_ZL12MX_TIM4_Initv+0xb4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011de:	2301      	movs	r3, #1
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4619      	mov	r1, r3
 80011f0:	4811      	ldr	r0, [pc, #68]	; (8001238 <_ZL12MX_TIM4_Initv+0xb4>)
 80011f2:	f002 fe17 	bl	8003e24 <HAL_TIM_Encoder_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf14      	ite	ne
 80011fc:	2301      	movne	r3, #1
 80011fe:	2300      	moveq	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001206:	f000 f917 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4808      	ldr	r0, [pc, #32]	; (8001238 <_ZL12MX_TIM4_Initv+0xb4>)
 8001218:	f003 fa2c 	bl	8004674 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800122c:	f000 f904 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3730      	adds	r7, #48	; 0x30
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000023c 	.word	0x2000023c
 800123c:	40000800 	.word	0x40000800

08001240 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 8001264:	4a29      	ldr	r2, [pc, #164]	; (800130c <_ZL12MX_TIM5_Initv+0xcc>)
 8001266:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 800126a:	225f      	movs	r2, #95	; 0x5f
 800126c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 8001276:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800127a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001288:	481f      	ldr	r0, [pc, #124]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 800128a:	f002 fccb 	bl	8003c24 <HAL_TIM_PWM_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 800129e:	f000 f8cb 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4619      	mov	r1, r3
 80012b0:	4815      	ldr	r0, [pc, #84]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 80012b2:	f003 f9df 	bl	8004674 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf14      	ite	ne
 80012bc:	2301      	movne	r3, #1
 80012be:	2300      	moveq	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 80012c6:	f000 f8b7 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ca:	2360      	movs	r3, #96	; 0x60
 80012cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 80012e2:	f002 fed3 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 80012f6:	f000 f89f 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <_ZL12MX_TIM5_Initv+0xc8>)
 80012fc:	f000 f9dc 	bl	80016b8 <HAL_TIM_MspPostInit>

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000284 	.word	0x20000284
 800130c:	40000c00 	.word	0x40000c00

08001310 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <_ZL19MX_USART1_UART_Initv+0x54>)
 800131c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <_ZL19MX_USART1_UART_Initv+0x54>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <_ZL19MX_USART1_UART_Initv+0x54>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001348:	f003 fa54 	bl	80047f4 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	bf14      	ite	ne
 8001352:	2301      	movne	r3, #1
 8001354:	2300      	moveq	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800135c:	f000 f86c 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200002cc 	.word	0x200002cc
 8001368:	40011000 	.word	0x40011000

0800136c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a28      	ldr	r2, [pc, #160]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a21      	ldr	r2, [pc, #132]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a1a      	ldr	r2, [pc, #104]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a13      	ldr	r2, [pc, #76]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <_ZL12MX_GPIO_Initv+0xc0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	480a      	ldr	r0, [pc, #40]	; (8001430 <_ZL12MX_GPIO_Initv+0xc4>)
 8001408:	f000 fd2a 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800140c:	2301      	movs	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001414:	2301      	movs	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <_ZL12MX_GPIO_Initv+0xc8>)
 8001420:	f000 fd1e 	bl	8001e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	40020800 	.word	0x40020800
 8001434:	40020400 	.word	0x40020400

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	e7fe      	b.n	8001440 <Error_Handler+0x8>
	...

08001444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_MspInit+0x4c>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x4c>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_I2C_MspInit+0x84>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12c      	bne.n	8001510 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014dc:	2301      	movs	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e4:	2304      	movs	r3, #4
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <HAL_I2C_MspInit+0x8c>)
 80014f0:	f000 fcb6 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_I2C_MspInit+0x88>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40005400 	.word	0x40005400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400

08001524 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10e      	bne.n	8001554 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_TIM_PWM_MspInit+0x90>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_TIM_PWM_MspInit+0x90>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_TIM_PWM_MspInit+0x90>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001552:	e026      	b.n	80015a2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155c:	d10e      	bne.n	800157c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_TIM_PWM_MspInit+0x90>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <HAL_TIM_PWM_MspInit+0x90>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_TIM_PWM_MspInit+0x90>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
}
 800157a:	e012      	b.n	80015a2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <HAL_TIM_PWM_MspInit+0x94>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10d      	bne.n	80015a2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_TIM_PWM_MspInit+0x90>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <HAL_TIM_PWM_MspInit+0x90>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_TIM_PWM_MspInit+0x90>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
}
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40010000 	.word	0x40010000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40000c00 	.word	0x40000c00

080015bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a32      	ldr	r2, [pc, #200]	; (80016a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12c      	bne.n	8001638 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a30      	ldr	r2, [pc, #192]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001616:	23c0      	movs	r3, #192	; 0xc0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001626:	2302      	movs	r3, #2
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	481e      	ldr	r0, [pc, #120]	; (80016ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8001632:	f000 fc15 	bl	8001e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001636:	e030      	b.n	800169a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12b      	bne.n	800169a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800167a:	23c0      	movs	r3, #192	; 0xc0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800168a:	2302      	movs	r3, #2
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001696:	f000 fbe3 	bl	8001e60 <HAL_GPIO_Init>
}
 800169a:	bf00      	nop
 800169c:	3730      	adds	r7, #48	; 0x30
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40000400 	.word	0x40000400
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40000800 	.word	0x40000800
 80016b4:	40020400 	.word	0x40020400

080016b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a36      	ldr	r2, [pc, #216]	; (80017b0 <HAL_TIM_MspPostInit+0xf8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d11f      	bne.n	800171a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_TIM_MspPostInit+0xfc>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a34      	ldr	r2, [pc, #208]	; (80017b4 <HAL_TIM_MspPostInit+0xfc>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_TIM_MspPostInit+0xfc>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001708:	2301      	movs	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	4829      	ldr	r0, [pc, #164]	; (80017b8 <HAL_TIM_MspPostInit+0x100>)
 8001714:	f000 fba4 	bl	8001e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001718:	e046      	b.n	80017a8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001722:	d11e      	bne.n	8001762 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_TIM_MspPostInit+0xfc>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <HAL_TIM_MspPostInit+0xfc>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6313      	str	r3, [r2, #48]	; 0x30
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_TIM_MspPostInit+0xfc>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8001740:	232e      	movs	r3, #46	; 0x2e
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001750:	2301      	movs	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4817      	ldr	r0, [pc, #92]	; (80017b8 <HAL_TIM_MspPostInit+0x100>)
 800175c:	f000 fb80 	bl	8001e60 <HAL_GPIO_Init>
}
 8001760:	e022      	b.n	80017a8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <HAL_TIM_MspPostInit+0x104>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d11d      	bne.n	80017a8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_TIM_MspPostInit+0xfc>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_TIM_MspPostInit+0xfc>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_TIM_MspPostInit+0xfc>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001788:	2301      	movs	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001798:	2302      	movs	r3, #2
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <HAL_TIM_MspPostInit+0x100>)
 80017a4:	f000 fb5c 	bl	8001e60 <HAL_GPIO_Init>
}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	; 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40000c00 	.word	0x40000c00

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a2c      	ldr	r2, [pc, #176]	; (8001890 <HAL_UART_MspInit+0xd0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d152      	bne.n	8001888 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_UART_MspInit+0xd4>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <HAL_UART_MspInit+0xd4>)
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_UART_MspInit+0xd4>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_UART_MspInit+0xd4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a23      	ldr	r2, [pc, #140]	; (8001894 <HAL_UART_MspInit+0xd4>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_UART_MspInit+0xd4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_UART_MspInit+0xd4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_UART_MspInit+0xd4>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_UART_MspInit+0xd4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001848:	2307      	movs	r3, #7
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4811      	ldr	r0, [pc, #68]	; (8001898 <HAL_UART_MspInit+0xd8>)
 8001854:	f000 fb04 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001858:	2308      	movs	r3, #8
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001868:	2307      	movs	r3, #7
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	480a      	ldr	r0, [pc, #40]	; (800189c <HAL_UART_MspInit+0xdc>)
 8001874:	f000 faf4 	bl	8001e60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2025      	movs	r0, #37	; 0x25
 800187e:	f000 fa26 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001882:	2025      	movs	r0, #37	; 0x25
 8001884:	f000 fa3f 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40011000 	.word	0x40011000
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020400 	.word	0x40020400

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f8d0 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <USART1_IRQHandler+0x10>)
 80018fa:	f003 f88b 	bl	8004a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002cc 	.word	0x200002cc

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f003 ffde 	bl	80058f8 <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20020000 	.word	0x20020000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000310 	.word	0x20000310
 8001970:	20000328 	.word	0x20000328

08001974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b4:	4c0b      	ldr	r4, [pc, #44]	; (80019e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c2:	f7ff ffd7 	bl	8001974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f003 ff9d 	bl	8005904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7ff f82b 	bl	8000a24 <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80019dc:	08006370 	.word	0x08006370
  ldr r2, =_sbss
 80019e0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80019e4:	20000328 	.word	0x20000328

080019e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_Init+0x40>)
 80019f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_Init+0x40>)
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_Init+0x40>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f94f 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff fd10 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f967 	bl	8001d22 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a6c:	f000 f92f 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000014 	.word	0x20000014
 8001a88:	2000001c 	.word	0x2000001c
 8001a8c:	20000018 	.word	0x20000018

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	2000001c 	.word	0x2000001c
 8001ab4:	20000314 	.word	0x20000314

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000314 	.word	0x20000314

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff ffee 	bl	8001ab8 <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000001c 	.word	0x2000001c

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff3e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff feb6 	bl	8001ab8 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d008      	beq.n	8001d6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e052      	b.n	8001e12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0216 	bic.w	r2, r2, #22
 8001d7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d103      	bne.n	8001d9c <HAL_DMA_Abort+0x62>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0208 	bic.w	r2, r2, #8
 8001daa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbc:	e013      	b.n	8001de6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dbe:	f7ff fe7b 	bl	8001ab8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d90c      	bls.n	8001de6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e015      	b.n	8001e12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1e4      	bne.n	8001dbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	223f      	movs	r2, #63	; 0x3f
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d004      	beq.n	8001e38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00c      	b.n	8001e52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2205      	movs	r2, #5
 8001e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e159      	b.n	8002130 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8148 	bne.w	800212a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d005      	beq.n	8001eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a2 	beq.w	800212a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b57      	ldr	r3, [pc, #348]	; (8002148 <HAL_GPIO_Init+0x2e8>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a56      	ldr	r2, [pc, #344]	; (8002148 <HAL_GPIO_Init+0x2e8>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b54      	ldr	r3, [pc, #336]	; (8002148 <HAL_GPIO_Init+0x2e8>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002002:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_GPIO_Init+0x2ec>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a49      	ldr	r2, [pc, #292]	; (8002150 <HAL_GPIO_Init+0x2f0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d019      	beq.n	8002062 <HAL_GPIO_Init+0x202>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_GPIO_Init+0x2f4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0x1fe>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a47      	ldr	r2, [pc, #284]	; (8002158 <HAL_GPIO_Init+0x2f8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00d      	beq.n	800205a <HAL_GPIO_Init+0x1fa>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a46      	ldr	r2, [pc, #280]	; (800215c <HAL_GPIO_Init+0x2fc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <HAL_GPIO_Init+0x1f6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a45      	ldr	r2, [pc, #276]	; (8002160 <HAL_GPIO_Init+0x300>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_GPIO_Init+0x1f2>
 800204e:	2304      	movs	r3, #4
 8002050:	e008      	b.n	8002064 <HAL_GPIO_Init+0x204>
 8002052:	2307      	movs	r3, #7
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x204>
 8002056:	2303      	movs	r3, #3
 8002058:	e004      	b.n	8002064 <HAL_GPIO_Init+0x204>
 800205a:	2302      	movs	r3, #2
 800205c:	e002      	b.n	8002064 <HAL_GPIO_Init+0x204>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x204>
 8002062:	2300      	movs	r3, #0
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	f002 0203 	and.w	r2, r2, #3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4093      	lsls	r3, r2
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002074:	4935      	ldr	r1, [pc, #212]	; (800214c <HAL_GPIO_Init+0x2ec>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a6:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d0:	4a24      	ldr	r2, [pc, #144]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020fa:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	f67f aea2 	bls.w	8001e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40013800 	.word	0x40013800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020400 	.word	0x40020400
 8002158:	40020800 	.word	0x40020800
 800215c:	40020c00 	.word	0x40020c00
 8002160:	40021000 	.word	0x40021000
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e001      	b.n	800218a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e12b      	b.n	8002402 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff f968 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	; 0x24
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021fc:	f001 fcea 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8002200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a81      	ldr	r2, [pc, #516]	; (800240c <HAL_I2C_Init+0x274>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d807      	bhi.n	800221c <HAL_I2C_Init+0x84>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a80      	ldr	r2, [pc, #512]	; (8002410 <HAL_I2C_Init+0x278>)
 8002210:	4293      	cmp	r3, r2
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e006      	b.n	800222a <HAL_I2C_Init+0x92>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a7d      	ldr	r2, [pc, #500]	; (8002414 <HAL_I2C_Init+0x27c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	bf94      	ite	ls
 8002224:	2301      	movls	r3, #1
 8002226:	2300      	movhi	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0e7      	b.n	8002402 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a78      	ldr	r2, [pc, #480]	; (8002418 <HAL_I2C_Init+0x280>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9b      	lsrs	r3, r3, #18
 800223c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a6a      	ldr	r2, [pc, #424]	; (800240c <HAL_I2C_Init+0x274>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d802      	bhi.n	800226c <HAL_I2C_Init+0xd4>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3301      	adds	r3, #1
 800226a:	e009      	b.n	8002280 <HAL_I2C_Init+0xe8>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	4a69      	ldr	r2, [pc, #420]	; (800241c <HAL_I2C_Init+0x284>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	3301      	adds	r3, #1
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	495c      	ldr	r1, [pc, #368]	; (800240c <HAL_I2C_Init+0x274>)
 800229c:	428b      	cmp	r3, r1
 800229e:	d819      	bhi.n	80022d4 <HAL_I2C_Init+0x13c>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e59      	subs	r1, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ae:	1c59      	adds	r1, r3, #1
 80022b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022b4:	400b      	ands	r3, r1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_I2C_Init+0x138>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ce:	e051      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 80022d0:	2304      	movs	r3, #4
 80022d2:	e04f      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d111      	bne.n	8002300 <HAL_I2C_Init+0x168>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e58      	subs	r0, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	440b      	add	r3, r1
 80022ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e012      	b.n	8002326 <HAL_I2C_Init+0x18e>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	0099      	lsls	r1, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	fbb0 f3f3 	udiv	r3, r0, r3
 8002316:	3301      	adds	r3, #1
 8002318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Init+0x196>
 800232a:	2301      	movs	r3, #1
 800232c:	e022      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10e      	bne.n	8002354 <HAL_I2C_Init+0x1bc>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e58      	subs	r0, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	440b      	add	r3, r1
 8002344:	fbb0 f3f3 	udiv	r3, r0, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002352:	e00f      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1e58      	subs	r0, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	0099      	lsls	r1, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	fbb0 f3f3 	udiv	r3, r0, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	6809      	ldr	r1, [r1, #0]
 8002378:	4313      	orrs	r3, r2
 800237a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6911      	ldr	r1, [r2, #16]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68d2      	ldr	r2, [r2, #12]
 80023ae:	4311      	orrs	r1, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	000186a0 	.word	0x000186a0
 8002410:	001e847f 	.word	0x001e847f
 8002414:	003d08ff 	.word	0x003d08ff
 8002418:	431bde83 	.word	0x431bde83
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	461a      	mov	r2, r3
 800242e:	4603      	mov	r3, r0
 8002430:	817b      	strh	r3, [r7, #10]
 8002432:	460b      	mov	r3, r1
 8002434:	813b      	strh	r3, [r7, #8]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800243a:	f7ff fb3d 	bl	8001ab8 <HAL_GetTick>
 800243e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	f040 80d9 	bne.w	8002600 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2319      	movs	r3, #25
 8002454:	2201      	movs	r2, #1
 8002456:	496d      	ldr	r1, [pc, #436]	; (800260c <HAL_I2C_Mem_Write+0x1ec>)
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fdad 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
 8002466:	e0cc      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_I2C_Mem_Write+0x56>
 8002472:	2302      	movs	r3, #2
 8002474:	e0c5      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d007      	beq.n	800249c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2221      	movs	r2, #33	; 0x21
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a3a      	ldr	r2, [r7, #32]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4a4d      	ldr	r2, [pc, #308]	; (8002610 <HAL_I2C_Mem_Write+0x1f0>)
 80024dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024de:	88f8      	ldrh	r0, [r7, #6]
 80024e0:	893a      	ldrh	r2, [r7, #8]
 80024e2:	8979      	ldrh	r1, [r7, #10]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	4603      	mov	r3, r0
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fbe4 	bl	8002cbc <I2C_RequestMemoryWrite>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d052      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e081      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fe2e 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00d      	beq.n	800252a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2b04      	cmp	r3, #4
 8002514:	d107      	bne.n	8002526 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002524:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06b      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b04      	cmp	r3, #4
 8002566:	d11b      	bne.n	80025a0 <HAL_I2C_Mem_Write+0x180>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d017      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1aa      	bne.n	80024fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fe1a 	bl	80031e6 <I2C_WaitOnBTFFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d107      	bne.n	80025d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e016      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	00100002 	.word	0x00100002
 8002610:	ffff0000 	.word	0xffff0000

08002614 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	; 0x30
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4603      	mov	r3, r0
 8002624:	817b      	strh	r3, [r7, #10]
 8002626:	460b      	mov	r3, r1
 8002628:	813b      	strh	r3, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800262e:	f7ff fa43 	bl	8001ab8 <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b20      	cmp	r3, #32
 800263e:	f040 8208 	bne.w	8002a52 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2319      	movs	r3, #25
 8002648:	2201      	movs	r2, #1
 800264a:	497b      	ldr	r1, [pc, #492]	; (8002838 <HAL_I2C_Mem_Read+0x224>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fcb3 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
 800265a:	e1fb      	b.n	8002a54 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_I2C_Mem_Read+0x56>
 8002666:	2302      	movs	r3, #2
 8002668:	e1f4      	b.n	8002a54 <HAL_I2C_Mem_Read+0x440>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d007      	beq.n	8002690 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2222      	movs	r2, #34	; 0x22
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a5b      	ldr	r2, [pc, #364]	; (800283c <HAL_I2C_Mem_Read+0x228>)
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026d2:	88f8      	ldrh	r0, [r7, #6]
 80026d4:	893a      	ldrh	r2, [r7, #8]
 80026d6:	8979      	ldrh	r1, [r7, #10]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4603      	mov	r3, r0
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fb80 	bl	8002de8 <I2C_RequestMemoryRead>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1b0      	b.n	8002a54 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d113      	bne.n	8002722 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	623b      	str	r3, [r7, #32]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	623b      	str	r3, [r7, #32]
 800270e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e184      	b.n	8002a2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	2b01      	cmp	r3, #1
 8002728:	d11b      	bne.n	8002762 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e164      	b.n	8002a2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	2b02      	cmp	r3, #2
 8002768:	d11b      	bne.n	80027a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002788:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	e144      	b.n	8002a2c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027b8:	e138      	b.n	8002a2c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	2b03      	cmp	r3, #3
 80027c0:	f200 80f1 	bhi.w	80029a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d123      	bne.n	8002814 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fd49 	bl	8003268 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e139      	b.n	8002a54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002812:	e10b      	b.n	8002a2c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	2b02      	cmp	r3, #2
 800281a:	d14e      	bne.n	80028ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	2200      	movs	r2, #0
 8002824:	4906      	ldr	r1, [pc, #24]	; (8002840 <HAL_I2C_Mem_Read+0x22c>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fbc6 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e10e      	b.n	8002a54 <HAL_I2C_Mem_Read+0x440>
 8002836:	bf00      	nop
 8002838:	00100002 	.word	0x00100002
 800283c:	ffff0000 	.word	0xffff0000
 8002840:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028b8:	e0b8      	b.n	8002a2c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	2200      	movs	r2, #0
 80028c2:	4966      	ldr	r1, [pc, #408]	; (8002a5c <HAL_I2C_Mem_Read+0x448>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fb77 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0bf      	b.n	8002a54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	2200      	movs	r2, #0
 800291e:	494f      	ldr	r1, [pc, #316]	; (8002a5c <HAL_I2C_Mem_Read+0x448>)
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fb49 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e091      	b.n	8002a54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029a4:	e042      	b.n	8002a2c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fc5c 	bl	8003268 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e04c      	b.n	8002a54 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d118      	bne.n	8002a2c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f47f aec2 	bne.w	80027ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3728      	adds	r7, #40	; 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	00010004 	.word	0x00010004

08002a60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a70:	f7ff f822 	bl	8001ab8 <HAL_GetTick>
 8002a74:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	f040 8111 	bne.w	8002caa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2319      	movs	r3, #25
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4988      	ldr	r1, [pc, #544]	; (8002cb4 <HAL_I2C_IsDeviceReady+0x254>)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fa90 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e104      	b.n	8002cac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_I2C_IsDeviceReady+0x50>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0fd      	b.n	8002cac <HAL_I2C_IsDeviceReady+0x24c>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d007      	beq.n	8002ad6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2224      	movs	r2, #36	; 0x24
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a70      	ldr	r2, [pc, #448]	; (8002cb8 <HAL_I2C_IsDeviceReady+0x258>)
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b08:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fa4e 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b30:	d103      	bne.n	8002b3a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0b6      	b.n	8002cac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b4c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe ffb3 	bl	8001ab8 <HAL_GetTick>
 8002b52:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	bf0c      	ite	eq
 8002b62:	2301      	moveq	r3, #1
 8002b64:	2300      	movne	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b82:	e025      	b.n	8002bd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b84:	f7fe ff98 	bl	8001ab8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d302      	bcc.n	8002b9a <HAL_I2C_IsDeviceReady+0x13a>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	22a0      	movs	r2, #160	; 0xa0
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2ba0      	cmp	r3, #160	; 0xa0
 8002bda:	d005      	beq.n	8002be8 <HAL_I2C_IsDeviceReady+0x188>
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d102      	bne.n	8002be8 <HAL_I2C_IsDeviceReady+0x188>
 8002be2:	7dbb      	ldrb	r3, [r7, #22]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0cd      	beq.n	8002b84 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d129      	bne.n	8002c52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2319      	movs	r3, #25
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4921      	ldr	r1, [pc, #132]	; (8002cb4 <HAL_I2C_IsDeviceReady+0x254>)
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f9c2 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e036      	b.n	8002cac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e02c      	b.n	8002cac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2319      	movs	r3, #25
 8002c72:	2201      	movs	r2, #1
 8002c74:	490f      	ldr	r1, [pc, #60]	; (8002cb4 <HAL_I2C_IsDeviceReady+0x254>)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f99e 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e012      	b.n	8002cac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f4ff af32 	bcc.w	8002afa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
  }
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	00100002 	.word	0x00100002
 8002cb8:	ffff0000 	.word	0xffff0000

08002cbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	813b      	strh	r3, [r7, #8]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f960 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	d103      	bne.n	8002d16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e05f      	b.n	8002dda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	492d      	ldr	r1, [pc, #180]	; (8002de4 <I2C_RequestMemoryWrite+0x128>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f998 	bl	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e04c      	b.n	8002dda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fa02 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e02b      	b.n	8002dda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d88:	893b      	ldrh	r3, [r7, #8]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	e021      	b.n	8002dd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f9dc 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e005      	b.n	8002dda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dce:	893b      	ldrh	r3, [r7, #8]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	00010002 	.word	0x00010002

08002de8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	813b      	strh	r3, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8c2 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e48:	d103      	bne.n	8002e52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0aa      	b.n	8002fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	6a3a      	ldr	r2, [r7, #32]
 8002e6a:	4952      	ldr	r1, [pc, #328]	; (8002fb4 <I2C_RequestMemoryRead+0x1cc>)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f8fa 	bl	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e097      	b.n	8002fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f964 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d107      	bne.n	8002eba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e076      	b.n	8002fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec4:	893b      	ldrh	r3, [r7, #8]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	611a      	str	r2, [r3, #16]
 8002ece:	e021      	b.n	8002f14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ed0:	893b      	ldrh	r3, [r7, #8]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	6a39      	ldr	r1, [r7, #32]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f93e 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d107      	bne.n	8002f06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e050      	b.n	8002fac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0a:	893b      	ldrh	r3, [r7, #8]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f16:	6a39      	ldr	r1, [r7, #32]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f923 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d107      	bne.n	8002f3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e035      	b.n	8002fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f82b 	bl	8002fb8 <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f76:	d103      	bne.n	8002f80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e013      	b.n	8002fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f84:	897b      	ldrh	r3, [r7, #10]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <I2C_RequestMemoryRead+0x1cc>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f863 	bl	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	00010002 	.word	0x00010002

08002fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc8:	e025      	b.n	8003016 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd0:	d021      	beq.n	8003016 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fe fd71 	bl	8001ab8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d116      	bne.n	8003016 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e023      	b.n	800305e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10d      	bne.n	800303c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	e00c      	b.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4013      	ands	r3, r2
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	429a      	cmp	r2, r3
 800305a:	d0b6      	beq.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003074:	e051      	b.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003084:	d123      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003094:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f043 0204 	orr.w	r2, r3, #4
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e046      	b.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d4:	d021      	beq.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	f7fe fcef 	bl	8001ab8 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d302      	bcc.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d116      	bne.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e020      	b.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10c      	bne.n	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	43da      	mvns	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4013      	ands	r3, r2
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e00b      	b.n	8003156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	43da      	mvns	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4013      	ands	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d18d      	bne.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003170:	e02d      	b.n	80031ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8ce 	bl	8003314 <I2C_IsAcknowledgeFailed>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e02d      	b.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003188:	d021      	beq.n	80031ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe fc95 	bl	8001ab8 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f043 0220 	orr.w	r2, r3, #32
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e007      	b.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d1ca      	bne.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f2:	e02d      	b.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f88d 	bl	8003314 <I2C_IsAcknowledgeFailed>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e02d      	b.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320a:	d021      	beq.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320c:	f7fe fc54 	bl	8001ab8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	429a      	cmp	r2, r3
 800321a:	d302      	bcc.n	8003222 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d116      	bne.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e007      	b.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d1ca      	bne.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003274:	e042      	b.n	80032fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b10      	cmp	r3, #16
 8003282:	d119      	bne.n	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0210 	mvn.w	r2, #16
 800328c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e029      	b.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b8:	f7fe fbfe 	bl	8001ab8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d302      	bcc.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e007      	b.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d1b5      	bne.n	8003276 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332a:	d11b      	bne.n	8003364 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003334:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e267      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d075      	beq.n	800347e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003392:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d00c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d112      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b82      	ldr	r3, [pc, #520]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b7e      	ldr	r3, [pc, #504]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x108>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e242      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x74>
 80033da:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a75      	ldr	r2, [pc, #468]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x98>
 80033f2:	4b70      	ldr	r3, [pc, #448]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6f      	ldr	r2, [pc, #444]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6d      	ldr	r3, [pc, #436]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6c      	ldr	r2, [pc, #432]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 800340c:	4b69      	ldr	r3, [pc, #420]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a68      	ldr	r2, [pc, #416]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b66      	ldr	r3, [pc, #408]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a65      	ldr	r2, [pc, #404]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fb44 	bl	8001ab8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fb40 	bl	8001ab8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e207      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b5b      	ldr	r3, [pc, #364]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xc0>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fb30 	bl	8001ab8 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe fb2c 	bl	8001ab8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1f3      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b51      	ldr	r3, [pc, #324]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0xe8>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348a:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b44      	ldr	r3, [pc, #272]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1c7      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4937      	ldr	r1, [pc, #220]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <HAL_RCC_OscConfig+0x244>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fae5 	bl	8001ab8 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe fae1 	bl	8001ab8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1a8      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4925      	ldr	r1, [pc, #148]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <HAL_RCC_OscConfig+0x244>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fac4 	bl	8001ab8 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe fac0 	bl	8001ab8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e187      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d036      	beq.n	80035cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_RCC_OscConfig+0x248>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe faa4 	bl	8001ab8 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe faa0 	bl	8001ab8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e167      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x200>
 8003592:	e01b      	b.n	80035cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_OscConfig+0x248>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fe fa8d 	bl	8001ab8 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	e00e      	b.n	80035c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fe fa89 	bl	8001ab8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d907      	bls.n	80035c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e150      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
 80035b4:	40023800 	.word	0x40023800
 80035b8:	42470000 	.word	0x42470000
 80035bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	4b88      	ldr	r3, [pc, #544]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1ea      	bne.n	80035a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8097 	beq.w	8003708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035de:	4b81      	ldr	r3, [pc, #516]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	4b7d      	ldr	r3, [pc, #500]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a7c      	ldr	r2, [pc, #496]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
 80035fa:	4b7a      	ldr	r3, [pc, #488]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b77      	ldr	r3, [pc, #476]	; (80037e8 <HAL_RCC_OscConfig+0x474>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b74      	ldr	r3, [pc, #464]	; (80037e8 <HAL_RCC_OscConfig+0x474>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a73      	ldr	r2, [pc, #460]	; (80037e8 <HAL_RCC_OscConfig+0x474>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fe fa49 	bl	8001ab8 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fe fa45 	bl	8001ab8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e10c      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_OscConfig+0x474>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x2ea>
 8003650:	4b64      	ldr	r3, [pc, #400]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a63      	ldr	r2, [pc, #396]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	e01c      	b.n	8003698 <HAL_RCC_OscConfig+0x324>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b05      	cmp	r3, #5
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x30c>
 8003666:	4b5f      	ldr	r3, [pc, #380]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a5e      	ldr	r2, [pc, #376]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	4b5c      	ldr	r3, [pc, #368]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a5b      	ldr	r2, [pc, #364]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0x324>
 8003680:	4b58      	ldr	r3, [pc, #352]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a57      	ldr	r2, [pc, #348]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	4b55      	ldr	r3, [pc, #340]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a54      	ldr	r2, [pc, #336]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003692:	f023 0304 	bic.w	r3, r3, #4
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe fa0a 	bl	8001ab8 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe fa06 	bl	8001ab8 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0cb      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ee      	beq.n	80036a8 <HAL_RCC_OscConfig+0x334>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe f9f4 	bl	8001ab8 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fe f9f0 	bl	8001ab8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0b5      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	4b3e      	ldr	r3, [pc, #248]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ee      	bne.n	80036d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	4a38      	ldr	r2, [pc, #224]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80a1 	beq.w	8003854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003712:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b08      	cmp	r3, #8
 800371c:	d05c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d141      	bne.n	80037aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b31      	ldr	r3, [pc, #196]	; (80037ec <HAL_RCC_OscConfig+0x478>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe f9c4 	bl	8001ab8 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe f9c0 	bl	8001ab8 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e087      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	019b      	lsls	r3, r3, #6
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	3b01      	subs	r3, #1
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	491b      	ldr	r1, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_RCC_OscConfig+0x478>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe f999 	bl	8001ab8 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378a:	f7fe f995 	bl	8001ab8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e05c      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x416>
 80037a8:	e054      	b.n	8003854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_RCC_OscConfig+0x478>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe f982 	bl	8001ab8 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe f97e 	bl	8001ab8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e045      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x444>
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e038      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
 80037ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x4ec>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d028      	beq.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d121      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d11a      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003828:	4293      	cmp	r3, r2
 800382a:	d111      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	3b01      	subs	r3, #1
 800383a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0cc      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003878:	4b68      	ldr	r3, [pc, #416]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d90c      	bls.n	80038a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b63      	ldr	r3, [pc, #396]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0b8      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b8:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4a58      	ldr	r2, [pc, #352]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d0:	4b53      	ldr	r3, [pc, #332]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b50      	ldr	r3, [pc, #320]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	494d      	ldr	r1, [pc, #308]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d044      	beq.n	8003984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b47      	ldr	r3, [pc, #284]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d119      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d003      	beq.n	8003922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391e:	2b03      	cmp	r3, #3
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b3f      	ldr	r3, [pc, #252]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e067      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003942:	4b37      	ldr	r3, [pc, #220]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4934      	ldr	r1, [pc, #208]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003954:	f7fe f8b0 	bl	8001ab8 <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7fe f8ac 	bl	8001ab8 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e04f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 020c 	and.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1eb      	bne.n	800395c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d20c      	bcs.n	80039ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e032      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4916      	ldr	r1, [pc, #88]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	490e      	ldr	r1, [pc, #56]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ea:	f000 f821 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039ee:	4602      	mov	r2, r0
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	490a      	ldr	r1, [pc, #40]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	5ccb      	ldrb	r3, [r1, r3]
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a06:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe f810 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023c00 	.word	0x40023c00
 8003a20:	40023800 	.word	0x40023800
 8003a24:	080062b4 	.word	0x080062b4
 8003a28:	20000014 	.word	0x20000014
 8003a2c:	20000018 	.word	0x20000018

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a34:	b090      	sub	sp, #64	; 0x40
 8003a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a40:	2300      	movs	r3, #0
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a48:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d00d      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x40>
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	f200 80a1 	bhi.w	8003b9c <HAL_RCC_GetSysClockFreq+0x16c>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a62:	e09b      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a68:	e09b      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6a:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a6e:	e098      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a70:	4b4f      	ldr	r3, [pc, #316]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7a:	4b4d      	ldr	r3, [pc, #308]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d028      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a86:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	627a      	str	r2, [r7, #36]	; 0x24
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a9c:	fb03 f201 	mul.w	r2, r3, r1
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	fb00 f303 	mul.w	r3, r0, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4a43      	ldr	r2, [pc, #268]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aaa:	fba0 1202 	umull	r1, r2, r0, r2
 8003aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab0:	460a      	mov	r2, r1
 8003ab2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab6:	4413      	add	r3, r2
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abc:	2200      	movs	r2, #0
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	61fa      	str	r2, [r7, #28]
 8003ac2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003aca:	f7fc fbd9 	bl	8000280 <__aeabi_uldivmod>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad6:	e053      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad8:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	099b      	lsrs	r3, r3, #6
 8003ade:	2200      	movs	r2, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	617a      	str	r2, [r7, #20]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aea:	f04f 0b00 	mov.w	fp, #0
 8003aee:	4652      	mov	r2, sl
 8003af0:	465b      	mov	r3, fp
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	0159      	lsls	r1, r3, #5
 8003afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b00:	0150      	lsls	r0, r2, #5
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	ebb2 080a 	subs.w	r8, r2, sl
 8003b0a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b22:	ebb2 0408 	subs.w	r4, r2, r8
 8003b26:	eb63 0509 	sbc.w	r5, r3, r9
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	00eb      	lsls	r3, r5, #3
 8003b34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b38:	00e2      	lsls	r2, r4, #3
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	461d      	mov	r5, r3
 8003b3e:	eb14 030a 	adds.w	r3, r4, sl
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	eb45 030b 	adc.w	r3, r5, fp
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b56:	4629      	mov	r1, r5
 8003b58:	028b      	lsls	r3, r1, #10
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b60:	4621      	mov	r1, r4
 8003b62:	028a      	lsls	r2, r1, #10
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	60fa      	str	r2, [r7, #12]
 8003b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b74:	f7fc fb84 	bl	8000280 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3740      	adds	r7, #64	; 0x40
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	017d7840 	.word	0x017d7840

08003bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000014 	.word	0x20000014

08003bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bd8:	f7ff fff0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0a9b      	lsrs	r3, r3, #10
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	080062c4 	.word	0x080062c4

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c00:	f7ff ffdc 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	0b5b      	lsrs	r3, r3, #13
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4903      	ldr	r1, [pc, #12]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	080062c4 	.word	0x080062c4

08003c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e041      	b.n	8003cba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fc6a 	bl	8001524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f000 fad4 	bl	8004210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_TIM_PWM_Start+0x24>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e022      	b.n	8003d2e <HAL_TIM_PWM_Start+0x6a>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d109      	bne.n	8003d02 <HAL_TIM_PWM_Start+0x3e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	e015      	b.n	8003d2e <HAL_TIM_PWM_Start+0x6a>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d109      	bne.n	8003d1c <HAL_TIM_PWM_Start+0x58>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e008      	b.n	8003d2e <HAL_TIM_PWM_Start+0x6a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e068      	b.n	8003e08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x82>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d44:	e013      	b.n	8003d6e <HAL_TIM_PWM_Start+0xaa>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start+0x92>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d54:	e00b      	b.n	8003d6e <HAL_TIM_PWM_Start+0xaa>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_PWM_Start+0xa2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d64:	e003      	b.n	8003d6e <HAL_TIM_PWM_Start+0xaa>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2201      	movs	r2, #1
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fc56 	bl	8004628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a23      	ldr	r2, [pc, #140]	; (8003e10 <HAL_TIM_PWM_Start+0x14c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d107      	bne.n	8003d96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <HAL_TIM_PWM_Start+0x14c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d013      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <HAL_TIM_PWM_Start+0x150>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a17      	ldr	r2, [pc, #92]	; (8003e18 <HAL_TIM_PWM_Start+0x154>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a16      	ldr	r2, [pc, #88]	; (8003e1c <HAL_TIM_PWM_Start+0x158>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <HAL_TIM_PWM_Start+0x15c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d111      	bne.n	8003df6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d010      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df4:	e007      	b.n	8003e06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40014000 	.word	0x40014000

08003e24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e097      	b.n	8003f68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fd fbb5 	bl	80015bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e68:	f023 0307 	bic.w	r3, r3, #7
 8003e6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f000 f9c9 	bl	8004210 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea6:	f023 0303 	bic.w	r3, r3, #3
 8003eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ec4:	f023 030c 	bic.w	r3, r3, #12
 8003ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	011a      	lsls	r2, r3, #4
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	031b      	lsls	r3, r3, #12
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	4313      	orrs	r3, r2
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d110      	bne.n	8003fc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d102      	bne.n	8003fac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fa6:	7b7b      	ldrb	r3, [r7, #13]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e069      	b.n	8004084 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc0:	e031      	b.n	8004026 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d110      	bne.n	8003fea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d102      	bne.n	8003fd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fce:	7b3b      	ldrb	r3, [r7, #12]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d001      	beq.n	8003fd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e055      	b.n	8004084 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe8:	e01d      	b.n	8004026 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d108      	bne.n	8004002 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ff0:	7bbb      	ldrb	r3, [r7, #14]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ff6:	7b7b      	ldrb	r3, [r7, #13]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d102      	bne.n	8004002 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ffc:	7b3b      	ldrb	r3, [r7, #12]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d001      	beq.n	8004006 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e03e      	b.n	8004084 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_TIM_Encoder_Start+0xc4>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b04      	cmp	r3, #4
 8004030:	d008      	beq.n	8004044 <HAL_TIM_Encoder_Start+0xd4>
 8004032:	e00f      	b.n	8004054 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2201      	movs	r2, #1
 800403a:	2100      	movs	r1, #0
 800403c:	4618      	mov	r0, r3
 800403e:	f000 faf3 	bl	8004628 <TIM_CCxChannelCmd>
      break;
 8004042:	e016      	b.n	8004072 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	2104      	movs	r1, #4
 800404c:	4618      	mov	r0, r3
 800404e:	f000 faeb 	bl	8004628 <TIM_CCxChannelCmd>
      break;
 8004052:	e00e      	b.n	8004072 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fae3 	bl	8004628 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	2104      	movs	r1, #4
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fadc 	bl	8004628 <TIM_CCxChannelCmd>
      break;
 8004070:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0ae      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	f200 809f 	bhi.w	80041f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	080041f9 	.word	0x080041f9
 80040c8:	080041f9 	.word	0x080041f9
 80040cc:	080041f9 	.word	0x080041f9
 80040d0:	08004135 	.word	0x08004135
 80040d4:	080041f9 	.word	0x080041f9
 80040d8:	080041f9 	.word	0x080041f9
 80040dc:	080041f9 	.word	0x080041f9
 80040e0:	08004177 	.word	0x08004177
 80040e4:	080041f9 	.word	0x080041f9
 80040e8:	080041f9 	.word	0x080041f9
 80040ec:	080041f9 	.word	0x080041f9
 80040f0:	080041b7 	.word	0x080041b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f908 	bl	8004310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0208 	orr.w	r2, r2, #8
 800410e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0204 	bic.w	r2, r2, #4
 800411e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6999      	ldr	r1, [r3, #24]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	619a      	str	r2, [r3, #24]
      break;
 8004132:	e064      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f94e 	bl	80043dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	619a      	str	r2, [r3, #24]
      break;
 8004174:	e043      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f999 	bl	80044b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0208 	orr.w	r2, r2, #8
 8004190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0204 	bic.w	r2, r2, #4
 80041a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69d9      	ldr	r1, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	61da      	str	r2, [r3, #28]
      break;
 80041b4:	e023      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f9e3 	bl	8004588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69d9      	ldr	r1, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	021a      	lsls	r2, r3, #8
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	61da      	str	r2, [r3, #28]
      break;
 80041f6:	e002      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
      break;
 80041fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004206:	7dfb      	ldrb	r3, [r7, #23]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a34      	ldr	r2, [pc, #208]	; (80042f4 <TIM_Base_SetConfig+0xe4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00f      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d00b      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a31      	ldr	r2, [pc, #196]	; (80042f8 <TIM_Base_SetConfig+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a30      	ldr	r2, [pc, #192]	; (80042fc <TIM_Base_SetConfig+0xec>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <TIM_Base_SetConfig+0xf0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <TIM_Base_SetConfig+0xe4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01b      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d017      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <TIM_Base_SetConfig+0xe8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a21      	ldr	r2, [pc, #132]	; (80042fc <TIM_Base_SetConfig+0xec>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00f      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a20      	ldr	r2, [pc, #128]	; (8004300 <TIM_Base_SetConfig+0xf0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00b      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <TIM_Base_SetConfig+0xf4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <TIM_Base_SetConfig+0xf8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1d      	ldr	r2, [pc, #116]	; (800430c <TIM_Base_SetConfig+0xfc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <TIM_Base_SetConfig+0xe4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d103      	bne.n	80042e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	615a      	str	r2, [r3, #20]
}
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40000800 	.word	0x40000800
 8004300:	40000c00 	.word	0x40000c00
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f023 0201 	bic.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0303 	bic.w	r3, r3, #3
 8004346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 0302 	bic.w	r3, r3, #2
 8004358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <TIM_OC1_SetConfig+0xc8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d10c      	bne.n	8004386 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 0308 	bic.w	r3, r3, #8
 8004372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 0304 	bic.w	r3, r3, #4
 8004384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <TIM_OC1_SetConfig+0xc8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d111      	bne.n	80043b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800439c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	40010000 	.word	0x40010000

080043dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0210 	bic.w	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0320 	bic.w	r3, r3, #32
 8004426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <TIM_OC2_SetConfig+0xd4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d10d      	bne.n	8004458 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004456:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <TIM_OC2_SetConfig+0xd4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d113      	bne.n	8004488 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800446e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000

080044b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <TIM_OC3_SetConfig+0xd0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10d      	bne.n	800452e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800452c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <TIM_OC3_SetConfig+0xd0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d113      	bne.n	800455e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	40010000 	.word	0x40010000

08004588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	031b      	lsls	r3, r3, #12
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a10      	ldr	r2, [pc, #64]	; (8004624 <TIM_OC4_SetConfig+0x9c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d109      	bne.n	80045fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40010000 	.word	0x40010000

08004628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2201      	movs	r2, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1a      	ldr	r2, [r3, #32]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	43db      	mvns	r3, r3
 800464a:	401a      	ands	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1a      	ldr	r2, [r3, #32]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	fa01 f303 	lsl.w	r3, r1, r3
 8004660:	431a      	orrs	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004688:	2302      	movs	r3, #2
 800468a:	e050      	b.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1c      	ldr	r2, [pc, #112]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d013      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a16      	ldr	r2, [pc, #88]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10c      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4313      	orrs	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40014000 	.word	0x40014000

08004750 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004768:	2302      	movs	r3, #2
 800476a:	e03d      	b.n	80047e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e03f      	b.n	8004886 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc ffd0 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2224      	movs	r2, #36	; 0x24
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fde9 	bl	8005410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800484c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800485c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800486c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b08a      	sub	sp, #40	; 0x28
 8004892:	af02      	add	r7, sp, #8
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d17c      	bne.n	80049a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_UART_Transmit+0x2c>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e075      	b.n	80049aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_UART_Transmit+0x3e>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e06e      	b.n	80049aa <HAL_UART_Transmit+0x11c>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2221      	movs	r2, #33	; 0x21
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048e2:	f7fd f8e9 	bl	8001ab8 <HAL_GetTick>
 80048e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fc:	d108      	bne.n	8004910 <HAL_UART_Transmit+0x82>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	e003      	b.n	8004918 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004920:	e02a      	b.n	8004978 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	2180      	movs	r1, #128	; 0x80
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fb29 	bl	8004f84 <UART_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e036      	b.n	80049aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004950:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	3302      	adds	r3, #2
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e007      	b.n	800496a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	3301      	adds	r3, #1
 8004968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1cf      	bne.n	8004922 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	2140      	movs	r1, #64	; 0x40
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 faf9 	bl	8004f84 <UART_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e006      	b.n	80049aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e000      	b.n	80049aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
  }
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	4613      	mov	r3, r2
 80049be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d11d      	bne.n	8004a08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_UART_Receive_IT+0x26>
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e016      	b.n	8004a0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Receive_IT+0x38>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e00f      	b.n	8004a0a <HAL_UART_Receive_IT+0x58>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb2e 	bl	8005060 <UART_Start_Receive_IT>
 8004a04:	4603      	mov	r3, r0
 8004a06:	e000      	b.n	8004a0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b0ba      	sub	sp, #232	; 0xe8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_UART_IRQHandler+0x66>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fc11 	bl	800529a <UART_Receive_IT>
      return;
 8004a78:	e256      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80de 	beq.w	8004c40 <HAL_UART_IRQHandler+0x22c>
 8004a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d106      	bne.n	8004a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80d1 	beq.w	8004c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_UART_IRQHandler+0xae>
 8004aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xd2>
 8004ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f043 0202 	orr.w	r2, r3, #2
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_UART_IRQHandler+0xf6>
 8004af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0204 	orr.w	r2, r3, #4
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d011      	beq.n	8004b3a <HAL_UART_IRQHandler+0x126>
 8004b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f043 0208 	orr.w	r2, r3, #8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 81ed 	beq.w	8004f1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_UART_IRQHandler+0x14e>
 8004b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fb9c 	bl	800529a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <HAL_UART_IRQHandler+0x17a>
 8004b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d04f      	beq.n	8004c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 faa4 	bl	80050dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d141      	bne.n	8004c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3314      	adds	r3, #20
 8004ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1d9      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d013      	beq.n	8004c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	4a7d      	ldr	r2, [pc, #500]	; (8004df0 <HAL_UART_IRQHandler+0x3dc>)
 8004bfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd f909 	bl	8001e1a <HAL_DMA_Abort_IT>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d016      	beq.n	8004c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	e00e      	b.n	8004c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f99a 	bl	8004f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	e00a      	b.n	8004c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f996 	bl	8004f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2c:	e006      	b.n	8004c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f992 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c3a:	e170      	b.n	8004f1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	bf00      	nop
    return;
 8004c3e:	e16e      	b.n	8004f1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	f040 814a 	bne.w	8004ede <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8143 	beq.w	8004ede <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 813c 	beq.w	8004ede <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c66:	2300      	movs	r3, #0
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	f040 80b4 	bne.w	8004df4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8140 	beq.w	8004f22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004caa:	429a      	cmp	r2, r3
 8004cac:	f080 8139 	bcs.w	8004f22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc2:	f000 8088 	beq.w	8004dd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1d9      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3314      	adds	r3, #20
 8004d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e1      	bne.n	8004d12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e3      	bne.n	8004d4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da6:	f023 0310 	bic.w	r3, r3, #16
 8004daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004db8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e3      	bne.n	8004d94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fc ffb2 	bl	8001d3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8c0 	bl	8004f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dec:	e099      	b.n	8004f22 <HAL_UART_IRQHandler+0x50e>
 8004dee:	bf00      	nop
 8004df0:	080051a3 	.word	0x080051a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 808b 	beq.w	8004f26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8086 	beq.w	8004f26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e3      	bne.n	8004e1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	623b      	str	r3, [r7, #32]
   return(result);
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e76:	633a      	str	r2, [r7, #48]	; 0x30
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e3      	bne.n	8004e52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0310 	bic.w	r3, r3, #16
 8004eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ebc:	61fa      	str	r2, [r7, #28]
 8004ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e3      	bne.n	8004e98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f848 	bl	8004f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004edc:	e023      	b.n	8004f26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_UART_IRQHandler+0x4ea>
 8004eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f967 	bl	80051ca <UART_Transmit_IT>
    return;
 8004efc:	e014      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00e      	beq.n	8004f28 <HAL_UART_IRQHandler+0x514>
 8004f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9a7 	bl	800526a <UART_EndTransmit_IT>
    return;
 8004f1c:	e004      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
    return;
 8004f1e:	bf00      	nop
 8004f20:	e002      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
      return;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
      return;
 8004f26:	bf00      	nop
  }
}
 8004f28:	37e8      	adds	r7, #232	; 0xe8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop

08004f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b090      	sub	sp, #64	; 0x40
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f94:	e050      	b.n	8005038 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9c:	d04c      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa4:	f7fc fd88 	bl	8001ab8 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d241      	bcs.n	8005038 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd4:	637a      	str	r2, [r7, #52]	; 0x34
 8004fd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e5      	bne.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3314      	adds	r3, #20
 8004fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3314      	adds	r3, #20
 8005006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005008:	623a      	str	r2, [r7, #32]
 800500a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	69f9      	ldr	r1, [r7, #28]
 800500e:	6a3a      	ldr	r2, [r7, #32]
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	61bb      	str	r3, [r7, #24]
   return(result);
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e5      	bne.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e00f      	b.n	8005058 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	429a      	cmp	r2, r3
 8005054:	d09f      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3740      	adds	r7, #64	; 0x40
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2222      	movs	r2, #34	; 0x22
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0220 	orr.w	r2, r2, #32
 80050cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b095      	sub	sp, #84	; 0x54
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005104:	643a      	str	r2, [r7, #64]	; 0x40
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800510a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	61fb      	str	r3, [r7, #28]
   return(result);
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800513e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	2b01      	cmp	r3, #1
 8005152:	d119      	bne.n	8005188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60bb      	str	r3, [r7, #8]
   return(result);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f023 0310 	bic.w	r3, r3, #16
 800516a:	647b      	str	r3, [r7, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005174:	61ba      	str	r2, [r7, #24]
 8005176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	613b      	str	r3, [r7, #16]
   return(result);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005196:	bf00      	nop
 8005198:	3754      	adds	r7, #84	; 0x54
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fecb 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b21      	cmp	r3, #33	; 0x21
 80051dc:	d13e      	bne.n	800525c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	d114      	bne.n	8005212 <UART_Transmit_IT+0x48>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d110      	bne.n	8005212 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005204:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	1c9a      	adds	r2, r3, #2
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]
 8005210:	e008      	b.n	8005224 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6211      	str	r1, [r2, #32]
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29b      	uxth	r3, r3
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4619      	mov	r1, r3
 8005232:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10f      	bne.n	8005258 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005246:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005256:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	e000      	b.n	800525e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
  }
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005280:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff fe50 	bl	8004f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b08c      	sub	sp, #48	; 0x30
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b22      	cmp	r3, #34	; 0x22
 80052ac:	f040 80ab 	bne.w	8005406 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b8:	d117      	bne.n	80052ea <UART_Receive_IT+0x50>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d113      	bne.n	80052ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d8:	b29a      	uxth	r2, r3
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	1c9a      	adds	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
 80052e8:	e026      	b.n	8005338 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fc:	d007      	beq.n	800530e <UART_Receive_IT+0x74>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <UART_Receive_IT+0x82>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	b2da      	uxtb	r2, r3
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e008      	b.n	800532e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005328:	b2da      	uxtb	r2, r3
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29b      	uxth	r3, r3
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4619      	mov	r1, r3
 8005346:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005348:	2b00      	cmp	r3, #0
 800534a:	d15a      	bne.n	8005402 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0220 	bic.w	r2, r2, #32
 800535a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800536a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695a      	ldr	r2, [r3, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	2b01      	cmp	r3, #1
 800538a:	d135      	bne.n	80053f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	613b      	str	r3, [r7, #16]
   return(result);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	623a      	str	r2, [r7, #32]
 80053b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	69f9      	ldr	r1, [r7, #28]
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	61bb      	str	r3, [r7, #24]
   return(result);
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d10a      	bne.n	80053ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fdbb 	bl	8004f6c <HAL_UARTEx_RxEventCallback>
 80053f6:	e002      	b.n	80053fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fda3 	bl	8004f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e002      	b.n	8005408 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e000      	b.n	8005408 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005406:	2302      	movs	r3, #2
  }
}
 8005408:	4618      	mov	r0, r3
 800540a:	3730      	adds	r7, #48	; 0x30
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005414:	b0c0      	sub	sp, #256	; 0x100
 8005416:	af00      	add	r7, sp, #0
 8005418:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542c:	68d9      	ldr	r1, [r3, #12]
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	ea40 0301 	orr.w	r3, r0, r1
 8005438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	431a      	orrs	r2, r3
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	431a      	orrs	r2, r3
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005468:	f021 010c 	bic.w	r1, r1, #12
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005476:	430b      	orrs	r3, r1
 8005478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548a:	6999      	ldr	r1, [r3, #24]
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	ea40 0301 	orr.w	r3, r0, r1
 8005496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b8f      	ldr	r3, [pc, #572]	; (80056dc <UART_SetConfig+0x2cc>)
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d005      	beq.n	80054b0 <UART_SetConfig+0xa0>
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b8d      	ldr	r3, [pc, #564]	; (80056e0 <UART_SetConfig+0x2d0>)
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d104      	bne.n	80054ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b0:	f7fe fba4 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 80054b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054b8:	e003      	b.n	80054c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ba:	f7fe fb8b 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 80054be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054cc:	f040 810c 	bne.w	80056e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054e2:	4622      	mov	r2, r4
 80054e4:	462b      	mov	r3, r5
 80054e6:	1891      	adds	r1, r2, r2
 80054e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80054ea:	415b      	adcs	r3, r3
 80054ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054f2:	4621      	mov	r1, r4
 80054f4:	eb12 0801 	adds.w	r8, r2, r1
 80054f8:	4629      	mov	r1, r5
 80054fa:	eb43 0901 	adc.w	r9, r3, r1
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800550a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800550e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005512:	4690      	mov	r8, r2
 8005514:	4699      	mov	r9, r3
 8005516:	4623      	mov	r3, r4
 8005518:	eb18 0303 	adds.w	r3, r8, r3
 800551c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005520:	462b      	mov	r3, r5
 8005522:	eb49 0303 	adc.w	r3, r9, r3
 8005526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005536:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800553a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800553e:	460b      	mov	r3, r1
 8005540:	18db      	adds	r3, r3, r3
 8005542:	653b      	str	r3, [r7, #80]	; 0x50
 8005544:	4613      	mov	r3, r2
 8005546:	eb42 0303 	adc.w	r3, r2, r3
 800554a:	657b      	str	r3, [r7, #84]	; 0x54
 800554c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005554:	f7fa fe94 	bl	8000280 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4b61      	ldr	r3, [pc, #388]	; (80056e4 <UART_SetConfig+0x2d4>)
 800555e:	fba3 2302 	umull	r2, r3, r3, r2
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	011c      	lsls	r4, r3, #4
 8005566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005570:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	1891      	adds	r1, r2, r2
 800557e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005580:	415b      	adcs	r3, r3
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005588:	4641      	mov	r1, r8
 800558a:	eb12 0a01 	adds.w	sl, r2, r1
 800558e:	4649      	mov	r1, r9
 8005590:	eb43 0b01 	adc.w	fp, r3, r1
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a8:	4692      	mov	sl, r2
 80055aa:	469b      	mov	fp, r3
 80055ac:	4643      	mov	r3, r8
 80055ae:	eb1a 0303 	adds.w	r3, sl, r3
 80055b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055b6:	464b      	mov	r3, r9
 80055b8:	eb4b 0303 	adc.w	r3, fp, r3
 80055bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055d4:	460b      	mov	r3, r1
 80055d6:	18db      	adds	r3, r3, r3
 80055d8:	643b      	str	r3, [r7, #64]	; 0x40
 80055da:	4613      	mov	r3, r2
 80055dc:	eb42 0303 	adc.w	r3, r2, r3
 80055e0:	647b      	str	r3, [r7, #68]	; 0x44
 80055e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055ea:	f7fa fe49 	bl	8000280 <__aeabi_uldivmod>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <UART_SetConfig+0x2d4>)
 80055f6:	fba3 2301 	umull	r2, r3, r3, r1
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2264      	movs	r2, #100	; 0x64
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	1acb      	subs	r3, r1, r3
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800560a:	4b36      	ldr	r3, [pc, #216]	; (80056e4 <UART_SetConfig+0x2d4>)
 800560c:	fba3 2302 	umull	r2, r3, r3, r2
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005618:	441c      	add	r4, r3
 800561a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561e:	2200      	movs	r2, #0
 8005620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005624:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800562c:	4642      	mov	r2, r8
 800562e:	464b      	mov	r3, r9
 8005630:	1891      	adds	r1, r2, r2
 8005632:	63b9      	str	r1, [r7, #56]	; 0x38
 8005634:	415b      	adcs	r3, r3
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800563c:	4641      	mov	r1, r8
 800563e:	1851      	adds	r1, r2, r1
 8005640:	6339      	str	r1, [r7, #48]	; 0x30
 8005642:	4649      	mov	r1, r9
 8005644:	414b      	adcs	r3, r1
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005654:	4659      	mov	r1, fp
 8005656:	00cb      	lsls	r3, r1, #3
 8005658:	4651      	mov	r1, sl
 800565a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800565e:	4651      	mov	r1, sl
 8005660:	00ca      	lsls	r2, r1, #3
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	4603      	mov	r3, r0
 8005668:	4642      	mov	r2, r8
 800566a:	189b      	adds	r3, r3, r2
 800566c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005670:	464b      	mov	r3, r9
 8005672:	460a      	mov	r2, r1
 8005674:	eb42 0303 	adc.w	r3, r2, r3
 8005678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005688:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800568c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005690:	460b      	mov	r3, r1
 8005692:	18db      	adds	r3, r3, r3
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
 8005696:	4613      	mov	r3, r2
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800569e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056a6:	f7fa fdeb 	bl	8000280 <__aeabi_uldivmod>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <UART_SetConfig+0x2d4>)
 80056b0:	fba3 1302 	umull	r1, r3, r3, r2
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	2164      	movs	r1, #100	; 0x64
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	3332      	adds	r3, #50	; 0x32
 80056c2:	4a08      	ldr	r2, [pc, #32]	; (80056e4 <UART_SetConfig+0x2d4>)
 80056c4:	fba2 2303 	umull	r2, r3, r2, r3
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	f003 0207 	and.w	r2, r3, #7
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4422      	add	r2, r4
 80056d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056d8:	e105      	b.n	80058e6 <UART_SetConfig+0x4d6>
 80056da:	bf00      	nop
 80056dc:	40011000 	.word	0x40011000
 80056e0:	40011400 	.word	0x40011400
 80056e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056fa:	4642      	mov	r2, r8
 80056fc:	464b      	mov	r3, r9
 80056fe:	1891      	adds	r1, r2, r2
 8005700:	6239      	str	r1, [r7, #32]
 8005702:	415b      	adcs	r3, r3
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800570a:	4641      	mov	r1, r8
 800570c:	1854      	adds	r4, r2, r1
 800570e:	4649      	mov	r1, r9
 8005710:	eb43 0501 	adc.w	r5, r3, r1
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	00eb      	lsls	r3, r5, #3
 800571e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005722:	00e2      	lsls	r2, r4, #3
 8005724:	4614      	mov	r4, r2
 8005726:	461d      	mov	r5, r3
 8005728:	4643      	mov	r3, r8
 800572a:	18e3      	adds	r3, r4, r3
 800572c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005730:	464b      	mov	r3, r9
 8005732:	eb45 0303 	adc.w	r3, r5, r3
 8005736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005746:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005756:	4629      	mov	r1, r5
 8005758:	008b      	lsls	r3, r1, #2
 800575a:	4621      	mov	r1, r4
 800575c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005760:	4621      	mov	r1, r4
 8005762:	008a      	lsls	r2, r1, #2
 8005764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005768:	f7fa fd8a 	bl	8000280 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4b60      	ldr	r3, [pc, #384]	; (80058f4 <UART_SetConfig+0x4e4>)
 8005772:	fba3 2302 	umull	r2, r3, r3, r2
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	011c      	lsls	r4, r3, #4
 800577a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800577e:	2200      	movs	r2, #0
 8005780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005784:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	1891      	adds	r1, r2, r2
 8005792:	61b9      	str	r1, [r7, #24]
 8005794:	415b      	adcs	r3, r3
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800579c:	4641      	mov	r1, r8
 800579e:	1851      	adds	r1, r2, r1
 80057a0:	6139      	str	r1, [r7, #16]
 80057a2:	4649      	mov	r1, r9
 80057a4:	414b      	adcs	r3, r1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057b4:	4659      	mov	r1, fp
 80057b6:	00cb      	lsls	r3, r1, #3
 80057b8:	4651      	mov	r1, sl
 80057ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057be:	4651      	mov	r1, sl
 80057c0:	00ca      	lsls	r2, r1, #3
 80057c2:	4610      	mov	r0, r2
 80057c4:	4619      	mov	r1, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	4642      	mov	r2, r8
 80057ca:	189b      	adds	r3, r3, r2
 80057cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057d0:	464b      	mov	r3, r9
 80057d2:	460a      	mov	r2, r1
 80057d4:	eb42 0303 	adc.w	r3, r2, r3
 80057d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80057e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057f4:	4649      	mov	r1, r9
 80057f6:	008b      	lsls	r3, r1, #2
 80057f8:	4641      	mov	r1, r8
 80057fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057fe:	4641      	mov	r1, r8
 8005800:	008a      	lsls	r2, r1, #2
 8005802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005806:	f7fa fd3b 	bl	8000280 <__aeabi_uldivmod>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <UART_SetConfig+0x4e4>)
 8005810:	fba3 1302 	umull	r1, r3, r3, r2
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	2164      	movs	r1, #100	; 0x64
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	3332      	adds	r3, #50	; 0x32
 8005822:	4a34      	ldr	r2, [pc, #208]	; (80058f4 <UART_SetConfig+0x4e4>)
 8005824:	fba2 2303 	umull	r2, r3, r2, r3
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800582e:	441c      	add	r4, r3
 8005830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005834:	2200      	movs	r2, #0
 8005836:	673b      	str	r3, [r7, #112]	; 0x70
 8005838:	677a      	str	r2, [r7, #116]	; 0x74
 800583a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800583e:	4642      	mov	r2, r8
 8005840:	464b      	mov	r3, r9
 8005842:	1891      	adds	r1, r2, r2
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	415b      	adcs	r3, r3
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800584e:	4641      	mov	r1, r8
 8005850:	1851      	adds	r1, r2, r1
 8005852:	6039      	str	r1, [r7, #0]
 8005854:	4649      	mov	r1, r9
 8005856:	414b      	adcs	r3, r1
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005866:	4659      	mov	r1, fp
 8005868:	00cb      	lsls	r3, r1, #3
 800586a:	4651      	mov	r1, sl
 800586c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005870:	4651      	mov	r1, sl
 8005872:	00ca      	lsls	r2, r1, #3
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	4603      	mov	r3, r0
 800587a:	4642      	mov	r2, r8
 800587c:	189b      	adds	r3, r3, r2
 800587e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005880:	464b      	mov	r3, r9
 8005882:	460a      	mov	r2, r1
 8005884:	eb42 0303 	adc.w	r3, r2, r3
 8005888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	663b      	str	r3, [r7, #96]	; 0x60
 8005894:	667a      	str	r2, [r7, #100]	; 0x64
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058a2:	4649      	mov	r1, r9
 80058a4:	008b      	lsls	r3, r1, #2
 80058a6:	4641      	mov	r1, r8
 80058a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ac:	4641      	mov	r1, r8
 80058ae:	008a      	lsls	r2, r1, #2
 80058b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058b4:	f7fa fce4 	bl	8000280 <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <UART_SetConfig+0x4e4>)
 80058be:	fba3 1302 	umull	r1, r3, r3, r2
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	2164      	movs	r1, #100	; 0x64
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	3332      	adds	r3, #50	; 0x32
 80058d0:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <UART_SetConfig+0x4e4>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	f003 020f 	and.w	r2, r3, #15
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4422      	add	r2, r4
 80058e4:	609a      	str	r2, [r3, #8]
}
 80058e6:	bf00      	nop
 80058e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058ec:	46bd      	mov	sp, r7
 80058ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058f2:	bf00      	nop
 80058f4:	51eb851f 	.word	0x51eb851f

080058f8 <__errno>:
 80058f8:	4b01      	ldr	r3, [pc, #4]	; (8005900 <__errno+0x8>)
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000020 	.word	0x20000020

08005904 <__libc_init_array>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	4d0d      	ldr	r5, [pc, #52]	; (800593c <__libc_init_array+0x38>)
 8005908:	4c0d      	ldr	r4, [pc, #52]	; (8005940 <__libc_init_array+0x3c>)
 800590a:	1b64      	subs	r4, r4, r5
 800590c:	10a4      	asrs	r4, r4, #2
 800590e:	2600      	movs	r6, #0
 8005910:	42a6      	cmp	r6, r4
 8005912:	d109      	bne.n	8005928 <__libc_init_array+0x24>
 8005914:	4d0b      	ldr	r5, [pc, #44]	; (8005944 <__libc_init_array+0x40>)
 8005916:	4c0c      	ldr	r4, [pc, #48]	; (8005948 <__libc_init_array+0x44>)
 8005918:	f000 fc8e 	bl	8006238 <_init>
 800591c:	1b64      	subs	r4, r4, r5
 800591e:	10a4      	asrs	r4, r4, #2
 8005920:	2600      	movs	r6, #0
 8005922:	42a6      	cmp	r6, r4
 8005924:	d105      	bne.n	8005932 <__libc_init_array+0x2e>
 8005926:	bd70      	pop	{r4, r5, r6, pc}
 8005928:	f855 3b04 	ldr.w	r3, [r5], #4
 800592c:	4798      	blx	r3
 800592e:	3601      	adds	r6, #1
 8005930:	e7ee      	b.n	8005910 <__libc_init_array+0xc>
 8005932:	f855 3b04 	ldr.w	r3, [r5], #4
 8005936:	4798      	blx	r3
 8005938:	3601      	adds	r6, #1
 800593a:	e7f2      	b.n	8005922 <__libc_init_array+0x1e>
 800593c:	08006368 	.word	0x08006368
 8005940:	08006368 	.word	0x08006368
 8005944:	08006368 	.word	0x08006368
 8005948:	0800636c 	.word	0x0800636c

0800594c <memset>:
 800594c:	4402      	add	r2, r0
 800594e:	4603      	mov	r3, r0
 8005950:	4293      	cmp	r3, r2
 8005952:	d100      	bne.n	8005956 <memset+0xa>
 8005954:	4770      	bx	lr
 8005956:	f803 1b01 	strb.w	r1, [r3], #1
 800595a:	e7f9      	b.n	8005950 <memset+0x4>

0800595c <_free_r>:
 800595c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800595e:	2900      	cmp	r1, #0
 8005960:	d044      	beq.n	80059ec <_free_r+0x90>
 8005962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005966:	9001      	str	r0, [sp, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f1a1 0404 	sub.w	r4, r1, #4
 800596e:	bfb8      	it	lt
 8005970:	18e4      	addlt	r4, r4, r3
 8005972:	f000 f905 	bl	8005b80 <__malloc_lock>
 8005976:	4a1e      	ldr	r2, [pc, #120]	; (80059f0 <_free_r+0x94>)
 8005978:	9801      	ldr	r0, [sp, #4]
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	b933      	cbnz	r3, 800598c <_free_r+0x30>
 800597e:	6063      	str	r3, [r4, #4]
 8005980:	6014      	str	r4, [r2, #0]
 8005982:	b003      	add	sp, #12
 8005984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005988:	f000 b900 	b.w	8005b8c <__malloc_unlock>
 800598c:	42a3      	cmp	r3, r4
 800598e:	d908      	bls.n	80059a2 <_free_r+0x46>
 8005990:	6825      	ldr	r5, [r4, #0]
 8005992:	1961      	adds	r1, r4, r5
 8005994:	428b      	cmp	r3, r1
 8005996:	bf01      	itttt	eq
 8005998:	6819      	ldreq	r1, [r3, #0]
 800599a:	685b      	ldreq	r3, [r3, #4]
 800599c:	1949      	addeq	r1, r1, r5
 800599e:	6021      	streq	r1, [r4, #0]
 80059a0:	e7ed      	b.n	800597e <_free_r+0x22>
 80059a2:	461a      	mov	r2, r3
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	b10b      	cbz	r3, 80059ac <_free_r+0x50>
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d9fa      	bls.n	80059a2 <_free_r+0x46>
 80059ac:	6811      	ldr	r1, [r2, #0]
 80059ae:	1855      	adds	r5, r2, r1
 80059b0:	42a5      	cmp	r5, r4
 80059b2:	d10b      	bne.n	80059cc <_free_r+0x70>
 80059b4:	6824      	ldr	r4, [r4, #0]
 80059b6:	4421      	add	r1, r4
 80059b8:	1854      	adds	r4, r2, r1
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	6011      	str	r1, [r2, #0]
 80059be:	d1e0      	bne.n	8005982 <_free_r+0x26>
 80059c0:	681c      	ldr	r4, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	6053      	str	r3, [r2, #4]
 80059c6:	4421      	add	r1, r4
 80059c8:	6011      	str	r1, [r2, #0]
 80059ca:	e7da      	b.n	8005982 <_free_r+0x26>
 80059cc:	d902      	bls.n	80059d4 <_free_r+0x78>
 80059ce:	230c      	movs	r3, #12
 80059d0:	6003      	str	r3, [r0, #0]
 80059d2:	e7d6      	b.n	8005982 <_free_r+0x26>
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	1961      	adds	r1, r4, r5
 80059d8:	428b      	cmp	r3, r1
 80059da:	bf04      	itt	eq
 80059dc:	6819      	ldreq	r1, [r3, #0]
 80059de:	685b      	ldreq	r3, [r3, #4]
 80059e0:	6063      	str	r3, [r4, #4]
 80059e2:	bf04      	itt	eq
 80059e4:	1949      	addeq	r1, r1, r5
 80059e6:	6021      	streq	r1, [r4, #0]
 80059e8:	6054      	str	r4, [r2, #4]
 80059ea:	e7ca      	b.n	8005982 <_free_r+0x26>
 80059ec:	b003      	add	sp, #12
 80059ee:	bd30      	pop	{r4, r5, pc}
 80059f0:	20000318 	.word	0x20000318

080059f4 <sbrk_aligned>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	4e0e      	ldr	r6, [pc, #56]	; (8005a30 <sbrk_aligned+0x3c>)
 80059f8:	460c      	mov	r4, r1
 80059fa:	6831      	ldr	r1, [r6, #0]
 80059fc:	4605      	mov	r5, r0
 80059fe:	b911      	cbnz	r1, 8005a06 <sbrk_aligned+0x12>
 8005a00:	f000 f88c 	bl	8005b1c <_sbrk_r>
 8005a04:	6030      	str	r0, [r6, #0]
 8005a06:	4621      	mov	r1, r4
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f000 f887 	bl	8005b1c <_sbrk_r>
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	d00a      	beq.n	8005a28 <sbrk_aligned+0x34>
 8005a12:	1cc4      	adds	r4, r0, #3
 8005a14:	f024 0403 	bic.w	r4, r4, #3
 8005a18:	42a0      	cmp	r0, r4
 8005a1a:	d007      	beq.n	8005a2c <sbrk_aligned+0x38>
 8005a1c:	1a21      	subs	r1, r4, r0
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 f87c 	bl	8005b1c <_sbrk_r>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d101      	bne.n	8005a2c <sbrk_aligned+0x38>
 8005a28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	2000031c 	.word	0x2000031c

08005a34 <_malloc_r>:
 8005a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a38:	1ccd      	adds	r5, r1, #3
 8005a3a:	f025 0503 	bic.w	r5, r5, #3
 8005a3e:	3508      	adds	r5, #8
 8005a40:	2d0c      	cmp	r5, #12
 8005a42:	bf38      	it	cc
 8005a44:	250c      	movcc	r5, #12
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	4607      	mov	r7, r0
 8005a4a:	db01      	blt.n	8005a50 <_malloc_r+0x1c>
 8005a4c:	42a9      	cmp	r1, r5
 8005a4e:	d905      	bls.n	8005a5c <_malloc_r+0x28>
 8005a50:	230c      	movs	r3, #12
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	2600      	movs	r6, #0
 8005a56:	4630      	mov	r0, r6
 8005a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a5c:	4e2e      	ldr	r6, [pc, #184]	; (8005b18 <_malloc_r+0xe4>)
 8005a5e:	f000 f88f 	bl	8005b80 <__malloc_lock>
 8005a62:	6833      	ldr	r3, [r6, #0]
 8005a64:	461c      	mov	r4, r3
 8005a66:	bb34      	cbnz	r4, 8005ab6 <_malloc_r+0x82>
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	f7ff ffc2 	bl	80059f4 <sbrk_aligned>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	4604      	mov	r4, r0
 8005a74:	d14d      	bne.n	8005b12 <_malloc_r+0xde>
 8005a76:	6834      	ldr	r4, [r6, #0]
 8005a78:	4626      	mov	r6, r4
 8005a7a:	2e00      	cmp	r6, #0
 8005a7c:	d140      	bne.n	8005b00 <_malloc_r+0xcc>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	4631      	mov	r1, r6
 8005a82:	4638      	mov	r0, r7
 8005a84:	eb04 0803 	add.w	r8, r4, r3
 8005a88:	f000 f848 	bl	8005b1c <_sbrk_r>
 8005a8c:	4580      	cmp	r8, r0
 8005a8e:	d13a      	bne.n	8005b06 <_malloc_r+0xd2>
 8005a90:	6821      	ldr	r1, [r4, #0]
 8005a92:	3503      	adds	r5, #3
 8005a94:	1a6d      	subs	r5, r5, r1
 8005a96:	f025 0503 	bic.w	r5, r5, #3
 8005a9a:	3508      	adds	r5, #8
 8005a9c:	2d0c      	cmp	r5, #12
 8005a9e:	bf38      	it	cc
 8005aa0:	250c      	movcc	r5, #12
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f7ff ffa5 	bl	80059f4 <sbrk_aligned>
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d02b      	beq.n	8005b06 <_malloc_r+0xd2>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	442b      	add	r3, r5
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	e00e      	b.n	8005ad4 <_malloc_r+0xa0>
 8005ab6:	6822      	ldr	r2, [r4, #0]
 8005ab8:	1b52      	subs	r2, r2, r5
 8005aba:	d41e      	bmi.n	8005afa <_malloc_r+0xc6>
 8005abc:	2a0b      	cmp	r2, #11
 8005abe:	d916      	bls.n	8005aee <_malloc_r+0xba>
 8005ac0:	1961      	adds	r1, r4, r5
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	6025      	str	r5, [r4, #0]
 8005ac6:	bf18      	it	ne
 8005ac8:	6059      	strne	r1, [r3, #4]
 8005aca:	6863      	ldr	r3, [r4, #4]
 8005acc:	bf08      	it	eq
 8005ace:	6031      	streq	r1, [r6, #0]
 8005ad0:	5162      	str	r2, [r4, r5]
 8005ad2:	604b      	str	r3, [r1, #4]
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	f104 060b 	add.w	r6, r4, #11
 8005ada:	f000 f857 	bl	8005b8c <__malloc_unlock>
 8005ade:	f026 0607 	bic.w	r6, r6, #7
 8005ae2:	1d23      	adds	r3, r4, #4
 8005ae4:	1af2      	subs	r2, r6, r3
 8005ae6:	d0b6      	beq.n	8005a56 <_malloc_r+0x22>
 8005ae8:	1b9b      	subs	r3, r3, r6
 8005aea:	50a3      	str	r3, [r4, r2]
 8005aec:	e7b3      	b.n	8005a56 <_malloc_r+0x22>
 8005aee:	6862      	ldr	r2, [r4, #4]
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	bf0c      	ite	eq
 8005af4:	6032      	streq	r2, [r6, #0]
 8005af6:	605a      	strne	r2, [r3, #4]
 8005af8:	e7ec      	b.n	8005ad4 <_malloc_r+0xa0>
 8005afa:	4623      	mov	r3, r4
 8005afc:	6864      	ldr	r4, [r4, #4]
 8005afe:	e7b2      	b.n	8005a66 <_malloc_r+0x32>
 8005b00:	4634      	mov	r4, r6
 8005b02:	6876      	ldr	r6, [r6, #4]
 8005b04:	e7b9      	b.n	8005a7a <_malloc_r+0x46>
 8005b06:	230c      	movs	r3, #12
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	f000 f83e 	bl	8005b8c <__malloc_unlock>
 8005b10:	e7a1      	b.n	8005a56 <_malloc_r+0x22>
 8005b12:	6025      	str	r5, [r4, #0]
 8005b14:	e7de      	b.n	8005ad4 <_malloc_r+0xa0>
 8005b16:	bf00      	nop
 8005b18:	20000318 	.word	0x20000318

08005b1c <_sbrk_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d06      	ldr	r5, [pc, #24]	; (8005b38 <_sbrk_r+0x1c>)
 8005b20:	2300      	movs	r3, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	602b      	str	r3, [r5, #0]
 8005b28:	f7fb feee 	bl	8001908 <_sbrk>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_sbrk_r+0x1a>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_sbrk_r+0x1a>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20000324 	.word	0x20000324

08005b3c <siprintf>:
 8005b3c:	b40e      	push	{r1, r2, r3}
 8005b3e:	b500      	push	{lr}
 8005b40:	b09c      	sub	sp, #112	; 0x70
 8005b42:	ab1d      	add	r3, sp, #116	; 0x74
 8005b44:	9002      	str	r0, [sp, #8]
 8005b46:	9006      	str	r0, [sp, #24]
 8005b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b4c:	4809      	ldr	r0, [pc, #36]	; (8005b74 <siprintf+0x38>)
 8005b4e:	9107      	str	r1, [sp, #28]
 8005b50:	9104      	str	r1, [sp, #16]
 8005b52:	4909      	ldr	r1, [pc, #36]	; (8005b78 <siprintf+0x3c>)
 8005b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b58:	9105      	str	r1, [sp, #20]
 8005b5a:	6800      	ldr	r0, [r0, #0]
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	a902      	add	r1, sp, #8
 8005b60:	f000 f876 	bl	8005c50 <_svfiprintf_r>
 8005b64:	9b02      	ldr	r3, [sp, #8]
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	b01c      	add	sp, #112	; 0x70
 8005b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b70:	b003      	add	sp, #12
 8005b72:	4770      	bx	lr
 8005b74:	20000020 	.word	0x20000020
 8005b78:	ffff0208 	.word	0xffff0208

08005b7c <__retarget_lock_acquire_recursive>:
 8005b7c:	4770      	bx	lr

08005b7e <__retarget_lock_release_recursive>:
 8005b7e:	4770      	bx	lr

08005b80 <__malloc_lock>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__malloc_lock+0x8>)
 8005b82:	f7ff bffb 	b.w	8005b7c <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	20000320 	.word	0x20000320

08005b8c <__malloc_unlock>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__malloc_unlock+0x8>)
 8005b8e:	f7ff bff6 	b.w	8005b7e <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	20000320 	.word	0x20000320

08005b98 <__ssputs_r>:
 8005b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b9c:	688e      	ldr	r6, [r1, #8]
 8005b9e:	429e      	cmp	r6, r3
 8005ba0:	4682      	mov	sl, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	4690      	mov	r8, r2
 8005ba6:	461f      	mov	r7, r3
 8005ba8:	d838      	bhi.n	8005c1c <__ssputs_r+0x84>
 8005baa:	898a      	ldrh	r2, [r1, #12]
 8005bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bb0:	d032      	beq.n	8005c18 <__ssputs_r+0x80>
 8005bb2:	6825      	ldr	r5, [r4, #0]
 8005bb4:	6909      	ldr	r1, [r1, #16]
 8005bb6:	eba5 0901 	sub.w	r9, r5, r1
 8005bba:	6965      	ldr	r5, [r4, #20]
 8005bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	444b      	add	r3, r9
 8005bc8:	106d      	asrs	r5, r5, #1
 8005bca:	429d      	cmp	r5, r3
 8005bcc:	bf38      	it	cc
 8005bce:	461d      	movcc	r5, r3
 8005bd0:	0553      	lsls	r3, r2, #21
 8005bd2:	d531      	bpl.n	8005c38 <__ssputs_r+0xa0>
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7ff ff2d 	bl	8005a34 <_malloc_r>
 8005bda:	4606      	mov	r6, r0
 8005bdc:	b950      	cbnz	r0, 8005bf4 <__ssputs_r+0x5c>
 8005bde:	230c      	movs	r3, #12
 8005be0:	f8ca 3000 	str.w	r3, [sl]
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf4:	6921      	ldr	r1, [r4, #16]
 8005bf6:	464a      	mov	r2, r9
 8005bf8:	f000 fabe 	bl	8006178 <memcpy>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	6126      	str	r6, [r4, #16]
 8005c0a:	6165      	str	r5, [r4, #20]
 8005c0c:	444e      	add	r6, r9
 8005c0e:	eba5 0509 	sub.w	r5, r5, r9
 8005c12:	6026      	str	r6, [r4, #0]
 8005c14:	60a5      	str	r5, [r4, #8]
 8005c16:	463e      	mov	r6, r7
 8005c18:	42be      	cmp	r6, r7
 8005c1a:	d900      	bls.n	8005c1e <__ssputs_r+0x86>
 8005c1c:	463e      	mov	r6, r7
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	4632      	mov	r2, r6
 8005c22:	4641      	mov	r1, r8
 8005c24:	f000 fab6 	bl	8006194 <memmove>
 8005c28:	68a3      	ldr	r3, [r4, #8]
 8005c2a:	1b9b      	subs	r3, r3, r6
 8005c2c:	60a3      	str	r3, [r4, #8]
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	4433      	add	r3, r6
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	2000      	movs	r0, #0
 8005c36:	e7db      	b.n	8005bf0 <__ssputs_r+0x58>
 8005c38:	462a      	mov	r2, r5
 8005c3a:	f000 fac5 	bl	80061c8 <_realloc_r>
 8005c3e:	4606      	mov	r6, r0
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d1e1      	bne.n	8005c08 <__ssputs_r+0x70>
 8005c44:	6921      	ldr	r1, [r4, #16]
 8005c46:	4650      	mov	r0, sl
 8005c48:	f7ff fe88 	bl	800595c <_free_r>
 8005c4c:	e7c7      	b.n	8005bde <__ssputs_r+0x46>
	...

08005c50 <_svfiprintf_r>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	4698      	mov	r8, r3
 8005c56:	898b      	ldrh	r3, [r1, #12]
 8005c58:	061b      	lsls	r3, r3, #24
 8005c5a:	b09d      	sub	sp, #116	; 0x74
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	460d      	mov	r5, r1
 8005c60:	4614      	mov	r4, r2
 8005c62:	d50e      	bpl.n	8005c82 <_svfiprintf_r+0x32>
 8005c64:	690b      	ldr	r3, [r1, #16]
 8005c66:	b963      	cbnz	r3, 8005c82 <_svfiprintf_r+0x32>
 8005c68:	2140      	movs	r1, #64	; 0x40
 8005c6a:	f7ff fee3 	bl	8005a34 <_malloc_r>
 8005c6e:	6028      	str	r0, [r5, #0]
 8005c70:	6128      	str	r0, [r5, #16]
 8005c72:	b920      	cbnz	r0, 8005c7e <_svfiprintf_r+0x2e>
 8005c74:	230c      	movs	r3, #12
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7c:	e0d1      	b.n	8005e22 <_svfiprintf_r+0x1d2>
 8005c7e:	2340      	movs	r3, #64	; 0x40
 8005c80:	616b      	str	r3, [r5, #20]
 8005c82:	2300      	movs	r3, #0
 8005c84:	9309      	str	r3, [sp, #36]	; 0x24
 8005c86:	2320      	movs	r3, #32
 8005c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c90:	2330      	movs	r3, #48	; 0x30
 8005c92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e3c <_svfiprintf_r+0x1ec>
 8005c96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c9a:	f04f 0901 	mov.w	r9, #1
 8005c9e:	4623      	mov	r3, r4
 8005ca0:	469a      	mov	sl, r3
 8005ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ca6:	b10a      	cbz	r2, 8005cac <_svfiprintf_r+0x5c>
 8005ca8:	2a25      	cmp	r2, #37	; 0x25
 8005caa:	d1f9      	bne.n	8005ca0 <_svfiprintf_r+0x50>
 8005cac:	ebba 0b04 	subs.w	fp, sl, r4
 8005cb0:	d00b      	beq.n	8005cca <_svfiprintf_r+0x7a>
 8005cb2:	465b      	mov	r3, fp
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f7ff ff6d 	bl	8005b98 <__ssputs_r>
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f000 80aa 	beq.w	8005e18 <_svfiprintf_r+0x1c8>
 8005cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cc6:	445a      	add	r2, fp
 8005cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8005cca:	f89a 3000 	ldrb.w	r3, [sl]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80a2 	beq.w	8005e18 <_svfiprintf_r+0x1c8>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cde:	f10a 0a01 	add.w	sl, sl, #1
 8005ce2:	9304      	str	r3, [sp, #16]
 8005ce4:	9307      	str	r3, [sp, #28]
 8005ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cea:	931a      	str	r3, [sp, #104]	; 0x68
 8005cec:	4654      	mov	r4, sl
 8005cee:	2205      	movs	r2, #5
 8005cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf4:	4851      	ldr	r0, [pc, #324]	; (8005e3c <_svfiprintf_r+0x1ec>)
 8005cf6:	f7fa fa73 	bl	80001e0 <memchr>
 8005cfa:	9a04      	ldr	r2, [sp, #16]
 8005cfc:	b9d8      	cbnz	r0, 8005d36 <_svfiprintf_r+0xe6>
 8005cfe:	06d0      	lsls	r0, r2, #27
 8005d00:	bf44      	itt	mi
 8005d02:	2320      	movmi	r3, #32
 8005d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d08:	0711      	lsls	r1, r2, #28
 8005d0a:	bf44      	itt	mi
 8005d0c:	232b      	movmi	r3, #43	; 0x2b
 8005d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d12:	f89a 3000 	ldrb.w	r3, [sl]
 8005d16:	2b2a      	cmp	r3, #42	; 0x2a
 8005d18:	d015      	beq.n	8005d46 <_svfiprintf_r+0xf6>
 8005d1a:	9a07      	ldr	r2, [sp, #28]
 8005d1c:	4654      	mov	r4, sl
 8005d1e:	2000      	movs	r0, #0
 8005d20:	f04f 0c0a 	mov.w	ip, #10
 8005d24:	4621      	mov	r1, r4
 8005d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d2a:	3b30      	subs	r3, #48	; 0x30
 8005d2c:	2b09      	cmp	r3, #9
 8005d2e:	d94e      	bls.n	8005dce <_svfiprintf_r+0x17e>
 8005d30:	b1b0      	cbz	r0, 8005d60 <_svfiprintf_r+0x110>
 8005d32:	9207      	str	r2, [sp, #28]
 8005d34:	e014      	b.n	8005d60 <_svfiprintf_r+0x110>
 8005d36:	eba0 0308 	sub.w	r3, r0, r8
 8005d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	46a2      	mov	sl, r4
 8005d44:	e7d2      	b.n	8005cec <_svfiprintf_r+0x9c>
 8005d46:	9b03      	ldr	r3, [sp, #12]
 8005d48:	1d19      	adds	r1, r3, #4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	9103      	str	r1, [sp, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bfbb      	ittet	lt
 8005d52:	425b      	neglt	r3, r3
 8005d54:	f042 0202 	orrlt.w	r2, r2, #2
 8005d58:	9307      	strge	r3, [sp, #28]
 8005d5a:	9307      	strlt	r3, [sp, #28]
 8005d5c:	bfb8      	it	lt
 8005d5e:	9204      	strlt	r2, [sp, #16]
 8005d60:	7823      	ldrb	r3, [r4, #0]
 8005d62:	2b2e      	cmp	r3, #46	; 0x2e
 8005d64:	d10c      	bne.n	8005d80 <_svfiprintf_r+0x130>
 8005d66:	7863      	ldrb	r3, [r4, #1]
 8005d68:	2b2a      	cmp	r3, #42	; 0x2a
 8005d6a:	d135      	bne.n	8005dd8 <_svfiprintf_r+0x188>
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	9203      	str	r2, [sp, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bfb8      	it	lt
 8005d78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d7c:	3402      	adds	r4, #2
 8005d7e:	9305      	str	r3, [sp, #20]
 8005d80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e4c <_svfiprintf_r+0x1fc>
 8005d84:	7821      	ldrb	r1, [r4, #0]
 8005d86:	2203      	movs	r2, #3
 8005d88:	4650      	mov	r0, sl
 8005d8a:	f7fa fa29 	bl	80001e0 <memchr>
 8005d8e:	b140      	cbz	r0, 8005da2 <_svfiprintf_r+0x152>
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	eba0 000a 	sub.w	r0, r0, sl
 8005d96:	fa03 f000 	lsl.w	r0, r3, r0
 8005d9a:	9b04      	ldr	r3, [sp, #16]
 8005d9c:	4303      	orrs	r3, r0
 8005d9e:	3401      	adds	r4, #1
 8005da0:	9304      	str	r3, [sp, #16]
 8005da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da6:	4826      	ldr	r0, [pc, #152]	; (8005e40 <_svfiprintf_r+0x1f0>)
 8005da8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dac:	2206      	movs	r2, #6
 8005dae:	f7fa fa17 	bl	80001e0 <memchr>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d038      	beq.n	8005e28 <_svfiprintf_r+0x1d8>
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <_svfiprintf_r+0x1f4>)
 8005db8:	bb1b      	cbnz	r3, 8005e02 <_svfiprintf_r+0x1b2>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	3307      	adds	r3, #7
 8005dbe:	f023 0307 	bic.w	r3, r3, #7
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	9303      	str	r3, [sp, #12]
 8005dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc8:	4433      	add	r3, r6
 8005dca:	9309      	str	r3, [sp, #36]	; 0x24
 8005dcc:	e767      	b.n	8005c9e <_svfiprintf_r+0x4e>
 8005dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	e7a5      	b.n	8005d24 <_svfiprintf_r+0xd4>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	3401      	adds	r4, #1
 8005ddc:	9305      	str	r3, [sp, #20]
 8005dde:	4619      	mov	r1, r3
 8005de0:	f04f 0c0a 	mov.w	ip, #10
 8005de4:	4620      	mov	r0, r4
 8005de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dea:	3a30      	subs	r2, #48	; 0x30
 8005dec:	2a09      	cmp	r2, #9
 8005dee:	d903      	bls.n	8005df8 <_svfiprintf_r+0x1a8>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0c5      	beq.n	8005d80 <_svfiprintf_r+0x130>
 8005df4:	9105      	str	r1, [sp, #20]
 8005df6:	e7c3      	b.n	8005d80 <_svfiprintf_r+0x130>
 8005df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e7f0      	b.n	8005de4 <_svfiprintf_r+0x194>
 8005e02:	ab03      	add	r3, sp, #12
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	462a      	mov	r2, r5
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <_svfiprintf_r+0x1f8>)
 8005e0a:	a904      	add	r1, sp, #16
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f3af 8000 	nop.w
 8005e12:	1c42      	adds	r2, r0, #1
 8005e14:	4606      	mov	r6, r0
 8005e16:	d1d6      	bne.n	8005dc6 <_svfiprintf_r+0x176>
 8005e18:	89ab      	ldrh	r3, [r5, #12]
 8005e1a:	065b      	lsls	r3, r3, #25
 8005e1c:	f53f af2c 	bmi.w	8005c78 <_svfiprintf_r+0x28>
 8005e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e22:	b01d      	add	sp, #116	; 0x74
 8005e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e28:	ab03      	add	r3, sp, #12
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	462a      	mov	r2, r5
 8005e2e:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <_svfiprintf_r+0x1f8>)
 8005e30:	a904      	add	r1, sp, #16
 8005e32:	4638      	mov	r0, r7
 8005e34:	f000 f87a 	bl	8005f2c <_printf_i>
 8005e38:	e7eb      	b.n	8005e12 <_svfiprintf_r+0x1c2>
 8005e3a:	bf00      	nop
 8005e3c:	0800632c 	.word	0x0800632c
 8005e40:	08006336 	.word	0x08006336
 8005e44:	00000000 	.word	0x00000000
 8005e48:	08005b99 	.word	0x08005b99
 8005e4c:	08006332 	.word	0x08006332

08005e50 <_printf_common>:
 8005e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	4616      	mov	r6, r2
 8005e56:	4699      	mov	r9, r3
 8005e58:	688a      	ldr	r2, [r1, #8]
 8005e5a:	690b      	ldr	r3, [r1, #16]
 8005e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e60:	4293      	cmp	r3, r2
 8005e62:	bfb8      	it	lt
 8005e64:	4613      	movlt	r3, r2
 8005e66:	6033      	str	r3, [r6, #0]
 8005e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	b10a      	cbz	r2, 8005e76 <_printf_common+0x26>
 8005e72:	3301      	adds	r3, #1
 8005e74:	6033      	str	r3, [r6, #0]
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	0699      	lsls	r1, r3, #26
 8005e7a:	bf42      	ittt	mi
 8005e7c:	6833      	ldrmi	r3, [r6, #0]
 8005e7e:	3302      	addmi	r3, #2
 8005e80:	6033      	strmi	r3, [r6, #0]
 8005e82:	6825      	ldr	r5, [r4, #0]
 8005e84:	f015 0506 	ands.w	r5, r5, #6
 8005e88:	d106      	bne.n	8005e98 <_printf_common+0x48>
 8005e8a:	f104 0a19 	add.w	sl, r4, #25
 8005e8e:	68e3      	ldr	r3, [r4, #12]
 8005e90:	6832      	ldr	r2, [r6, #0]
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	42ab      	cmp	r3, r5
 8005e96:	dc26      	bgt.n	8005ee6 <_printf_common+0x96>
 8005e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e9c:	1e13      	subs	r3, r2, #0
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	bf18      	it	ne
 8005ea2:	2301      	movne	r3, #1
 8005ea4:	0692      	lsls	r2, r2, #26
 8005ea6:	d42b      	bmi.n	8005f00 <_printf_common+0xb0>
 8005ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eac:	4649      	mov	r1, r9
 8005eae:	4638      	mov	r0, r7
 8005eb0:	47c0      	blx	r8
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d01e      	beq.n	8005ef4 <_printf_common+0xa4>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	68e5      	ldr	r5, [r4, #12]
 8005eba:	6832      	ldr	r2, [r6, #0]
 8005ebc:	f003 0306 	and.w	r3, r3, #6
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	bf08      	it	eq
 8005ec4:	1aad      	subeq	r5, r5, r2
 8005ec6:	68a3      	ldr	r3, [r4, #8]
 8005ec8:	6922      	ldr	r2, [r4, #16]
 8005eca:	bf0c      	ite	eq
 8005ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed0:	2500      	movne	r5, #0
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	bfc4      	itt	gt
 8005ed6:	1a9b      	subgt	r3, r3, r2
 8005ed8:	18ed      	addgt	r5, r5, r3
 8005eda:	2600      	movs	r6, #0
 8005edc:	341a      	adds	r4, #26
 8005ede:	42b5      	cmp	r5, r6
 8005ee0:	d11a      	bne.n	8005f18 <_printf_common+0xc8>
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	e008      	b.n	8005ef8 <_printf_common+0xa8>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4652      	mov	r2, sl
 8005eea:	4649      	mov	r1, r9
 8005eec:	4638      	mov	r0, r7
 8005eee:	47c0      	blx	r8
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d103      	bne.n	8005efc <_printf_common+0xac>
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efc:	3501      	adds	r5, #1
 8005efe:	e7c6      	b.n	8005e8e <_printf_common+0x3e>
 8005f00:	18e1      	adds	r1, r4, r3
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	2030      	movs	r0, #48	; 0x30
 8005f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f0a:	4422      	add	r2, r4
 8005f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f14:	3302      	adds	r3, #2
 8005f16:	e7c7      	b.n	8005ea8 <_printf_common+0x58>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	4638      	mov	r0, r7
 8005f20:	47c0      	blx	r8
 8005f22:	3001      	adds	r0, #1
 8005f24:	d0e6      	beq.n	8005ef4 <_printf_common+0xa4>
 8005f26:	3601      	adds	r6, #1
 8005f28:	e7d9      	b.n	8005ede <_printf_common+0x8e>
	...

08005f2c <_printf_i>:
 8005f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f30:	7e0f      	ldrb	r7, [r1, #24]
 8005f32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f34:	2f78      	cmp	r7, #120	; 0x78
 8005f36:	4691      	mov	r9, r2
 8005f38:	4680      	mov	r8, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	469a      	mov	sl, r3
 8005f3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f42:	d807      	bhi.n	8005f54 <_printf_i+0x28>
 8005f44:	2f62      	cmp	r7, #98	; 0x62
 8005f46:	d80a      	bhi.n	8005f5e <_printf_i+0x32>
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	f000 80d8 	beq.w	80060fe <_printf_i+0x1d2>
 8005f4e:	2f58      	cmp	r7, #88	; 0x58
 8005f50:	f000 80a3 	beq.w	800609a <_printf_i+0x16e>
 8005f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f5c:	e03a      	b.n	8005fd4 <_printf_i+0xa8>
 8005f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f62:	2b15      	cmp	r3, #21
 8005f64:	d8f6      	bhi.n	8005f54 <_printf_i+0x28>
 8005f66:	a101      	add	r1, pc, #4	; (adr r1, 8005f6c <_printf_i+0x40>)
 8005f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f6c:	08005fc5 	.word	0x08005fc5
 8005f70:	08005fd9 	.word	0x08005fd9
 8005f74:	08005f55 	.word	0x08005f55
 8005f78:	08005f55 	.word	0x08005f55
 8005f7c:	08005f55 	.word	0x08005f55
 8005f80:	08005f55 	.word	0x08005f55
 8005f84:	08005fd9 	.word	0x08005fd9
 8005f88:	08005f55 	.word	0x08005f55
 8005f8c:	08005f55 	.word	0x08005f55
 8005f90:	08005f55 	.word	0x08005f55
 8005f94:	08005f55 	.word	0x08005f55
 8005f98:	080060e5 	.word	0x080060e5
 8005f9c:	08006009 	.word	0x08006009
 8005fa0:	080060c7 	.word	0x080060c7
 8005fa4:	08005f55 	.word	0x08005f55
 8005fa8:	08005f55 	.word	0x08005f55
 8005fac:	08006107 	.word	0x08006107
 8005fb0:	08005f55 	.word	0x08005f55
 8005fb4:	08006009 	.word	0x08006009
 8005fb8:	08005f55 	.word	0x08005f55
 8005fbc:	08005f55 	.word	0x08005f55
 8005fc0:	080060cf 	.word	0x080060cf
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	1d1a      	adds	r2, r3, #4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	602a      	str	r2, [r5, #0]
 8005fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0a3      	b.n	8006120 <_printf_i+0x1f4>
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	6829      	ldr	r1, [r5, #0]
 8005fdc:	0606      	lsls	r6, r0, #24
 8005fde:	f101 0304 	add.w	r3, r1, #4
 8005fe2:	d50a      	bpl.n	8005ffa <_printf_i+0xce>
 8005fe4:	680e      	ldr	r6, [r1, #0]
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	2e00      	cmp	r6, #0
 8005fea:	da03      	bge.n	8005ff4 <_printf_i+0xc8>
 8005fec:	232d      	movs	r3, #45	; 0x2d
 8005fee:	4276      	negs	r6, r6
 8005ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff4:	485e      	ldr	r0, [pc, #376]	; (8006170 <_printf_i+0x244>)
 8005ff6:	230a      	movs	r3, #10
 8005ff8:	e019      	b.n	800602e <_printf_i+0x102>
 8005ffa:	680e      	ldr	r6, [r1, #0]
 8005ffc:	602b      	str	r3, [r5, #0]
 8005ffe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006002:	bf18      	it	ne
 8006004:	b236      	sxthne	r6, r6
 8006006:	e7ef      	b.n	8005fe8 <_printf_i+0xbc>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	6820      	ldr	r0, [r4, #0]
 800600c:	1d19      	adds	r1, r3, #4
 800600e:	6029      	str	r1, [r5, #0]
 8006010:	0601      	lsls	r1, r0, #24
 8006012:	d501      	bpl.n	8006018 <_printf_i+0xec>
 8006014:	681e      	ldr	r6, [r3, #0]
 8006016:	e002      	b.n	800601e <_printf_i+0xf2>
 8006018:	0646      	lsls	r6, r0, #25
 800601a:	d5fb      	bpl.n	8006014 <_printf_i+0xe8>
 800601c:	881e      	ldrh	r6, [r3, #0]
 800601e:	4854      	ldr	r0, [pc, #336]	; (8006170 <_printf_i+0x244>)
 8006020:	2f6f      	cmp	r7, #111	; 0x6f
 8006022:	bf0c      	ite	eq
 8006024:	2308      	moveq	r3, #8
 8006026:	230a      	movne	r3, #10
 8006028:	2100      	movs	r1, #0
 800602a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800602e:	6865      	ldr	r5, [r4, #4]
 8006030:	60a5      	str	r5, [r4, #8]
 8006032:	2d00      	cmp	r5, #0
 8006034:	bfa2      	ittt	ge
 8006036:	6821      	ldrge	r1, [r4, #0]
 8006038:	f021 0104 	bicge.w	r1, r1, #4
 800603c:	6021      	strge	r1, [r4, #0]
 800603e:	b90e      	cbnz	r6, 8006044 <_printf_i+0x118>
 8006040:	2d00      	cmp	r5, #0
 8006042:	d04d      	beq.n	80060e0 <_printf_i+0x1b4>
 8006044:	4615      	mov	r5, r2
 8006046:	fbb6 f1f3 	udiv	r1, r6, r3
 800604a:	fb03 6711 	mls	r7, r3, r1, r6
 800604e:	5dc7      	ldrb	r7, [r0, r7]
 8006050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006054:	4637      	mov	r7, r6
 8006056:	42bb      	cmp	r3, r7
 8006058:	460e      	mov	r6, r1
 800605a:	d9f4      	bls.n	8006046 <_printf_i+0x11a>
 800605c:	2b08      	cmp	r3, #8
 800605e:	d10b      	bne.n	8006078 <_printf_i+0x14c>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	07de      	lsls	r6, r3, #31
 8006064:	d508      	bpl.n	8006078 <_printf_i+0x14c>
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	6861      	ldr	r1, [r4, #4]
 800606a:	4299      	cmp	r1, r3
 800606c:	bfde      	ittt	le
 800606e:	2330      	movle	r3, #48	; 0x30
 8006070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006074:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006078:	1b52      	subs	r2, r2, r5
 800607a:	6122      	str	r2, [r4, #16]
 800607c:	f8cd a000 	str.w	sl, [sp]
 8006080:	464b      	mov	r3, r9
 8006082:	aa03      	add	r2, sp, #12
 8006084:	4621      	mov	r1, r4
 8006086:	4640      	mov	r0, r8
 8006088:	f7ff fee2 	bl	8005e50 <_printf_common>
 800608c:	3001      	adds	r0, #1
 800608e:	d14c      	bne.n	800612a <_printf_i+0x1fe>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006094:	b004      	add	sp, #16
 8006096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609a:	4835      	ldr	r0, [pc, #212]	; (8006170 <_printf_i+0x244>)
 800609c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060a0:	6829      	ldr	r1, [r5, #0]
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060a8:	6029      	str	r1, [r5, #0]
 80060aa:	061d      	lsls	r5, r3, #24
 80060ac:	d514      	bpl.n	80060d8 <_printf_i+0x1ac>
 80060ae:	07df      	lsls	r7, r3, #31
 80060b0:	bf44      	itt	mi
 80060b2:	f043 0320 	orrmi.w	r3, r3, #32
 80060b6:	6023      	strmi	r3, [r4, #0]
 80060b8:	b91e      	cbnz	r6, 80060c2 <_printf_i+0x196>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	f023 0320 	bic.w	r3, r3, #32
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	2310      	movs	r3, #16
 80060c4:	e7b0      	b.n	8006028 <_printf_i+0xfc>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	f043 0320 	orr.w	r3, r3, #32
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	2378      	movs	r3, #120	; 0x78
 80060d0:	4828      	ldr	r0, [pc, #160]	; (8006174 <_printf_i+0x248>)
 80060d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060d6:	e7e3      	b.n	80060a0 <_printf_i+0x174>
 80060d8:	0659      	lsls	r1, r3, #25
 80060da:	bf48      	it	mi
 80060dc:	b2b6      	uxthmi	r6, r6
 80060de:	e7e6      	b.n	80060ae <_printf_i+0x182>
 80060e0:	4615      	mov	r5, r2
 80060e2:	e7bb      	b.n	800605c <_printf_i+0x130>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	6826      	ldr	r6, [r4, #0]
 80060e8:	6961      	ldr	r1, [r4, #20]
 80060ea:	1d18      	adds	r0, r3, #4
 80060ec:	6028      	str	r0, [r5, #0]
 80060ee:	0635      	lsls	r5, r6, #24
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	d501      	bpl.n	80060f8 <_printf_i+0x1cc>
 80060f4:	6019      	str	r1, [r3, #0]
 80060f6:	e002      	b.n	80060fe <_printf_i+0x1d2>
 80060f8:	0670      	lsls	r0, r6, #25
 80060fa:	d5fb      	bpl.n	80060f4 <_printf_i+0x1c8>
 80060fc:	8019      	strh	r1, [r3, #0]
 80060fe:	2300      	movs	r3, #0
 8006100:	6123      	str	r3, [r4, #16]
 8006102:	4615      	mov	r5, r2
 8006104:	e7ba      	b.n	800607c <_printf_i+0x150>
 8006106:	682b      	ldr	r3, [r5, #0]
 8006108:	1d1a      	adds	r2, r3, #4
 800610a:	602a      	str	r2, [r5, #0]
 800610c:	681d      	ldr	r5, [r3, #0]
 800610e:	6862      	ldr	r2, [r4, #4]
 8006110:	2100      	movs	r1, #0
 8006112:	4628      	mov	r0, r5
 8006114:	f7fa f864 	bl	80001e0 <memchr>
 8006118:	b108      	cbz	r0, 800611e <_printf_i+0x1f2>
 800611a:	1b40      	subs	r0, r0, r5
 800611c:	6060      	str	r0, [r4, #4]
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	2300      	movs	r3, #0
 8006124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006128:	e7a8      	b.n	800607c <_printf_i+0x150>
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	462a      	mov	r2, r5
 800612e:	4649      	mov	r1, r9
 8006130:	4640      	mov	r0, r8
 8006132:	47d0      	blx	sl
 8006134:	3001      	adds	r0, #1
 8006136:	d0ab      	beq.n	8006090 <_printf_i+0x164>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	079b      	lsls	r3, r3, #30
 800613c:	d413      	bmi.n	8006166 <_printf_i+0x23a>
 800613e:	68e0      	ldr	r0, [r4, #12]
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	4298      	cmp	r0, r3
 8006144:	bfb8      	it	lt
 8006146:	4618      	movlt	r0, r3
 8006148:	e7a4      	b.n	8006094 <_printf_i+0x168>
 800614a:	2301      	movs	r3, #1
 800614c:	4632      	mov	r2, r6
 800614e:	4649      	mov	r1, r9
 8006150:	4640      	mov	r0, r8
 8006152:	47d0      	blx	sl
 8006154:	3001      	adds	r0, #1
 8006156:	d09b      	beq.n	8006090 <_printf_i+0x164>
 8006158:	3501      	adds	r5, #1
 800615a:	68e3      	ldr	r3, [r4, #12]
 800615c:	9903      	ldr	r1, [sp, #12]
 800615e:	1a5b      	subs	r3, r3, r1
 8006160:	42ab      	cmp	r3, r5
 8006162:	dcf2      	bgt.n	800614a <_printf_i+0x21e>
 8006164:	e7eb      	b.n	800613e <_printf_i+0x212>
 8006166:	2500      	movs	r5, #0
 8006168:	f104 0619 	add.w	r6, r4, #25
 800616c:	e7f5      	b.n	800615a <_printf_i+0x22e>
 800616e:	bf00      	nop
 8006170:	0800633d 	.word	0x0800633d
 8006174:	0800634e 	.word	0x0800634e

08006178 <memcpy>:
 8006178:	440a      	add	r2, r1
 800617a:	4291      	cmp	r1, r2
 800617c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006180:	d100      	bne.n	8006184 <memcpy+0xc>
 8006182:	4770      	bx	lr
 8006184:	b510      	push	{r4, lr}
 8006186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800618a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800618e:	4291      	cmp	r1, r2
 8006190:	d1f9      	bne.n	8006186 <memcpy+0xe>
 8006192:	bd10      	pop	{r4, pc}

08006194 <memmove>:
 8006194:	4288      	cmp	r0, r1
 8006196:	b510      	push	{r4, lr}
 8006198:	eb01 0402 	add.w	r4, r1, r2
 800619c:	d902      	bls.n	80061a4 <memmove+0x10>
 800619e:	4284      	cmp	r4, r0
 80061a0:	4623      	mov	r3, r4
 80061a2:	d807      	bhi.n	80061b4 <memmove+0x20>
 80061a4:	1e43      	subs	r3, r0, #1
 80061a6:	42a1      	cmp	r1, r4
 80061a8:	d008      	beq.n	80061bc <memmove+0x28>
 80061aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061b2:	e7f8      	b.n	80061a6 <memmove+0x12>
 80061b4:	4402      	add	r2, r0
 80061b6:	4601      	mov	r1, r0
 80061b8:	428a      	cmp	r2, r1
 80061ba:	d100      	bne.n	80061be <memmove+0x2a>
 80061bc:	bd10      	pop	{r4, pc}
 80061be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061c6:	e7f7      	b.n	80061b8 <memmove+0x24>

080061c8 <_realloc_r>:
 80061c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061cc:	4680      	mov	r8, r0
 80061ce:	4614      	mov	r4, r2
 80061d0:	460e      	mov	r6, r1
 80061d2:	b921      	cbnz	r1, 80061de <_realloc_r+0x16>
 80061d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061d8:	4611      	mov	r1, r2
 80061da:	f7ff bc2b 	b.w	8005a34 <_malloc_r>
 80061de:	b92a      	cbnz	r2, 80061ec <_realloc_r+0x24>
 80061e0:	f7ff fbbc 	bl	800595c <_free_r>
 80061e4:	4625      	mov	r5, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ec:	f000 f81b 	bl	8006226 <_malloc_usable_size_r>
 80061f0:	4284      	cmp	r4, r0
 80061f2:	4607      	mov	r7, r0
 80061f4:	d802      	bhi.n	80061fc <_realloc_r+0x34>
 80061f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061fa:	d812      	bhi.n	8006222 <_realloc_r+0x5a>
 80061fc:	4621      	mov	r1, r4
 80061fe:	4640      	mov	r0, r8
 8006200:	f7ff fc18 	bl	8005a34 <_malloc_r>
 8006204:	4605      	mov	r5, r0
 8006206:	2800      	cmp	r0, #0
 8006208:	d0ed      	beq.n	80061e6 <_realloc_r+0x1e>
 800620a:	42bc      	cmp	r4, r7
 800620c:	4622      	mov	r2, r4
 800620e:	4631      	mov	r1, r6
 8006210:	bf28      	it	cs
 8006212:	463a      	movcs	r2, r7
 8006214:	f7ff ffb0 	bl	8006178 <memcpy>
 8006218:	4631      	mov	r1, r6
 800621a:	4640      	mov	r0, r8
 800621c:	f7ff fb9e 	bl	800595c <_free_r>
 8006220:	e7e1      	b.n	80061e6 <_realloc_r+0x1e>
 8006222:	4635      	mov	r5, r6
 8006224:	e7df      	b.n	80061e6 <_realloc_r+0x1e>

08006226 <_malloc_usable_size_r>:
 8006226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800622a:	1f18      	subs	r0, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	bfbc      	itt	lt
 8006230:	580b      	ldrlt	r3, [r1, r0]
 8006232:	18c0      	addlt	r0, r0, r3
 8006234:	4770      	bx	lr
	...

08006238 <_init>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr

08006244 <_fini>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	bf00      	nop
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr
