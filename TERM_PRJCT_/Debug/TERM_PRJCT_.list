
TERM_PRJCT_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007810  08007810  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007818  08007818  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000074  08007894  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08007894  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015de3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca3  00000000  00000000  00035e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00038b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00039c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af4d  00000000  00000000  0003ac00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001559c  00000000  00000000  00055b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095524  00000000  00000000  0006b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010060d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005318  00000000  00000000  00100660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007678 	.word	0x08007678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007678 	.word	0x08007678

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>:
{

}

// Implementation of initializing constructor
motor_driver::motor_driver(TIM_HandleTypeDef* _htim,
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
		uint32_t _ch_a,
		uint32_t _ch_b)
    		:htim(_htim),
			 ch_a(_ch_a),
			 ch_b(_ch_b)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	60da      	str	r2, [r3, #12]
{
	htim = _htim;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	60da      	str	r2, [r3, #12]
	ch_a = _ch_a;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	605a      	str	r2, [r3, #4]
	ch_b = _ch_b;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	609a      	str	r2, [r3, #8]
	Duty_Cycle = 0;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2200      	movs	r2, #0
 80005ba:	801a      	strh	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch_a);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	68da      	ldr	r2, [r3, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	4610      	mov	r0, r2
 80005c8:	f004 f830 	bl	800462c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch_b);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	4619      	mov	r1, r3
 80005d6:	4610      	mov	r0, r2
 80005d8:	f004 f828 	bl	800462c <HAL_TIM_PWM_Start>
}
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4618      	mov	r0, r3
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <_ZN12motor_driver7Set_PWMEs>:


// Implementation of Set PWM Method
void motor_driver::Set_PWM(int16_t	_Duty_Cycle)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
	  */

	// Saturate the input between -1000 and 1000


	if (_Duty_Cycle < -5000) {
 80005f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005f8:	4a72      	ldr	r2, [pc, #456]	; (80007c4 <_ZN12motor_driver7Set_PWMEs+0x1dc>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	da03      	bge.n	8000606 <_ZN12motor_driver7Set_PWMEs+0x1e>
		_Duty_Cycle = -5000;
 80005fe:	f64e 4378 	movw	r3, #60536	; 0xec78
 8000602:	807b      	strh	r3, [r7, #2]
 8000604:	e008      	b.n	8000618 <_ZN12motor_driver7Set_PWMEs+0x30>
	} else if (_Duty_Cycle > 5000){
 8000606:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800060a:	f241 3288 	movw	r2, #5000	; 0x1388
 800060e:	4293      	cmp	r3, r2
 8000610:	dd02      	ble.n	8000618 <_ZN12motor_driver7Set_PWMEs+0x30>
		_Duty_Cycle = 5000;
 8000612:	f241 3388 	movw	r3, #5000	; 0x1388
 8000616:	807b      	strh	r3, [r7, #2]
	}


	Duty_Cycle = _Duty_Cycle;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	887a      	ldrh	r2, [r7, #2]
 800061c:	801a      	strh	r2, [r3, #0]

	int16_t PULSE = abs(Duty_Cycle*4899/10000);	// convert the duty cycle in percentage to the pulse width of PWM signal
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000624:	461a      	mov	r2, r3
 8000626:	f241 3323 	movw	r3, #4899	; 0x1323
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	4a66      	ldr	r2, [pc, #408]	; (80007c8 <_ZN12motor_driver7Set_PWMEs+0x1e0>)
 8000630:	fb82 1203 	smull	r1, r2, r2, r3
 8000634:	1312      	asrs	r2, r2, #12
 8000636:	17db      	asrs	r3, r3, #31
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	bfb8      	it	lt
 800063e:	425b      	neglt	r3, r3
 8000640:	81fb      	strh	r3, [r7, #14]

	// Set the output PWM channels per the sign of input duty cycle
	if (Duty_Cycle < 0){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000648:	2b00      	cmp	r3, #0
 800064a:	da5a      	bge.n	8000702 <_ZN12motor_driver7Set_PWMEs+0x11a>
		__HAL_TIM_SET_COMPARE(htim,ch_a,4899);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d106      	bne.n	8000662 <_ZN12motor_driver7Set_PWMEs+0x7a>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f241 3223 	movw	r2, #4899	; 0x1323
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
 8000660:	e01b      	b.n	800069a <_ZN12motor_driver7Set_PWMEs+0xb2>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d106      	bne.n	8000678 <_ZN12motor_driver7Set_PWMEs+0x90>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f241 3223 	movw	r2, #4899	; 0x1323
 8000674:	639a      	str	r2, [r3, #56]	; 0x38
 8000676:	e010      	b.n	800069a <_ZN12motor_driver7Set_PWMEs+0xb2>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	2b08      	cmp	r3, #8
 800067e:	d106      	bne.n	800068e <_ZN12motor_driver7Set_PWMEs+0xa6>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f241 3223 	movw	r2, #4899	; 0x1323
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
 800068c:	e005      	b.n	800069a <_ZN12motor_driver7Set_PWMEs+0xb2>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f241 3223 	movw	r2, #4899	; 0x1323
 8000698:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d109      	bne.n	80006b6 <_ZN12motor_driver7Set_PWMEs+0xce>
 80006a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006a6:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80006aa:	3303      	adds	r3, #3
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	68d2      	ldr	r2, [r2, #12]
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(htim,ch_a,(4899-PULSE));
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
	}
}
 80006b4:	e07f      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d109      	bne.n	80006d2 <_ZN12motor_driver7Set_PWMEs+0xea>
 80006be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006c2:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80006c6:	3303      	adds	r3, #3
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	68d2      	ldr	r2, [r2, #12]
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80006d0:	e071      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	2b08      	cmp	r3, #8
 80006d8:	d109      	bne.n	80006ee <_ZN12motor_driver7Set_PWMEs+0x106>
 80006da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006de:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80006e2:	3303      	adds	r3, #3
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	68d2      	ldr	r2, [r2, #12]
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80006ec:	e063      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 80006ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006f2:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80006f6:	3303      	adds	r3, #3
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	68d2      	ldr	r2, [r2, #12]
 80006fc:	6812      	ldr	r2, [r2, #0]
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000700:	e059      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_a,(4899-PULSE));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d109      	bne.n	800071e <_ZN12motor_driver7Set_PWMEs+0x136>
 800070a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800070e:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 8000712:	3303      	adds	r3, #3
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	68d2      	ldr	r2, [r2, #12]
 8000718:	6812      	ldr	r2, [r2, #0]
 800071a:	6353      	str	r3, [r2, #52]	; 0x34
 800071c:	e024      	b.n	8000768 <_ZN12motor_driver7Set_PWMEs+0x180>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	2b04      	cmp	r3, #4
 8000724:	d109      	bne.n	800073a <_ZN12motor_driver7Set_PWMEs+0x152>
 8000726:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800072a:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 800072e:	3303      	adds	r3, #3
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	68d2      	ldr	r2, [r2, #12]
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	6393      	str	r3, [r2, #56]	; 0x38
 8000738:	e016      	b.n	8000768 <_ZN12motor_driver7Set_PWMEs+0x180>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	2b08      	cmp	r3, #8
 8000740:	d109      	bne.n	8000756 <_ZN12motor_driver7Set_PWMEs+0x16e>
 8000742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000746:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 800074a:	3303      	adds	r3, #3
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	68d2      	ldr	r2, [r2, #12]
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000754:	e008      	b.n	8000768 <_ZN12motor_driver7Set_PWMEs+0x180>
 8000756:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800075a:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 800075e:	3303      	adds	r3, #3
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	68d2      	ldr	r2, [r2, #12]
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d106      	bne.n	800077e <_ZN12motor_driver7Set_PWMEs+0x196>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f241 3223 	movw	r2, #4899	; 0x1323
 800077a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800077c:	e01b      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d106      	bne.n	8000794 <_ZN12motor_driver7Set_PWMEs+0x1ac>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f241 3223 	movw	r2, #4899	; 0x1323
 8000790:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000792:	e010      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	2b08      	cmp	r3, #8
 800079a:	d106      	bne.n	80007aa <_ZN12motor_driver7Set_PWMEs+0x1c2>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f241 3223 	movw	r2, #4899	; 0x1323
 80007a6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007a8:	e005      	b.n	80007b6 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f241 3223 	movw	r2, #4899	; 0x1323
 80007b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	ffffec78 	.word	0xffffec78
 80007c8:	68db8bad 	.word	0x68db8bad

080007cc <_ZN14encoder_readerC1EP17TIM_HandleTypeDef>:
{

}

// Implementation of initializing constructor
encoder_reader::encoder_reader(TIM_HandleTypeDef* _htim)
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
    		:htim(_htim)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	60da      	str	r2, [r3, #12]

{
	htim = _htim;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(htim,TIM_CHANNEL_ALL);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	213c      	movs	r1, #60	; 0x3c
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 f875 	bl	80048d8 <HAL_TIM_Encoder_Start>

	// Initialize delta and count to zero
	COUNT = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
	DELTA = 0;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
	prev_value 	= 	__HAL_TIM_GET_COUNTER(htim); // Initialize the previous value to current timer count
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	605a      	str	r2, [r3, #4]
}
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_ZN14encoder_reader10zero_countEv>:

// Implementation of method to zero the current encoder position
void encoder_reader::zero_count(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	COUNT = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
	prev_value 	= 	__HAL_TIM_GET_COUNTER(htim);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	605a      	str	r2, [r3, #4]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <_ZN14encoder_reader9get_countEv>:


// Implementation of method to get the current encoder position and store in the object
int32_t encoder_reader::get_count(void)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	DELTA 		= 	__HAL_TIM_GET_COUNTER(htim) - prev_value;	// calculate the change in encoder position
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	461a      	mov	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	609a      	str	r2, [r3, #8]
	prev_value 	= 	__HAL_TIM_GET_COUNTER(htim);			// store current value for next encoder read callback
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	605a      	str	r2, [r3, #4]


	if (DELTA > 32768){		// overflow condition
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000866:	dd06      	ble.n	8000876 <_ZN14encoder_reader9get_countEv+0x40>
		DELTA -= 65536;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	e00a      	b.n	800088c <_ZN14encoder_reader9get_countEv+0x56>
	}

	else if (DELTA < -32768){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800087e:	da05      	bge.n	800088c <_ZN14encoder_reader9get_countEv+0x56>
		DELTA += 65536;		// under flow condition
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	609a      	str	r2, [r3, #8]
	}

	COUNT += DELTA;			// increment counter delta
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	441a      	add	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]

	return COUNT;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <_ZN19feedback_controllerC1Ev>:

// Implementation of the feedback controller class
feedback_controller::feedback_controller(void)
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
{
	// Initialize all gains, error and setpoints to zero
	KP = 0;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	801a      	strh	r2, [r3, #0]
	KI = 0;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	805a      	strh	r2, [r3, #2]
	DUTY_CYCLE = 0;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	809a      	strh	r2, [r3, #4]
	SET_POINT = 0;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	CURR_CNT = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
	INT_ERR = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	821a      	strh	r2, [r3, #16]
}
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <_ZN19feedback_controller12set_setpointEl>:

// Implementation of method to set the setpoint of feedback controller
void feedback_controller::set_setpoint(int32_t _SET_POINT)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	SET_POINT = _SET_POINT;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	609a      	str	r2, [r3, #8]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <_ZN19feedback_controller6set_KPEs>:

// Implementation of method to set the porportional gain
void feedback_controller::set_KP(int16_t _KP)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
	KP = _KP;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	887a      	ldrh	r2, [r7, #2]
 8000910:	801a      	strh	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <_ZN19feedback_controller3runEl>:
	INT_ERR = 0;	// zero the integral error when setting KI
}

// Implementation of the method to run porportional - integral control based on curent encoder position
int16_t feedback_controller::run(int32_t _CURR_CNT)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	CURR_CNT = _CURR_CNT;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	60da      	str	r2, [r3, #12]
	INT_ERR += (SET_POINT - CURR_CNT);			// add the current error to the integrated error
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000936:	b29a      	uxth	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	b299      	uxth	r1, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	b29b      	uxth	r3, r3
 8000944:	1acb      	subs	r3, r1, r3
 8000946:	b29b      	uxth	r3, r3
 8000948:	4413      	add	r3, r2
 800094a:	b29b      	uxth	r3, r3
 800094c:	b21a      	sxth	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	821a      	strh	r2, [r3, #16]

	DUTY_CYCLE = KP*(SET_POINT - CURR_CNT) + KI*INT_ERR/100;	// Determine duty cycle from KP and KI
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000958:	b29a      	uxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6899      	ldr	r1, [r3, #8]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	1acb      	subs	r3, r1, r3
 8000964:	b29b      	uxth	r3, r3
 8000966:	fb12 f303 	smulbb	r3, r2, r3
 800096a:	b29a      	uxth	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000972:	4619      	mov	r1, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800097a:	fb01 f303 	mul.w	r3, r1, r3
 800097e:	490a      	ldr	r1, [pc, #40]	; (80009a8 <_ZN19feedback_controller3runEl+0x88>)
 8000980:	fb81 0103 	smull	r0, r1, r1, r3
 8000984:	1149      	asrs	r1, r1, #5
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1acb      	subs	r3, r1, r3
 800098a:	b29b      	uxth	r3, r3
 800098c:	4413      	add	r3, r2
 800098e:	b29b      	uxth	r3, r3
 8000990:	b21a      	sxth	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	809a      	strh	r2, [r3, #4]
	return DUTY_CYCLE;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	51eb851f 	.word	0x51eb851f

080009ac <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>:
{

}

// Implementation of initializing constructor
servo_driver::servo_driver(TIM_HandleTypeDef* _htim,
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
		uint32_t _channel)
    		:htim(_htim),
			 channel(_channel)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	609a      	str	r2, [r3, #8]
{
	htim = _htim;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	609a      	str	r2, [r3, #8]
	channel = _channel;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	605a      	str	r2, [r3, #4]
	ANGLE = 0;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2200      	movs	r2, #0
 80009d4:	801a      	strh	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,channel);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	4619      	mov	r1, r3
 80009e0:	4610      	mov	r0, r2
 80009e2:	f003 fe23 	bl	800462c <HAL_TIM_PWM_Start>
}
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZN12servo_driver12Set_PositionEs>:


// Implementation of Set PWM Method
void servo_driver::Set_Position(int16_t	_ANGLE)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]
	  * @brief  Sets the PWM for specified duty cycle for a specified motor driver
	  * @param  Duty_Cycle: int32_t of the desired duty cycle
	  */

	// Saturate the input between -90 and 90
	ANGLE = _ANGLE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	887a      	ldrh	r2, [r7, #2]
 8000a00:	801a      	strh	r2, [r3, #0]

	if (ANGLE < -90) {
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a08:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8000a0c:	da04      	bge.n	8000a18 <_ZN12servo_driver12Set_PositionEs+0x28>
		ANGLE = -90;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f64f 72a6 	movw	r2, #65446	; 0xffa6
 8000a14:	801a      	strh	r2, [r3, #0]
 8000a16:	e007      	b.n	8000a28 <_ZN12servo_driver12Set_PositionEs+0x38>
	} else if (ANGLE > 90){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1e:	2b5a      	cmp	r3, #90	; 0x5a
 8000a20:	dd02      	ble.n	8000a28 <_ZN12servo_driver12Set_PositionEs+0x38>
		ANGLE = 90;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	225a      	movs	r2, #90	; 0x5a
 8000a26:	801a      	strh	r2, [r3, #0]
	}

	int16_t PULSE = 0;		// intialize pulse signal
 8000a28:	2300      	movs	r3, #0
 8000a2a:	81fb      	strh	r3, [r7, #14]
	if (ANGLE<0){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	da14      	bge.n	8000a60 <_ZN12servo_driver12Set_PositionEs+0x70>
		PULSE = 1500 + ANGLE*500/90;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a42:	fb02 f303 	mul.w	r3, r2, r3
 8000a46:	4a27      	ldr	r2, [pc, #156]	; (8000ae4 <_ZN12servo_driver12Set_PositionEs+0xf4>)
 8000a48:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4c:	441a      	add	r2, r3
 8000a4e:	1192      	asrs	r2, r2, #6
 8000a50:	17db      	asrs	r3, r3, #31
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	81fb      	strh	r3, [r7, #14]
 8000a5e:	e013      	b.n	8000a88 <_ZN12servo_driver12Set_PositionEs+0x98>
	}
	else{
		PULSE = 1500 + ANGLE*500/90;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	461a      	mov	r2, r3
 8000a68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a6c:	fb02 f303 	mul.w	r3, r2, r3
 8000a70:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <_ZN12servo_driver12Set_PositionEs+0xf4>)
 8000a72:	fb82 1203 	smull	r1, r2, r2, r3
 8000a76:	441a      	add	r2, r3
 8000a78:	1192      	asrs	r2, r2, #6
 8000a7a:	17db      	asrs	r3, r3, #31
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(htim,channel,PULSE);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d106      	bne.n	8000a9e <_ZN12servo_driver12Set_PositionEs+0xae>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34

	}
 8000a9c:	e01b      	b.n	8000ad6 <_ZN12servo_driver12Set_PositionEs+0xe6>
	__HAL_TIM_SET_COMPARE(htim,channel,PULSE);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d106      	bne.n	8000ab4 <_ZN12servo_driver12Set_PositionEs+0xc4>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ab0:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000ab2:	e010      	b.n	8000ad6 <_ZN12servo_driver12Set_PositionEs+0xe6>
	__HAL_TIM_SET_COMPARE(htim,channel,PULSE);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b08      	cmp	r3, #8
 8000aba:	d106      	bne.n	8000aca <_ZN12servo_driver12Set_PositionEs+0xda>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8000ac8:	e005      	b.n	8000ad6 <_ZN12servo_driver12Set_PositionEs+0xe6>
	__HAL_TIM_SET_COMPARE(htim,channel,PULSE);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ad4:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	b60b60b7 	.word	0xb60b60b7

08000ae8 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef>:
#include "BNO055.h"
#include <stdio.h>
#include "main.h"
#include "stm32f4xx_hal.h"

movement_task::movement_task(motor_driver _Left_Mot,
 8000ae8:	b084      	sub	sp, #16
 8000aea:	b5b0      	push	{r4, r5, r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	f107 001c 	add.w	r0, r7, #28
 8000af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
				right_duty(0),
				left_duty(0),
				huart(_huart),
				start_ticks(0),
				curr_time(0),
				start_count(0)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2205      	movs	r2, #5
 8000b0a:	609a      	str	r2, [r3, #8]
						(movement_task::state_fcn) &movement_task::state_4}),
 8000b0c:	2028      	movs	r0, #40	; 0x28
 8000b0e:	f005 fba7 	bl	8006260 <_Znaj>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4619      	mov	r1, r3
 8000b16:	460b      	mov	r3, r1
 8000b18:	4a3a      	ldr	r2, [pc, #232]	; (8000c04 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x11c>)
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	3308      	adds	r3, #8
 8000b22:	4a39      	ldr	r2, [pc, #228]	; (8000c08 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x120>)
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x124>)
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	3308      	adds	r3, #8
 8000b36:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x128>)
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	3308      	adds	r3, #8
 8000b40:	4a34      	ldr	r2, [pc, #208]	; (8000c14 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x12c>)
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
				start_count(0)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	60d9      	str	r1, [r3, #12]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f103 0410 	add.w	r4, r3, #16
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f103 0420 	add.w	r4, r3, #32
 8000b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000b72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000b82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000b92:	f107 055c 	add.w	r5, r7, #92	; 0x5c
 8000b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9a:	682b      	ldr	r3, [r5, #0]
 8000b9c:	6023      	str	r3, [r4, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000ba4:	f107 0570 	add.w	r5, r7, #112	; 0x70
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	682b      	ldr	r3, [r5, #0]
 8000bae:	6023      	str	r3, [r4, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000bb6:	679a      	str	r2, [r3, #120]	; 0x78
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	67da      	str	r2, [r3, #124]	; 0x7c
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
{
	printf("Initialized?");
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x130>)
 8000bf0:	f005 fc74 	bl	80064dc <iprintf>
}
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000c00:	b004      	add	sp, #16
 8000c02:	4770      	bx	lr
 8000c04:	08000cb9 	.word	0x08000cb9
 8000c08:	08000d01 	.word	0x08000d01
 8000c0c:	08000f4d 	.word	0x08000f4d
 8000c10:	08001199 	.word	0x08001199
 8000c14:	08001261 	.word	0x08001261
 8000c18:	08007690 	.word	0x08007690

08000c1c <_ZN13movement_task3runEv>:

void movement_task::run(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if (state>=0 && state<num_states)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d239      	bcs.n	8000ca4 <_ZN13movement_task3runEv+0x88>
	{
		(this->*state_list[state])();
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	105b      	asrs	r3, r3, #1
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	1898      	adds	r0, r3, r2
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4413      	add	r3, r2
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d015      	beq.n	8000c88 <_ZN13movement_task3runEv+0x6c>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	105b      	asrs	r3, r3, #1
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	68d1      	ldr	r1, [r2, #12]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	00d2      	lsls	r2, r2, #3
 8000c7e:	440a      	add	r2, r1
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	e006      	b.n	8000c96 <_ZN13movement_task3runEv+0x7a>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	4413      	add	r3, r2
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4798      	blx	r3

		runs++;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	605a      	str	r2, [r3, #4]
	else
	{
		printf("Error Invalid State");
		while(1){}
	}
}
 8000ca2:	e003      	b.n	8000cac <_ZN13movement_task3runEv+0x90>
		printf("Error Invalid State");
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <_ZN13movement_task3runEv+0x98>)
 8000ca6:	f005 fc19 	bl	80064dc <iprintf>
		while(1){}
 8000caa:	e7fe      	b.n	8000caa <_ZN13movement_task3runEv+0x8e>
}
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	080076a0 	.word	0x080076a0

08000cb8 <_ZN13movement_task7state_0Ev>:

void movement_task::state_0(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	// Initialization state
	// Maybe Calibrate IMU Here
	// Zero Everything
	Right_Encoder.zero_count();
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3340      	adds	r3, #64	; 0x40
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fda3 	bl	8000810 <_ZN14encoder_reader10zero_countEv>
	Left_Encoder.zero_count();
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3330      	adds	r3, #48	; 0x30
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd9e 	bl	8000810 <_ZN14encoder_reader10zero_countEv>
	right_sp = 0;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	67da      	str	r2, [r3, #124]	; 0x7c
	left_sp = 0;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	right_duty = 0;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	left_duty = 0;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	state = 1;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_ZN13movement_task7state_1Ev>:

void movement_task::state_1(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0a2      	sub	sp, #136	; 0x88
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	// Move out of Home Area
	right_sp = 650;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f240 228a 	movw	r2, #650	; 0x28a
 8000d0e:	67da      	str	r2, [r3, #124]	; 0x7c
	left_sp = right_sp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	Left_Feedback.set_setpoint(left_sp);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d26:	4619      	mov	r1, r3
 8000d28:	4610      	mov	r0, r2
 8000d2a:	f7ff fddb 	bl	80008e4 <_ZN19feedback_controller12set_setpointEl>
	Right_Feedback.set_setpoint(right_sp);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	f7ff fdd2 	bl	80008e4 <_ZN19feedback_controller12set_setpointEl>



	char buffer[50] = {0};
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d48:	222e      	movs	r2, #46	; 0x2e
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 fadd 	bl	800630c <memset>
	int32_t right_count = Right_Encoder.get_count();
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3340      	adds	r3, #64	; 0x40
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fd6d 	bl	8000836 <_ZN14encoder_reader9get_countEv>
 8000d5c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	int32_t left_count = Left_Encoder.get_count();
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3330      	adds	r3, #48	; 0x30
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fd66 	bl	8000836 <_ZN14encoder_reader9get_countEv>
 8000d6a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	int32_t n3 = sprintf(buffer, "Right Count: %d  ",right_count);
 8000d6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d72:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000d76:	496f      	ldr	r1, [pc, #444]	; (8000f34 <_ZN13movement_task7state_1Ev+0x234>)
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 fc1b 	bl	80065b4 <siprintf>
 8000d7e:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(huart,(uint8_t*) buffer, n3, 1000);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000d84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d90:	f004 fa31 	bl	80051f6 <HAL_UART_Transmit>
	int32_t n2 = sprintf(buffer, "Left Count: %d \r\n",left_count);
 8000d94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000d9c:	4966      	ldr	r1, [pc, #408]	; (8000f38 <_ZN13movement_task7state_1Ev+0x238>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f005 fc08 	bl	80065b4 <siprintf>
 8000da4:	67b8      	str	r0, [r7, #120]	; 0x78
	HAL_UART_Transmit(huart,(uint8_t*) buffer, n2, 1000);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	f004 fa1e 	bl	80051f6 <HAL_UART_Transmit>



	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	485f      	ldr	r0, [pc, #380]	; (8000f3c <_ZN13movement_task7state_1Ev+0x23c>)
 8000dbe:	f001 ffb5 	bl	8002d2c <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf0c      	ite	eq
 8000dc8:	2301      	moveq	r3, #1
 8000dca:	2300      	movne	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d072      	beq.n	8000eb8 <_ZN13movement_task7state_1Ev+0x1b8>
	{
		if (start_count == 0)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d109      	bne.n	8000df0 <_ZN13movement_task7state_1Ev+0xf0>
		{
			start_ticks = HAL_GetTick();
 8000ddc:	f001 fc4e 	bl	800267c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			start_count = 1;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		}
		curr_time = HAL_GetTick() - start_ticks;
 8000df0:	f001 fc44 	bl	800267c <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfc:	1ad2      	subs	r2, r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

		int32_t n1 = sprintf(buffer, "BUTTON PRESSED  \r\n");
 8000e04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e08:	494d      	ldr	r1, [pc, #308]	; (8000f40 <_ZN13movement_task7state_1Ev+0x240>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fbd2 	bl	80065b4 <siprintf>
 8000e10:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(huart,(uint8_t*) buffer, n1, 1000);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	f004 f9e8 	bl	80051f6 <HAL_UART_Transmit>



		right_duty = Right_Feedback.run(right_count);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3364      	adds	r3, #100	; 0x64
 8000e2a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fd76 	bl	8000920 <_ZN19feedback_controller3runEl>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = Left_Feedback.run(left_count);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3350      	adds	r3, #80	; 0x50
 8000e42:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fd6a 	bl	8000920 <_ZN19feedback_controller3runEl>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		if (right_duty > 2500){
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8000e5c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e60:	4293      	cmp	r3, r2
 8000e62:	dd05      	ble.n	8000e70 <_ZN13movement_task7state_1Ev+0x170>
			right_duty = 2500;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e6a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8000e6e:	e00a      	b.n	8000e86 <_ZN13movement_task7state_1Ev+0x186>
		}
		else if (right_duty < -2500){
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8000e76:	4a33      	ldr	r2, [pc, #204]	; (8000f44 <_ZN13movement_task7state_1Ev+0x244>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	da04      	bge.n	8000e86 <_ZN13movement_task7state_1Ev+0x186>
			right_duty = -2500;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f24f 623c 	movw	r2, #63036	; 0xf63c
 8000e82:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		}

		if (left_duty > 2500){
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8000e8c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dd05      	ble.n	8000ea0 <_ZN13movement_task7state_1Ev+0x1a0>
			left_duty = 2500;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e9a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8000e9e:	e023      	b.n	8000ee8 <_ZN13movement_task7state_1Ev+0x1e8>
		}
		else if (left_duty < -2500){
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8000ea6:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <_ZN13movement_task7state_1Ev+0x244>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	da1d      	bge.n	8000ee8 <_ZN13movement_task7state_1Ev+0x1e8>
			left_duty = -2500;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f24f 623c 	movw	r2, #63036	; 0xf63c
 8000eb2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8000eb6:	e017      	b.n	8000ee8 <_ZN13movement_task7state_1Ev+0x1e8>



	} else
	{
		char buffer[50] = {0};
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	222e      	movs	r2, #46	; 0x2e
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 fa21 	bl	800630c <memset>
		int32_t n1 = sprintf(buffer, "BUTTON Not PRESSED  \r\n");
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	491e      	ldr	r1, [pc, #120]	; (8000f48 <_ZN13movement_task7state_1Ev+0x248>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 fb6f 	bl	80065b4 <siprintf>
 8000ed6:	6778      	str	r0, [r7, #116]	; 0x74
		//HAL_UART_Transmit(huart,(uint8_t*) buffer, n1, 1000);
		right_duty = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	}
	Right_Mot.Set_PWM(right_duty);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f103 0220 	add.w	r2, r3, #32
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	f7ff fb76 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
	Left_Mot.Set_PWM(left_duty);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f103 0210 	add.w	r2, r3, #16
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	f7ff fb6c 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>



	if (curr_time > 5000)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d906      	bls.n	8000f2c <_ZN13movement_task7state_1Ev+0x22c>
	{
		state = 2;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2202      	movs	r2, #2
 8000f22:	601a      	str	r2, [r3, #0]
		start_count = 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	}

}
 8000f2c:	bf00      	nop
 8000f2e:	3788      	adds	r7, #136	; 0x88
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	080076b4 	.word	0x080076b4
 8000f38:	080076c8 	.word	0x080076c8
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	080076dc 	.word	0x080076dc
 8000f44:	fffff63c 	.word	0xfffff63c
 8000f48:	080076f0 	.word	0x080076f0

08000f4c <_ZN13movement_task7state_2Ev>:

void movement_task::state_2(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a2      	sub	sp, #136	; 0x88
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	// Move out of Home Area
	right_sp = 896;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f44f 7260 	mov.w	r2, #896	; 0x380
 8000f5a:	67da      	str	r2, [r3, #124]	; 0x7c
	left_sp = 395;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f240 128b 	movw	r2, #395	; 0x18b
 8000f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	Left_Feedback.set_setpoint(left_sp);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f72:	4619      	mov	r1, r3
 8000f74:	4610      	mov	r0, r2
 8000f76:	f7ff fcb5 	bl	80008e4 <_ZN19feedback_controller12set_setpointEl>
	Right_Feedback.set_setpoint(right_sp);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f84:	4619      	mov	r1, r3
 8000f86:	4610      	mov	r0, r2
 8000f88:	f7ff fcac 	bl	80008e4 <_ZN19feedback_controller12set_setpointEl>



	char buffer[50] = {0};
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f94:	222e      	movs	r2, #46	; 0x2e
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 f9b7 	bl	800630c <memset>
	int32_t right_count = Right_Encoder.get_count();
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3340      	adds	r3, #64	; 0x40
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fc47 	bl	8000836 <_ZN14encoder_reader9get_countEv>
 8000fa8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	int32_t left_count = Left_Encoder.get_count();
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3330      	adds	r3, #48	; 0x30
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fc40 	bl	8000836 <_ZN14encoder_reader9get_countEv>
 8000fb6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	int32_t n3 = sprintf(buffer, "Right Count: %d  ",right_count);
 8000fba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fbe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000fc2:	496f      	ldr	r1, [pc, #444]	; (8001180 <_ZN13movement_task7state_2Ev+0x234>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 faf5 	bl	80065b4 <siprintf>
 8000fca:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(huart,(uint8_t*) buffer, n3, 1000);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fdc:	f004 f90b 	bl	80051f6 <HAL_UART_Transmit>
	int32_t n2 = sprintf(buffer, "Left Count: %d \r\n",left_count);
 8000fe0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000fe8:	4966      	ldr	r1, [pc, #408]	; (8001184 <_ZN13movement_task7state_2Ev+0x238>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fae2 	bl	80065b4 <siprintf>
 8000ff0:	67b8      	str	r0, [r7, #120]	; 0x78
	HAL_UART_Transmit(huart,(uint8_t*) buffer, n2, 1000);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	f004 f8f8 	bl	80051f6 <HAL_UART_Transmit>



	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8001006:	2101      	movs	r1, #1
 8001008:	485f      	ldr	r0, [pc, #380]	; (8001188 <_ZN13movement_task7state_2Ev+0x23c>)
 800100a:	f001 fe8f 	bl	8002d2c <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d072      	beq.n	8001104 <_ZN13movement_task7state_2Ev+0x1b8>
	{
		if (start_count == 0)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8001024:	2b00      	cmp	r3, #0
 8001026:	d109      	bne.n	800103c <_ZN13movement_task7state_2Ev+0xf0>
		{
			start_ticks = HAL_GetTick();
 8001028:	f001 fb28 	bl	800267c <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			start_count = 1;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		}
		curr_time = HAL_GetTick() - start_ticks;
 800103c:	f001 fb1e 	bl	800267c <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001048:	1ad2      	subs	r2, r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

		int32_t n1 = sprintf(buffer, "BUTTON PRESSED  \r\n");
 8001050:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001054:	494d      	ldr	r1, [pc, #308]	; (800118c <_ZN13movement_task7state_2Ev+0x240>)
 8001056:	4618      	mov	r0, r3
 8001058:	f005 faac 	bl	80065b4 <siprintf>
 800105c:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(huart,(uint8_t*) buffer, n1, 1000);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001064:	b29a      	uxth	r2, r3
 8001066:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	f004 f8c2 	bl	80051f6 <HAL_UART_Transmit>



		right_duty = Right_Feedback.run(right_count);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3364      	adds	r3, #100	; 0x64
 8001076:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fc50 	bl	8000920 <_ZN19feedback_controller3runEl>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = Left_Feedback.run(left_count);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3350      	adds	r3, #80	; 0x50
 800108e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fc44 	bl	8000920 <_ZN19feedback_controller3runEl>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		if (right_duty > 2500){
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80010a8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010ac:	4293      	cmp	r3, r2
 80010ae:	dd05      	ble.n	80010bc <_ZN13movement_task7state_2Ev+0x170>
			right_duty = 2500;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010b6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80010ba:	e00a      	b.n	80010d2 <_ZN13movement_task7state_2Ev+0x186>
		}
		else if (right_duty < -2500){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80010c2:	4a33      	ldr	r2, [pc, #204]	; (8001190 <_ZN13movement_task7state_2Ev+0x244>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	da04      	bge.n	80010d2 <_ZN13movement_task7state_2Ev+0x186>
			right_duty = -2500;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f24f 623c 	movw	r2, #63036	; 0xf63c
 80010ce:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		}

		if (left_duty > 2500){
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 80010d8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010dc:	4293      	cmp	r3, r2
 80010de:	dd05      	ble.n	80010ec <_ZN13movement_task7state_2Ev+0x1a0>
			left_duty = 2500;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010e6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80010ea:	e023      	b.n	8001134 <_ZN13movement_task7state_2Ev+0x1e8>
		}
		else if (left_duty < -2500){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <_ZN13movement_task7state_2Ev+0x244>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	da1d      	bge.n	8001134 <_ZN13movement_task7state_2Ev+0x1e8>
			left_duty = -2500;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f24f 623c 	movw	r2, #63036	; 0xf63c
 80010fe:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8001102:	e017      	b.n	8001134 <_ZN13movement_task7state_2Ev+0x1e8>



	} else
	{
		char buffer[50] = {0};
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	222e      	movs	r2, #46	; 0x2e
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f005 f8fb 	bl	800630c <memset>
		int32_t n1 = sprintf(buffer, "BUTTON Not PRESSED  \r\n");
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	491e      	ldr	r1, [pc, #120]	; (8001194 <_ZN13movement_task7state_2Ev+0x248>)
 800111c:	4618      	mov	r0, r3
 800111e:	f005 fa49 	bl	80065b4 <siprintf>
 8001122:	6778      	str	r0, [r7, #116]	; 0x74
		//HAL_UART_Transmit(huart,(uint8_t*) buffer, n1, 1000);
		right_duty = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	}
	Right_Mot.Set_PWM(right_duty);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f103 0220 	add.w	r2, r3, #32
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8001140:	4619      	mov	r1, r3
 8001142:	4610      	mov	r0, r2
 8001144:	f7ff fa50 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
	Left_Mot.Set_PWM(left_duty);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f103 0210 	add.w	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8001154:	4619      	mov	r1, r3
 8001156:	4610      	mov	r0, r2
 8001158:	f7ff fa46 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>



	if (curr_time > 5000)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001162:	f241 3288 	movw	r2, #5000	; 0x1388
 8001166:	4293      	cmp	r3, r2
 8001168:	d906      	bls.n	8001178 <_ZN13movement_task7state_2Ev+0x22c>
	{
		state = 3;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2203      	movs	r2, #3
 800116e:	601a      	str	r2, [r3, #0]
		start_count = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	}

}
 8001178:	bf00      	nop
 800117a:	3788      	adds	r7, #136	; 0x88
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	080076b4 	.word	0x080076b4
 8001184:	080076c8 	.word	0x080076c8
 8001188:	40020400 	.word	0x40020400
 800118c:	080076dc 	.word	0x080076dc
 8001190:	fffff63c 	.word	0xfffff63c
 8001194:	080076f0 	.word	0x080076f0

08001198 <_ZN13movement_task7state_3Ev>:

void movement_task::state_3(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	// Drive In Circle


	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 80011a0:	2101      	movs	r1, #1
 80011a2:	482e      	ldr	r0, [pc, #184]	; (800125c <_ZN13movement_task7state_3Ev+0xc4>)
 80011a4:	f001 fdc2 	bl	8002d2c <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d023      	beq.n	8001200 <_ZN13movement_task7state_3Ev+0x68>
	{
		if (start_count == 0)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <_ZN13movement_task7state_3Ev+0x3e>
		{
			start_ticks = HAL_GetTick();
 80011c2:	f001 fa5b 	bl	800267c <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			start_count = 1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		}
		curr_time = HAL_GetTick() - start_ticks;
 80011d6:	f001 fa51 	bl	800267c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		right_duty = 1250;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80011f0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty  = 2500;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80011fa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80011fe:	e007      	b.n	8001210 <_ZN13movement_task7state_3Ev+0x78>

	} else
	{
		right_duty = 0;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = 0;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	}

	Right_Mot.Set_PWM(right_duty);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f103 0220 	add.w	r2, r3, #32
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 800121c:	4619      	mov	r1, r3
 800121e:	4610      	mov	r0, r2
 8001220:	f7ff f9e2 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
	Left_Mot.Set_PWM(left_duty);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f103 0210 	add.w	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f7ff f9d8 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>

	if (curr_time > 20000)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800123e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001242:	4293      	cmp	r3, r2
 8001244:	d906      	bls.n	8001254 <_ZN13movement_task7state_3Ev+0xbc>
	{
		state = 4;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2204      	movs	r2, #4
 800124a:	601a      	str	r2, [r3, #0]
		start_count = 0;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	}
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020400 	.word	0x40020400

08001260 <_ZN13movement_task7state_4Ev>:

void movement_task::state_4(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b090      	sub	sp, #64	; 0x40
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	// Return Home
	Right_Mot.Set_PWM(0);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3320      	adds	r3, #32
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f9ba 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
	Left_Mot.Set_PWM(0);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3310      	adds	r3, #16
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f9b4 	bl	80005e8 <_ZN12motor_driver7Set_PWMEs>
	char buffer[50] = {0};
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	222e      	movs	r2, #46	; 0x2e
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f005 f83d 	bl	800630c <memset>
	int32_t s4 = sprintf(buffer, "State 4\r\n");
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	4909      	ldr	r1, [pc, #36]	; (80012bc <_ZN13movement_task7state_4Ev+0x5c>)
 8001298:	4618      	mov	r0, r3
 800129a:	f005 f98b 	bl	80065b4 <siprintf>
 800129e:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(huart,(uint8_t*) buffer, s4, 1000);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80012a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 0108 	add.w	r1, r7, #8
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	f003 ffa1 	bl	80051f6 <HAL_UART_Transmit>
}
 80012b4:	bf00      	nop
 80012b6:	3740      	adds	r7, #64	; 0x40
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	08007708 	.word	0x08007708

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c2:	b0f9      	sub	sp, #484	; 0x1e4
 80012c4:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c6:	f001 f973 	bl	80025b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ca:	f000 f8dd 	bl	8001488 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ce:	f000 fc13 	bl	8001af8 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80012d2:	f000 fa27 	bl	8001724 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 80012d6:	f000 fbe1 	bl	8001a9c <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 80012da:	f000 fabb 	bl	8001854 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80012de:	f000 fb17 	bl	8001910 <_ZL12MX_TIM4_Initv>
  MX_TIM1_Init();
 80012e2:	f000 f977 	bl	80015d4 <_ZL12MX_TIM1_Initv>
  MX_TIM5_Init();
 80012e6:	f000 fb71 	bl	80019cc <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 80012ea:	f000 f93f 	bl	800156c <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &char_buffer, 1);	// Initialize UART Receive
 80012ee:	2201      	movs	r2, #1
 80012f0:	495c      	ldr	r1, [pc, #368]	; (8001464 <main+0x1a4>)
 80012f2:	485d      	ldr	r0, [pc, #372]	; (8001468 <main+0x1a8>)
 80012f4:	f004 f811 	bl	800531a <HAL_UART_Receive_IT>
           encoder_reader ENCD1 = encoder_reader(&htim3); //A6 A7
 80012f8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80012fc:	495b      	ldr	r1, [pc, #364]	; (800146c <main+0x1ac>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fa64 	bl	80007cc <_ZN14encoder_readerC1EP17TIM_HandleTypeDef>
           // Encoder 1 is the Left Rear Wheel
           encoder_reader ENCD2 = encoder_reader(&htim4); //B6 B7
 8001304:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001308:	4959      	ldr	r1, [pc, #356]	; (8001470 <main+0x1b0>)
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fa5e 	bl	80007cc <_ZN14encoder_readerC1EP17TIM_HandleTypeDef>
           // Encoder 2 is the right rear Wheel
           motor_driver MOTOR_1 = motor_driver(&htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);		// Initialize the motor driver object as MOTOR_1
 8001310:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8001314:	2304      	movs	r3, #4
 8001316:	2200      	movs	r2, #0
 8001318:	4956      	ldr	r1, [pc, #344]	; (8001474 <main+0x1b4>)
 800131a:	f7ff f933 	bl	8000584 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>
           // Motor Driver 1 is The Left Rear Wheel
           // A5 A1
           motor_driver MOTOR_2 = motor_driver(&htim2, TIM_CHANNEL_3, TIM_CHANNEL_4);		// Initialize the motor driver object as MOTOR_2
 800131e:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8001322:	230c      	movs	r3, #12
 8001324:	2208      	movs	r2, #8
 8001326:	4953      	ldr	r1, [pc, #332]	; (8001474 <main+0x1b4>)
 8001328:	f7ff f92c 	bl	8000584 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>
           // Motor Driver 2 is The Right Rear Wheel
           // A2 A3
           feedback_controller controller_1 = feedback_controller();
 800132c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff faba 	bl	80008aa <_ZN19feedback_controllerC1Ev>
           feedback_controller controller_2 = feedback_controller();
 8001336:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fab5 	bl	80008aa <_ZN19feedback_controllerC1Ev>
           motor_driver FLYWHEEL = motor_driver(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2); // A8 A9
 8001340:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001344:	2304      	movs	r3, #4
 8001346:	2200      	movs	r2, #0
 8001348:	494b      	ldr	r1, [pc, #300]	; (8001478 <main+0x1b8>)
 800134a:	f7ff f91b 	bl	8000584 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>

           controller_1.set_KP(KP);
 800134e:	4b4b      	ldr	r3, [pc, #300]	; (800147c <main+0x1bc>)
 8001350:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001354:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fad0 	bl	8000900 <_ZN19feedback_controller6set_KPEs>
           controller_2.set_KP(KP);
 8001360:	4b46      	ldr	r3, [pc, #280]	; (800147c <main+0x1bc>)
 8001362:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001366:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fac7 	bl	8000900 <_ZN19feedback_controller6set_KPEs>
           //controller_1.set_setpoint(SP1);
           //controller_2.set_setpoint(SP2);

         //  BNO055_imu IMU = BNO055_imu(&hi2c1);

           servo_driver SERVO1 = servo_driver(&htim5,TIM_CHANNEL_1);
 8001372:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001376:	2200      	movs	r2, #0
 8001378:	4941      	ldr	r1, [pc, #260]	; (8001480 <main+0x1c0>)
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb16 	bl	80009ac <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>

           movement_task task1 = movement_task(MOTOR_1, MOTOR_2, ENCD1, ENCD2, controller_1, controller_2, &huart1);
 8001380:	f107 0664 	add.w	r6, r7, #100	; 0x64
 8001384:	4b38      	ldr	r3, [pc, #224]	; (8001468 <main+0x1a8>)
 8001386:	9317      	str	r3, [sp, #92]	; 0x5c
 8001388:	ad12      	add	r5, sp, #72	; 0x48
 800138a:	f507 748a 	add.w	r4, r7, #276	; 0x114
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	602b      	str	r3, [r5, #0]
 8001396:	ad0d      	add	r5, sp, #52	; 0x34
 8001398:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	602b      	str	r3, [r5, #0]
 80013a4:	ac09      	add	r4, sp, #36	; 0x24
 80013a6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80013aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013b0:	ac05      	add	r4, sp, #20
 80013b2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80013b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013bc:	ac01      	add	r4, sp, #4
 80013be:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80013c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013c8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80013d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d4:	4630      	mov	r0, r6
 80013d6:	f7ff fb87 	bl	8000ae8 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef>
           sort_task	task2 = sort_task(SERVO1, &huart1,&hi2c1);
 80013da:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <main+0x1c4>)
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <main+0x1a8>)
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ec:	f000 fbf0 	bl	8001bd0 <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef>





    uint8_t config_mode = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
    uint8_t imu_mode = 0b00001000;
 80013f6:	2308      	movs	r3, #8
 80013f8:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
    uint8_t cur_opmode[1] = {0};
 80013fc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001400:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]

    uint8_t calib_state[1] = {0};
 8001408:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800140c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]

    uint8_t cur_pwrmode[1] = {0};
 8001414:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001418:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]

    uint8_t unit_sel = 0b00010001;
 8001420:	2311      	movs	r3, #17
 8001422:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d

	uint8_t raw_heading[2] = {0};
 8001426:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800142a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]
	uint8_t raw_heading1[2] = {0};
 8001432:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001436:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800143a:	2200      	movs	r2, #0
 800143c:	801a      	strh	r2, [r3, #0]
	uint8_t raw_heading2[2] = {0};
 800143e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001442:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001446:	2200      	movs	r2, #0
 8001448:	801a      	strh	r2, [r3, #0]
	uint8_t raw_heading3[2] = {0};
 800144a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800144e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001452:	2200      	movs	r2, #0
 8001454:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  	task1.run();
 8001456:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fbde 	bl	8000c1c <_ZN13movement_task3runEv>
 8001460:	e7f9      	b.n	8001456 <main+0x196>
 8001462:	bf00      	nop
 8001464:	20000090 	.word	0x20000090
 8001468:	20000250 	.word	0x20000250
 800146c:	20000178 	.word	0x20000178
 8001470:	200001c0 	.word	0x200001c0
 8001474:	20000130 	.word	0x20000130
 8001478:	200000e8 	.word	0x200000e8
 800147c:	20000000 	.word	0x20000000
 8001480:	20000208 	.word	0x20000208
 8001484:	20000094 	.word	0x20000094

08001488 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b094      	sub	sp, #80	; 0x50
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	2230      	movs	r2, #48	; 0x30
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f004 ff38 	bl	800630c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <_Z18SystemClock_Configv+0xdc>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <_Z18SystemClock_Configv+0xdc>)
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ba:	6413      	str	r3, [r2, #64]	; 0x40
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <_Z18SystemClock_Configv+0xdc>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <_Z18SystemClock_Configv+0xe0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a25      	ldr	r2, [pc, #148]	; (8001568 <_Z18SystemClock_Configv+0xe0>)
 80014d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <_Z18SystemClock_Configv+0xe0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e4:	2301      	movs	r3, #1
 80014e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014f8:	2319      	movs	r3, #25
 80014fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014fc:	23c0      	movs	r3, #192	; 0xc0
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fbe5 	bl	8003cdc <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf14      	ite	ne
 8001518:	2301      	movne	r3, #1
 800151a:	2300      	moveq	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001522:	f000 fb4f 	bl	8001bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152a:	2302      	movs	r3, #2
 800152c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2103      	movs	r1, #3
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fe42 	bl	80041cc <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001558:	f000 fb34 	bl	8001bc4 <Error_Handler>
  }
}
 800155c:	bf00      	nop
 800155e:	3750      	adds	r7, #80	; 0x50
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000

0800156c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001572:	4a16      	ldr	r2, [pc, #88]	; (80015cc <_ZL12MX_I2C1_Initv+0x60>)
 8001574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001578:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <_ZL12MX_I2C1_Initv+0x64>)
 800157a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 800158a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <_ZL12MX_I2C1_Initv+0x5c>)
 80015aa:	f001 fbd7 	bl	8002d5c <HAL_I2C_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf14      	ite	ne
 80015b4:	2301      	movne	r3, #1
 80015b6:	2300      	moveq	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80015be:	f000 fb01 	bl	8001bc4 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000094 	.word	0x20000094
 80015cc:	40005400 	.word	0x40005400
 80015d0:	00061a80 	.word	0x00061a80

080015d4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b092      	sub	sp, #72	; 0x48
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2220      	movs	r2, #32
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 fe84 	bl	800630c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 8001606:	4a46      	ldr	r2, [pc, #280]	; (8001720 <_ZL12MX_TIM1_Initv+0x14c>)
 8001608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160a:	4b44      	ldr	r3, [pc, #272]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4899;
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 8001618:	f241 3223 	movw	r2, #4899	; 0x1323
 800161c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001624:	4b3d      	ldr	r3, [pc, #244]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b3c      	ldr	r3, [pc, #240]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001630:	483a      	ldr	r0, [pc, #232]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 8001632:	f002 ffab 	bl	800458c <HAL_TIM_PWM_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf14      	ite	ne
 800163c:	2301      	movne	r3, #1
 800163e:	2300      	moveq	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001646:	f000 fabd 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001656:	4619      	mov	r1, r3
 8001658:	4830      	ldr	r0, [pc, #192]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 800165a:	f003 fcbf 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800166e:	f000 faa9 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001672:	2360      	movs	r3, #96	; 0x60
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800167e:	2300      	movs	r3, #0
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	2200      	movs	r2, #0
 8001694:	4619      	mov	r1, r3
 8001696:	4821      	ldr	r0, [pc, #132]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 8001698:	f003 f9ac 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80016ac:	f000 fa8a 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	2204      	movs	r2, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4818      	ldr	r0, [pc, #96]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 80016ba:	f003 f99b 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80016ce:	f000 fa79 	bl	8001bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	4809      	ldr	r0, [pc, #36]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 80016f6:	f003 fcdf 	bl	80050b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf14      	ite	ne
 8001700:	2301      	movne	r3, #1
 8001702:	2300      	moveq	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <_ZL12MX_TIM1_Initv+0x13a>
  {
    Error_Handler();
 800170a:	f000 fa5b 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <_ZL12MX_TIM1_Initv+0x148>)
 8001710:	f000 fd24 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001714:	bf00      	nop
 8001716:	3748      	adds	r7, #72	; 0x48
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200000e8 	.word	0x200000e8
 8001720:	40010000 	.word	0x40010000

08001724 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 8001748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800174e:	4b40      	ldr	r3, [pc, #256]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4899;
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 800175c:	f241 3223 	movw	r2, #4899	; 0x1323
 8001760:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800176e:	4838      	ldr	r0, [pc, #224]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 8001770:	f002 ff0c 	bl	800458c <HAL_TIM_PWM_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf14      	ite	ne
 800177a:	2301      	movne	r3, #1
 800177c:	2300      	moveq	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8001784:	f000 fa1e 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	4619      	mov	r1, r3
 8001796:	482e      	ldr	r0, [pc, #184]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 8001798:	f003 fc20 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 80017ac:	f000 fa0a 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b0:	2360      	movs	r3, #96	; 0x60
 80017b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4822      	ldr	r0, [pc, #136]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 80017c8:	f003 f914 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 80017dc:	f000 f9f2 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2204      	movs	r2, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	481a      	ldr	r0, [pc, #104]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 80017e8:	f003 f904 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80017fc:	f000 f9e2 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2208      	movs	r2, #8
 8001804:	4619      	mov	r1, r3
 8001806:	4812      	ldr	r0, [pc, #72]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 8001808:	f003 f8f4 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 800181c:	f000 f9d2 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	220c      	movs	r2, #12
 8001824:	4619      	mov	r1, r3
 8001826:	480a      	ldr	r0, [pc, #40]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 8001828:	f003 f8e4 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <_ZL12MX_TIM2_Initv+0x11c>
  {
    Error_Handler();
 800183c:	f000 f9c2 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <_ZL12MX_TIM2_Initv+0x12c>)
 8001842:	f000 fc8b 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000130 	.word	0x20000130

08001854 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2224      	movs	r2, #36	; 0x24
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fd52 	bl	800630c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <_ZL12MX_TIM3_Initv+0xb4>)
 8001872:	4a26      	ldr	r2, [pc, #152]	; (800190c <_ZL12MX_TIM3_Initv+0xb8>)
 8001874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <_ZL12MX_TIM3_Initv+0xb4>)
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <_ZL12MX_TIM3_Initv+0xb4>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <_ZL12MX_TIM3_Initv+0xb4>)
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <_ZL12MX_TIM3_Initv+0xb4>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <_ZL12MX_TIM3_Initv+0xb4>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001896:	2301      	movs	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800189e:	2301      	movs	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ae:	2301      	movs	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	4619      	mov	r1, r3
 80018c0:	4811      	ldr	r0, [pc, #68]	; (8001908 <_ZL12MX_TIM3_Initv+0xb4>)
 80018c2:	f002 ff63 	bl	800478c <HAL_TIM_Encoder_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 80018d6:	f000 f975 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4808      	ldr	r0, [pc, #32]	; (8001908 <_ZL12MX_TIM3_Initv+0xb4>)
 80018e8:	f003 fb78 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80018fc:	f000 f962 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000178 	.word	0x20000178
 800190c:	40000400 	.word	0x40000400

08001910 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fcf4 	bl	800630c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800192e:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001930:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001944:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001952:	2301      	movs	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800195a:	2301      	movs	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800196a:	2301      	movs	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4619      	mov	r1, r3
 800197c:	4811      	ldr	r0, [pc, #68]	; (80019c4 <_ZL12MX_TIM4_Initv+0xb4>)
 800197e:	f002 ff05 	bl	800478c <HAL_TIM_Encoder_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001992:	f000 f917 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4808      	ldr	r0, [pc, #32]	; (80019c4 <_ZL12MX_TIM4_Initv+0xb4>)
 80019a4:	f003 fb1a 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 80019b8:	f000 f904 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3730      	adds	r7, #48	; 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200001c0 	.word	0x200001c0
 80019c8:	40000800 	.word	0x40000800

080019cc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 80019f0:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <_ZL12MX_TIM5_Initv+0xcc>)
 80019f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 80019f6:	225f      	movs	r2, #95	; 0x5f
 80019f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 8001a02:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a14:	481f      	ldr	r0, [pc, #124]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 8001a16:	f002 fdb9 	bl	800458c <HAL_TIM_PWM_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8001a2a:	f000 f8cb 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a36:	f107 0320 	add.w	r3, r7, #32
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4815      	ldr	r0, [pc, #84]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 8001a3e:	f003 facd 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 8001a52:	f000 f8b7 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a56:	2360      	movs	r3, #96	; 0x60
 8001a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4809      	ldr	r0, [pc, #36]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 8001a6e:	f002 ffc1 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf14      	ite	ne
 8001a78:	2301      	movne	r3, #1
 8001a7a:	2300      	moveq	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 8001a82:	f000 f89f 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <_ZL12MX_TIM5_Initv+0xc8>)
 8001a88:	f000 fb68 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000208 	.word	0x20000208
 8001a98:	40000c00 	.word	0x40000c00

08001a9c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001aa2:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001aa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad2:	4807      	ldr	r0, [pc, #28]	; (8001af0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ad4:	f003 fb42 	bl	800515c <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001ae8:	f000 f86c 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000250 	.word	0x20000250
 8001af4:	40011000 	.word	0x40011000

08001af8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a28      	ldr	r2, [pc, #160]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_ZL12MX_GPIO_Initv+0xc0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	480a      	ldr	r0, [pc, #40]	; (8001bbc <_ZL12MX_GPIO_Initv+0xc4>)
 8001b94:	f000 ff46 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <_ZL12MX_GPIO_Initv+0xc8>)
 8001bac:	f000 ff3a 	bl	8002a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb0:	bf00      	nop
 8001bb2:	3728      	adds	r7, #40	; 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <Error_Handler+0x8>
	...

08001bd0 <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef>:
#include <stdio.h>
#include "main.h"
#include "stm32f4xx_hal.h"
#include "sorting_task.h"

sort_task::sort_task(servo_driver _servo,
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	4638      	mov	r0, r7
 8001bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
				curr_time(0),
				start_count(0),
				hi2c(_hi2c),
				red_val(0),
				green_val(0),
				blue_val(0)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2203      	movs	r2, #3
 8001bee:	609a      	str	r2, [r3, #8]
						(sort_task::state_fcn) &sort_task::state_2}),
 8001bf0:	2018      	movs	r0, #24
 8001bf2:	f004 fb35 	bl	8006260 <_Znaj>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef+0x98>)
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	3308      	adds	r3, #8
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef+0x9c>)
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef+0xa0>)
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	605a      	str	r2, [r3, #4]
				blue_val(0)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	60d9      	str	r1, [r3, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3310      	adds	r3, #16
 8001c20:	463a      	mov	r2, r7
 8001c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	61da      	str	r2, [r3, #28]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	841a      	strh	r2, [r3, #32]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	869a      	strh	r2, [r3, #52]	; 0x34
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	871a      	strh	r2, [r3, #56]	; 0x38
{

}
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	08001c75 	.word	0x08001c75
 8001c6c:	08001d31 	.word	0x08001d31
 8001c70:	08001e71 	.word	0x08001e71

08001c74 <_ZN9sort_task7state_0Ev>:

	}
}

void sort_task::state_0(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b096      	sub	sp, #88	; 0x58
 8001c78:	af04      	add	r7, sp, #16
 8001c7a:	6078      	str	r0, [r7, #4]
	// Initialization state
	// Set servo to zero
	uint8_t enable_set = 0b00001011;
 8001c7c:	230b      	movs	r3, #11
 8001c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t timing_set = 0xD5;
 8001c82:	23d5      	movs	r3, #213	; 0xd5
 8001c84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t wait_set = 0x8B;
 8001c88:	238b      	movs	r3, #139	; 0x8b
 8001c8a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	HAL_I2C_Mem_Write(hi2c, rgb_addr, enable_addr, 1, &enable_set, 1, HAL_MAX_DELAY);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	2152      	movs	r1, #82	; 0x52
 8001ca8:	f001 f99c 	bl	8002fe4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, rgb_addr, timing_addr, 1, &timing_set, 1, HAL_MAX_DELAY);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb4:	9302      	str	r3, [sp, #8]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	2281      	movs	r2, #129	; 0x81
 8001cc4:	2152      	movs	r1, #82	; 0x52
 8001cc6:	f001 f98d 	bl	8002fe4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, rgb_addr, wait_addr, 1, &wait_set, 1, HAL_MAX_DELAY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	2282      	movs	r2, #130	; 0x82
 8001ce2:	2152      	movs	r1, #82	; 0x52
 8001ce4:	f001 f97e 	bl	8002fe4 <HAL_I2C_Mem_Write>

	state = 1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
	char buffer[50] = {0};
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	222e      	movs	r2, #46	; 0x2e
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 fb06 	bl	800630c <memset>
	int32_t s4 = sprintf(buffer, "Task 2 State 0 \r\n");
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4909      	ldr	r1, [pc, #36]	; (8001d2c <_ZN9sort_task7state_0Ev+0xb8>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fc54 	bl	80065b4 <siprintf>
 8001d0c:	6478      	str	r0, [r7, #68]	; 0x44
	HAL_UART_Transmit(huart,(uint8_t*) buffer, s4, 1000);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69d8      	ldr	r0, [r3, #28]
 8001d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f107 010c 	add.w	r1, r7, #12
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	f003 fa6a 	bl	80051f6 <HAL_UART_Transmit>
}
 8001d22:	bf00      	nop
 8001d24:	3748      	adds	r7, #72	; 0x48
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	08007728 	.word	0x08007728

08001d30 <_ZN9sort_task7state_1Ev>:

void sort_task::state_1(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b098      	sub	sp, #96	; 0x60
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	6078      	str	r0, [r7, #4]
	// Sort the ball from RGB data
	uint8_t red_buff[2], green_buff[2], blue_buff[2];
	HAL_I2C_Mem_Read(hi2c, rgb_addr, red_addr, 1, red_buff, 2, HAL_MAX_DELAY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	2302      	movs	r3, #2
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	2296      	movs	r2, #150	; 0x96
 8001d50:	2152      	movs	r1, #82	; 0x52
 8001d52:	f001 fa41 	bl	80031d8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(hi2c, rgb_addr, green_addr, 1, green_buff, 2, HAL_MAX_DELAY);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d5e:	9302      	str	r3, [sp, #8]
 8001d60:	2302      	movs	r3, #2
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	2298      	movs	r2, #152	; 0x98
 8001d6e:	2152      	movs	r1, #82	; 0x52
 8001d70:	f001 fa32 	bl	80031d8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(hi2c, rgb_addr, blue_addr, 1, blue_buff, 2, HAL_MAX_DELAY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7c:	9302      	str	r3, [sp, #8]
 8001d7e:	2302      	movs	r3, #2
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	2298      	movs	r2, #152	; 0x98
 8001d8c:	2152      	movs	r1, #82	; 0x52
 8001d8e:	f001 fa23 	bl	80031d8 <HAL_I2C_Mem_Read>
	red_val =(uint16_t)(red_buff[1]<<8 | red_buff[0]);
 8001d92:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	869a      	strh	r2, [r3, #52]	; 0x34
	green_val =(uint16_t)(green_buff[1]<<8 | green_buff[0]);
 8001daa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	86da      	strh	r2, [r3, #54]	; 0x36
	blue_val =(uint16_t)(blue_buff[1]<<8 | blue_buff[0]);
 8001dc2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	871a      	strh	r2, [r3, #56]	; 0x38

	start_ticks = 1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
	servo.Set_Position(servo_angle);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f103 0210 	add.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f7fe fdfe 	bl	80009f0 <_ZN12servo_driver12Set_PositionEs>

	char buffer[50] = {0};
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	222e      	movs	r2, #46	; 0x2e
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 fa83 	bl	800630c <memset>
	int32_t s4 = sprintf(buffer, "Red: %ld Green: %ld Blue: %ld \r\n", red_val, green_val, blue_val);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e10:	4619      	mov	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001e16:	f107 000c 	add.w	r0, r7, #12
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4913      	ldr	r1, [pc, #76]	; (8001e6c <_ZN9sort_task7state_1Ev+0x13c>)
 8001e20:	f004 fbc8 	bl	80065b4 <siprintf>
 8001e24:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(huart,(uint8_t*) buffer, s4, 1000);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69d8      	ldr	r0, [r3, #28]
 8001e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	f107 010c 	add.w	r1, r7, #12
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	f003 f9de 	bl	80051f6 <HAL_UART_Transmit>

	if ((red_val > 50) && (green_val < 50) && (blue_val < 50))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001e3e:	2b32      	cmp	r3, #50	; 0x32
 8001e40:	d90d      	bls.n	8001e5e <_ZN9sort_task7state_1Ev+0x12e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e46:	2b31      	cmp	r3, #49	; 0x31
 8001e48:	d809      	bhi.n	8001e5e <_ZN9sort_task7state_1Ev+0x12e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001e4e:	2b31      	cmp	r3, #49	; 0x31
 8001e50:	d805      	bhi.n	8001e5e <_ZN9sort_task7state_1Ev+0x12e>
	{
		servo_angle = 90;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	225a      	movs	r2, #90	; 0x5a
 8001e56:	841a      	strh	r2, [r3, #32]
		state = 2;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	601a      	str	r2, [r3, #0]
	}
	HAL_Delay(100);
 8001e5e:	2064      	movs	r0, #100	; 0x64
 8001e60:	f000 fc18 	bl	8002694 <HAL_Delay>


}
 8001e64:	bf00      	nop
 8001e66:	3750      	adds	r7, #80	; 0x50
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	0800773c 	.word	0x0800773c

08001e70 <_ZN9sort_task7state_2Ev>:

void sort_task::state_2(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	if (start_ticks == 1){
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <_ZN9sort_task7state_2Ev+0x22>
		start_count =  HAL_GetTick();
 8001e80:	f000 fbfc 	bl	800267c <HAL_GetTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	859a      	strh	r2, [r3, #44]	; 0x2c
		start_ticks = 0;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	curr_time = HAL_GetTick() - start_count;	// elapsed time in the current state
 8001e92:	f000 fbf3 	bl	800267c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e9c:	1ad2      	subs	r2, r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28
	servo.Set_Position(servo_angle);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f103 0210 	add.w	r2, r3, #16
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f7fe fd9d 	bl	80009f0 <_ZN12servo_driver12Set_PositionEs>

	if (curr_time > 2000){		// Transition to sort balls after 2 seconds and return to 0 degree position
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ebe:	d90f      	bls.n	8001ee0 <_ZN9sort_task7state_2Ev+0x70>
		state = 1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
		servo_angle = 0;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	841a      	strh	r2, [r3, #32]
		servo.Set_Position(servo_angle);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f103 0210 	add.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7fe fd88 	bl	80009f0 <_ZN12servo_driver12Set_PositionEs>
	}

}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_I2C_MspInit+0x84>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d12c      	bne.n	8001fb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f7c:	2312      	movs	r3, #18
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f80:	2301      	movs	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <HAL_I2C_MspInit+0x8c>)
 8001f94:	f000 fd46 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001fa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40005400 	.word	0x40005400
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020400 	.word	0x40020400

08001fc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_TIM_PWM_MspInit+0x90>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <HAL_TIM_PWM_MspInit+0x90>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_TIM_PWM_MspInit+0x90>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ff6:	e026      	b.n	8002046 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_TIM_PWM_MspInit+0x90>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <HAL_TIM_PWM_MspInit+0x90>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_TIM_PWM_MspInit+0x90>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
}
 800201e:	e012      	b.n	8002046 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0d      	ldr	r2, [pc, #52]	; (800205c <HAL_TIM_PWM_MspInit+0x94>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10d      	bne.n	8002046 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_TIM_PWM_MspInit+0x90>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_TIM_PWM_MspInit+0x90>)
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_TIM_PWM_MspInit+0x90>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
}
 8002046:	bf00      	nop
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40010000 	.word	0x40010000
 8002058:	40023800 	.word	0x40023800
 800205c:	40000c00 	.word	0x40000c00

08002060 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a32      	ldr	r2, [pc, #200]	; (8002148 <HAL_TIM_Encoder_MspInit+0xe8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d12c      	bne.n	80020dc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a30      	ldr	r2, [pc, #192]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a29      	ldr	r2, [pc, #164]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ba:	23c0      	movs	r3, #192	; 0xc0
 80020bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ca:	2302      	movs	r3, #2
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4619      	mov	r1, r3
 80020d4:	481e      	ldr	r0, [pc, #120]	; (8002150 <HAL_TIM_Encoder_MspInit+0xf0>)
 80020d6:	f000 fca5 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020da:	e030      	b.n	800213e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <HAL_TIM_Encoder_MspInit+0xf4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d12b      	bne.n	800213e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a17      	ldr	r2, [pc, #92]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_TIM_Encoder_MspInit+0xec>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800211e:	23c0      	movs	r3, #192	; 0xc0
 8002120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800212e:	2302      	movs	r3, #2
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <HAL_TIM_Encoder_MspInit+0xf8>)
 800213a:	f000 fc73 	bl	8002a24 <HAL_GPIO_Init>
}
 800213e:	bf00      	nop
 8002140:	3730      	adds	r7, #48	; 0x30
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40000400 	.word	0x40000400
 800214c:	40023800 	.word	0x40023800
 8002150:	40020000 	.word	0x40020000
 8002154:	40000800 	.word	0x40000800
 8002158:	40020400 	.word	0x40020400

0800215c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a36      	ldr	r2, [pc, #216]	; (8002254 <HAL_TIM_MspPostInit+0xf8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d11f      	bne.n	80021be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b35      	ldr	r3, [pc, #212]	; (8002258 <HAL_TIM_MspPostInit+0xfc>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_TIM_MspPostInit+0xfc>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b32      	ldr	r3, [pc, #200]	; (8002258 <HAL_TIM_MspPostInit+0xfc>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800219a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	4829      	ldr	r0, [pc, #164]	; (800225c <HAL_TIM_MspPostInit+0x100>)
 80021b8:	f000 fc34 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80021bc:	e046      	b.n	800224c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c6:	d11e      	bne.n	8002206 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_TIM_MspPostInit+0xfc>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_TIM_MspPostInit+0xfc>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_TIM_MspPostInit+0xfc>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80021e4:	232e      	movs	r3, #46	; 0x2e
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021f4:	2301      	movs	r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4817      	ldr	r0, [pc, #92]	; (800225c <HAL_TIM_MspPostInit+0x100>)
 8002200:	f000 fc10 	bl	8002a24 <HAL_GPIO_Init>
}
 8002204:	e022      	b.n	800224c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <HAL_TIM_MspPostInit+0x104>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d11d      	bne.n	800224c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_TIM_MspPostInit+0xfc>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <HAL_TIM_MspPostInit+0xfc>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6313      	str	r3, [r2, #48]	; 0x30
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_TIM_MspPostInit+0xfc>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800222c:	2301      	movs	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800223c:	2302      	movs	r3, #2
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <HAL_TIM_MspPostInit+0x100>)
 8002248:	f000 fbec 	bl	8002a24 <HAL_GPIO_Init>
}
 800224c:	bf00      	nop
 800224e:	3728      	adds	r7, #40	; 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40010000 	.word	0x40010000
 8002258:	40023800 	.word	0x40023800
 800225c:	40020000 	.word	0x40020000
 8002260:	40000c00 	.word	0x40000c00

08002264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a2c      	ldr	r2, [pc, #176]	; (8002334 <HAL_UART_MspInit+0xd0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d152      	bne.n	800232c <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_UART_MspInit+0xd4>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4a2a      	ldr	r2, [pc, #168]	; (8002338 <HAL_UART_MspInit+0xd4>)
 8002290:	f043 0310 	orr.w	r3, r3, #16
 8002294:	6453      	str	r3, [r2, #68]	; 0x44
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_UART_MspInit+0xd4>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_UART_MspInit+0xd4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_UART_MspInit+0xd4>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_UART_MspInit+0xd4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_UART_MspInit+0xd4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <HAL_UART_MspInit+0xd4>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_UART_MspInit+0xd4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ec:	2307      	movs	r3, #7
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4811      	ldr	r0, [pc, #68]	; (800233c <HAL_UART_MspInit+0xd8>)
 80022f8:	f000 fb94 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022fc:	2308      	movs	r3, #8
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800230c:	2307      	movs	r3, #7
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	480a      	ldr	r0, [pc, #40]	; (8002340 <HAL_UART_MspInit+0xdc>)
 8002318:	f000 fb84 	bl	8002a24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	2025      	movs	r0, #37	; 0x25
 8002322:	f000 fab6 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002326:	2025      	movs	r0, #37	; 0x25
 8002328:	f000 facf 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40011000 	.word	0x40011000
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000
 8002340:	40020400 	.word	0x40020400

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <NMI_Handler+0x4>

0800234a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <MemManage_Handler+0x4>

08002356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler+0x4>

08002362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002390:	f000 f960 	bl	8002654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <USART1_IRQHandler+0x10>)
 800239e:	f002 ffed 	bl	800537c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000250 	.word	0x20000250

080023ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return 1;
 80023b0:	2301      	movs	r3, #1
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_kill>:

int _kill(int pid, int sig)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023c6:	f003 ff6f 	bl	80062a8 <__errno>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2216      	movs	r2, #22
 80023ce:	601a      	str	r2, [r3, #0]
  return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_exit>:

void _exit (int status)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ffe7 	bl	80023bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ee:	e7fe      	b.n	80023ee <_exit+0x12>

080023f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e00a      	b.n	8002418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002402:	f3af 8000 	nop.w
 8002406:	4601      	mov	r1, r0
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	b2ca      	uxtb	r2, r1
 8002410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbf0      	blt.n	8002402 <_read+0x12>
  }

  return len;
 8002420:	687b      	ldr	r3, [r7, #4]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e009      	b.n	8002450 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	60ba      	str	r2, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbf1      	blt.n	800243c <_write+0x12>
  }
  return len;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_close>:

int _close(int file)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800248a:	605a      	str	r2, [r3, #4]
  return 0;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_isatty>:

int _isatty(int file)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <_sbrk+0x5c>)
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <_sbrk+0x60>)
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <_sbrk+0x64>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <_sbrk+0x68>)
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d207      	bcs.n	800250c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024fc:	f003 fed4 	bl	80062a8 <__errno>
 8002500:	4603      	mov	r3, r0
 8002502:	220c      	movs	r2, #12
 8002504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800250a:	e009      	b.n	8002520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <_sbrk+0x64>)
 800251c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20020000 	.word	0x20020000
 800252c:	00000400 	.word	0x00000400
 8002530:	20000294 	.word	0x20000294
 8002534:	200002b0 	.word	0x200002b0

08002538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <SystemInit+0x20>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <SystemInit+0x20>)
 8002544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800255c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002560:	480d      	ldr	r0, [pc, #52]	; (8002598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002562:	490e      	ldr	r1, [pc, #56]	; (800259c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002564:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002568:	e002      	b.n	8002570 <LoopCopyDataInit>

0800256a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800256c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256e:	3304      	adds	r3, #4

08002570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002574:	d3f9      	bcc.n	800256a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002576:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002578:	4c0b      	ldr	r4, [pc, #44]	; (80025a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800257c:	e001      	b.n	8002582 <LoopFillZerobss>

0800257e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002580:	3204      	adds	r2, #4

08002582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002584:	d3fb      	bcc.n	800257e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002586:	f7ff ffd7 	bl	8002538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800258a:	f003 fe93 	bl	80062b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800258e:	f7fe fe97 	bl	80012c0 <main>
  bx  lr    
 8002592:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800259c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80025a0:	08007820 	.word	0x08007820
  ldr r2, =_sbss
 80025a4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80025a8:	200002b0 	.word	0x200002b0

080025ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <ADC_IRQHandler>
	...

080025b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <HAL_Init+0x40>)
 80025ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_Init+0x40>)
 80025c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_Init+0x40>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d8:	2003      	movs	r0, #3
 80025da:	f000 f94f 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025de:	200f      	movs	r0, #15
 80025e0:	f000 f808 	bl	80025f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e4:	f7ff fc80 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023c00 	.word	0x40023c00

080025f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_InitTick+0x54>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_InitTick+0x58>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260a:	fbb3 f3f1 	udiv	r3, r3, r1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f967 	bl	80028e6 <HAL_SYSTICK_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e00e      	b.n	8002640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b0f      	cmp	r3, #15
 8002626:	d80a      	bhi.n	800263e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002628:	2200      	movs	r2, #0
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002630:	f000 f92f 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <HAL_InitTick+0x5c>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000004 	.word	0x20000004
 800264c:	2000000c 	.word	0x2000000c
 8002650:	20000008 	.word	0x20000008

08002654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x20>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_IncTick+0x24>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4413      	add	r3, r2
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <HAL_IncTick+0x24>)
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	2000000c 	.word	0x2000000c
 8002678:	20000298 	.word	0x20000298

0800267c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return uwTick;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_GetTick+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000298 	.word	0x20000298

08002694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff ffee 	bl	800267c <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ac:	d005      	beq.n	80026ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_Delay+0x44>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ba:	bf00      	nop
 80026bc:	f7ff ffde 	bl	800267c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d8f7      	bhi.n	80026bc <HAL_Delay+0x28>
  {
  }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000000c 	.word	0x2000000c

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <__NVIC_EnableIRQ+0x38>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800285c:	f7ff ff8e 	bl	800277c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff29 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff3e 	bl	8002724 <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff8e 	bl	80027d0 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5d 	bl	800277c <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff31 	bl	8002740 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffa2 	bl	8002838 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff feb6 	bl	800267c <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d008      	beq.n	8002930 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e052      	b.n	80029d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0216 	bic.w	r2, r2, #22
 800293e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <HAL_DMA_Abort+0x62>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0208 	bic.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002980:	e013      	b.n	80029aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002982:	f7ff fe7b 	bl	800267c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b05      	cmp	r3, #5
 800298e:	d90c      	bls.n	80029aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2203      	movs	r2, #3
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e015      	b.n	80029d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e4      	bne.n	8002982 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	223f      	movs	r2, #63	; 0x3f
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e00c      	b.n	8002a16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2205      	movs	r2, #5
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e159      	b.n	8002cf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f040 8148 	bne.w	8002cee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d005      	beq.n	8002a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d130      	bne.n	8002ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 0201 	and.w	r2, r3, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d017      	beq.n	8002b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d123      	bne.n	8002b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	08da      	lsrs	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3208      	adds	r2, #8
 8002b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	220f      	movs	r2, #15
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3208      	adds	r2, #8
 8002b62:	69b9      	ldr	r1, [r7, #24]
 8002b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0203 	and.w	r2, r3, #3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a2 	beq.w	8002cee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	4a56      	ldr	r2, [pc, #344]	; (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bba:	4b54      	ldr	r3, [pc, #336]	; (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc6:	4a52      	ldr	r2, [pc, #328]	; (8002d10 <HAL_GPIO_Init+0x2ec>)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a49      	ldr	r2, [pc, #292]	; (8002d14 <HAL_GPIO_Init+0x2f0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d019      	beq.n	8002c26 <HAL_GPIO_Init+0x202>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a48      	ldr	r2, [pc, #288]	; (8002d18 <HAL_GPIO_Init+0x2f4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_GPIO_Init+0x1fe>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a47      	ldr	r2, [pc, #284]	; (8002d1c <HAL_GPIO_Init+0x2f8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00d      	beq.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a46      	ldr	r2, [pc, #280]	; (8002d20 <HAL_GPIO_Init+0x2fc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <HAL_GPIO_Init+0x1f6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a45      	ldr	r2, [pc, #276]	; (8002d24 <HAL_GPIO_Init+0x300>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_GPIO_Init+0x1f2>
 8002c12:	2304      	movs	r3, #4
 8002c14:	e008      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c16:	2307      	movs	r3, #7
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e004      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e002      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c26:	2300      	movs	r3, #0
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f002 0203 	and.w	r2, r2, #3
 8002c2e:	0092      	lsls	r2, r2, #2
 8002c30:	4093      	lsls	r3, r2
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c38:	4935      	ldr	r1, [pc, #212]	; (8002d10 <HAL_GPIO_Init+0x2ec>)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	3302      	adds	r3, #2
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c6a:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c94:	4a24      	ldr	r2, [pc, #144]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce8:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	f67f aea2 	bls.w	8002a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40013800 	.word	0x40013800
 8002d14:	40020000 	.word	0x40020000
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	40020800 	.word	0x40020800
 8002d20:	40020c00 	.word	0x40020c00
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40013c00 	.word	0x40013c00

08002d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	887b      	ldrh	r3, [r7, #2]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e001      	b.n	8002d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e12b      	b.n	8002fc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff f8d8 	bl	8001f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2224      	movs	r2, #36	; 0x24
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc0:	f001 fbbc 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8002dc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a81      	ldr	r2, [pc, #516]	; (8002fd0 <HAL_I2C_Init+0x274>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d807      	bhi.n	8002de0 <HAL_I2C_Init+0x84>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a80      	ldr	r2, [pc, #512]	; (8002fd4 <HAL_I2C_Init+0x278>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	bf94      	ite	ls
 8002dd8:	2301      	movls	r3, #1
 8002dda:	2300      	movhi	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e006      	b.n	8002dee <HAL_I2C_Init+0x92>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a7d      	ldr	r2, [pc, #500]	; (8002fd8 <HAL_I2C_Init+0x27c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	bf94      	ite	ls
 8002de8:	2301      	movls	r3, #1
 8002dea:	2300      	movhi	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0e7      	b.n	8002fc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a78      	ldr	r2, [pc, #480]	; (8002fdc <HAL_I2C_Init+0x280>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0c9b      	lsrs	r3, r3, #18
 8002e00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4a6a      	ldr	r2, [pc, #424]	; (8002fd0 <HAL_I2C_Init+0x274>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d802      	bhi.n	8002e30 <HAL_I2C_Init+0xd4>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	e009      	b.n	8002e44 <HAL_I2C_Init+0xe8>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	4a69      	ldr	r2, [pc, #420]	; (8002fe0 <HAL_I2C_Init+0x284>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	099b      	lsrs	r3, r3, #6
 8002e42:	3301      	adds	r3, #1
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	495c      	ldr	r1, [pc, #368]	; (8002fd0 <HAL_I2C_Init+0x274>)
 8002e60:	428b      	cmp	r3, r1
 8002e62:	d819      	bhi.n	8002e98 <HAL_I2C_Init+0x13c>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e59      	subs	r1, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e72:	1c59      	adds	r1, r3, #1
 8002e74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e78:	400b      	ands	r3, r1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_I2C_Init+0x138>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1e59      	subs	r1, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e92:	e051      	b.n	8002f38 <HAL_I2C_Init+0x1dc>
 8002e94:	2304      	movs	r3, #4
 8002e96:	e04f      	b.n	8002f38 <HAL_I2C_Init+0x1dc>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d111      	bne.n	8002ec4 <HAL_I2C_Init+0x168>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e58      	subs	r0, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	440b      	add	r3, r1
 8002eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e012      	b.n	8002eea <HAL_I2C_Init+0x18e>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1e58      	subs	r0, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	0099      	lsls	r1, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Init+0x196>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e022      	b.n	8002f38 <HAL_I2C_Init+0x1dc>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10e      	bne.n	8002f18 <HAL_I2C_Init+0x1bc>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1e58      	subs	r0, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	440b      	add	r3, r1
 8002f08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f16:	e00f      	b.n	8002f38 <HAL_I2C_Init+0x1dc>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e58      	subs	r0, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	0099      	lsls	r1, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	6809      	ldr	r1, [r1, #0]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6911      	ldr	r1, [r2, #16]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68d2      	ldr	r2, [r2, #12]
 8002f72:	4311      	orrs	r1, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	000186a0 	.word	0x000186a0
 8002fd4:	001e847f 	.word	0x001e847f
 8002fd8:	003d08ff 	.word	0x003d08ff
 8002fdc:	431bde83 	.word	0x431bde83
 8002fe0:	10624dd3 	.word	0x10624dd3

08002fe4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	4608      	mov	r0, r1
 8002fee:	4611      	mov	r1, r2
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	817b      	strh	r3, [r7, #10]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	813b      	strh	r3, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ffe:	f7ff fb3d 	bl	800267c <HAL_GetTick>
 8003002:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b20      	cmp	r3, #32
 800300e:	f040 80d9 	bne.w	80031c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2319      	movs	r3, #25
 8003018:	2201      	movs	r2, #1
 800301a:	496d      	ldr	r1, [pc, #436]	; (80031d0 <HAL_I2C_Mem_Write+0x1ec>)
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fc7f 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
 800302a:	e0cc      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_I2C_Mem_Write+0x56>
 8003036:	2302      	movs	r3, #2
 8003038:	e0c5      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d007      	beq.n	8003060 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2221      	movs	r2, #33	; 0x21
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a4d      	ldr	r2, [pc, #308]	; (80031d4 <HAL_I2C_Mem_Write+0x1f0>)
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030a2:	88f8      	ldrh	r0, [r7, #6]
 80030a4:	893a      	ldrh	r2, [r7, #8]
 80030a6:	8979      	ldrh	r1, [r7, #10]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4603      	mov	r3, r0
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fab6 	bl	8003624 <I2C_RequestMemoryWrite>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d052      	beq.n	8003164 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e081      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fd00 	bl	8003acc <I2C_WaitOnTXEFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00d      	beq.n	80030ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d107      	bne.n	80030ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06b      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b04      	cmp	r3, #4
 800312a:	d11b      	bne.n	8003164 <HAL_I2C_Mem_Write+0x180>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d017      	beq.n	8003164 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1aa      	bne.n	80030c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fcec 	bl	8003b4e <I2C_WaitOnBTFFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	2b04      	cmp	r3, #4
 8003182:	d107      	bne.n	8003194 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003192:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e016      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	00100002 	.word	0x00100002
 80031d4:	ffff0000 	.word	0xffff0000

080031d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	4608      	mov	r0, r1
 80031e2:	4611      	mov	r1, r2
 80031e4:	461a      	mov	r2, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	817b      	strh	r3, [r7, #10]
 80031ea:	460b      	mov	r3, r1
 80031ec:	813b      	strh	r3, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031f2:	f7ff fa43 	bl	800267c <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b20      	cmp	r3, #32
 8003202:	f040 8208 	bne.w	8003616 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2319      	movs	r3, #25
 800320c:	2201      	movs	r2, #1
 800320e:	497b      	ldr	r1, [pc, #492]	; (80033fc <HAL_I2C_Mem_Read+0x224>)
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fb85 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
 800321e:	e1fb      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_I2C_Mem_Read+0x56>
 800322a:	2302      	movs	r3, #2
 800322c:	e1f4      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d007      	beq.n	8003254 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2222      	movs	r2, #34	; 0x22
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a5b      	ldr	r2, [pc, #364]	; (8003400 <HAL_I2C_Mem_Read+0x228>)
 8003294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003296:	88f8      	ldrh	r0, [r7, #6]
 8003298:	893a      	ldrh	r2, [r7, #8]
 800329a:	8979      	ldrh	r1, [r7, #10]
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4603      	mov	r3, r0
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fa52 	bl	8003750 <I2C_RequestMemoryRead>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e1b0      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d113      	bne.n	80032e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e184      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d11b      	bne.n	8003326 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e164      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	2b02      	cmp	r3, #2
 800332c:	d11b      	bne.n	8003366 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	e144      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800337c:	e138      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	2b03      	cmp	r3, #3
 8003384:	f200 80f1 	bhi.w	800356a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	2b01      	cmp	r3, #1
 800338e:	d123      	bne.n	80033d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fc1b 	bl	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e139      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033d6:	e10b      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d14e      	bne.n	800347e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	2200      	movs	r2, #0
 80033e8:	4906      	ldr	r1, [pc, #24]	; (8003404 <HAL_I2C_Mem_Read+0x22c>)
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fa98 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e10e      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
 80033fa:	bf00      	nop
 80033fc:	00100002 	.word	0x00100002
 8003400:	ffff0000 	.word	0xffff0000
 8003404:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800347c:	e0b8      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	2200      	movs	r2, #0
 8003486:	4966      	ldr	r1, [pc, #408]	; (8003620 <HAL_I2C_Mem_Read+0x448>)
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fa49 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0bf      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	2200      	movs	r2, #0
 80034e2:	494f      	ldr	r1, [pc, #316]	; (8003620 <HAL_I2C_Mem_Read+0x448>)
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fa1b 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e091      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003568:	e042      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fb2e 	bl	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e04c      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d118      	bne.n	80035f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f aec2 	bne.w	800337e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00010004 	.word	0x00010004

08003624 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	4603      	mov	r3, r0
 8003634:	817b      	strh	r3, [r7, #10]
 8003636:	460b      	mov	r3, r1
 8003638:	813b      	strh	r3, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2200      	movs	r2, #0
 8003656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f960 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003674:	d103      	bne.n	800367e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e05f      	b.n	8003742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003690:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	6a3a      	ldr	r2, [r7, #32]
 8003696:	492d      	ldr	r1, [pc, #180]	; (800374c <I2C_RequestMemoryWrite+0x128>)
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f998 	bl	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e04c      	b.n	8003742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c0:	6a39      	ldr	r1, [r7, #32]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fa02 	bl	8003acc <I2C_WaitOnTXEFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d107      	bne.n	80036e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e02b      	b.n	8003742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f0:	893b      	ldrh	r3, [r7, #8]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	611a      	str	r2, [r3, #16]
 80036fa:	e021      	b.n	8003740 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036fc:	893b      	ldrh	r3, [r7, #8]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b29b      	uxth	r3, r3
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370c:	6a39      	ldr	r1, [r7, #32]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f9dc 	bl	8003acc <I2C_WaitOnTXEFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	2b04      	cmp	r3, #4
 8003720:	d107      	bne.n	8003732 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003730:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e005      	b.n	8003742 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	00010002 	.word	0x00010002

08003750 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4603      	mov	r3, r0
 8003760:	817b      	strh	r3, [r7, #10]
 8003762:	460b      	mov	r3, r1
 8003764:	813b      	strh	r3, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003788:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2200      	movs	r2, #0
 8003792:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f8c2 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b0:	d103      	bne.n	80037ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0aa      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037be:	897b      	ldrh	r3, [r7, #10]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	4952      	ldr	r1, [pc, #328]	; (800391c <I2C_RequestMemoryRead+0x1cc>)
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f8fa 	bl	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e097      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fc:	6a39      	ldr	r1, [r7, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f964 	bl	8003acc <I2C_WaitOnTXEFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b04      	cmp	r3, #4
 8003810:	d107      	bne.n	8003822 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e076      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800382c:	893b      	ldrh	r3, [r7, #8]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	e021      	b.n	800387c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003838:	893b      	ldrh	r3, [r7, #8]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	b29b      	uxth	r3, r3
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	6a39      	ldr	r1, [r7, #32]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f93e 	bl	8003acc <I2C_WaitOnTXEFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b04      	cmp	r3, #4
 800385c:	d107      	bne.n	800386e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e050      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003872:	893b      	ldrh	r3, [r7, #8]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387e:	6a39      	ldr	r1, [r7, #32]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f923 	bl	8003acc <I2C_WaitOnTXEFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b04      	cmp	r3, #4
 8003892:	d107      	bne.n	80038a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e035      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	2200      	movs	r2, #0
 80038c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f82b 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038de:	d103      	bne.n	80038e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e013      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038ec:	897b      	ldrh	r3, [r7, #10]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	6a3a      	ldr	r2, [r7, #32]
 8003900:	4906      	ldr	r1, [pc, #24]	; (800391c <I2C_RequestMemoryRead+0x1cc>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f863 	bl	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	00010002 	.word	0x00010002

08003920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003930:	e025      	b.n	800397e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003938:	d021      	beq.n	800397e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7fe fe9f 	bl	800267c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d116      	bne.n	800397e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e023      	b.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d10d      	bne.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	43da      	mvns	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	e00c      	b.n	80039be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d0b6      	beq.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039dc:	e051      	b.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ec:	d123      	bne.n	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f043 0204 	orr.w	r2, r3, #4
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e046      	b.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3c:	d021      	beq.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3e:	f7fe fe1d 	bl	800267c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e020      	b.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d10c      	bne.n	8003aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e00b      	b.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	43da      	mvns	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d18d      	bne.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad8:	e02d      	b.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f8ce 	bl	8003c7c <I2C_IsAcknowledgeFailed>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e02d      	b.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af0:	d021      	beq.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fe fdc3 	bl	800267c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d116      	bne.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e007      	b.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d1ca      	bne.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b5a:	e02d      	b.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f88d 	bl	8003c7c <I2C_IsAcknowledgeFailed>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e02d      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b72:	d021      	beq.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7fe fd82 	bl	800267c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d1ca      	bne.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bdc:	e042      	b.n	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d119      	bne.n	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0210 	mvn.w	r2, #16
 8003bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e029      	b.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	f7fe fd2c 	bl	800267c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f043 0220 	orr.w	r2, r3, #32
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e007      	b.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d1b5      	bne.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c92:	d11b      	bne.n	8003ccc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f043 0204 	orr.w	r2, r3, #4
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e267      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d075      	beq.n	8003de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d00c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d06:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d112      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	4b7e      	ldr	r3, [pc, #504]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x108>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d157      	bne.n	8003de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e242      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x74>
 8003d42:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a75      	ldr	r2, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x98>
 8003d5a:	4b70      	ldr	r3, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6f      	ldr	r2, [pc, #444]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b6d      	ldr	r3, [pc, #436]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6c      	ldr	r2, [pc, #432]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d74:	4b69      	ldr	r3, [pc, #420]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a68      	ldr	r2, [pc, #416]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b66      	ldr	r3, [pc, #408]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a65      	ldr	r2, [pc, #404]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe fc72 	bl	800267c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe fc6e 	bl	800267c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e207      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b5b      	ldr	r3, [pc, #364]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0xc0>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fc5e 	bl	800267c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe fc5a 	bl	800267c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1f3      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d063      	beq.n	8003eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003df2:	4b4a      	ldr	r3, [pc, #296]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d11c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b44      	ldr	r3, [pc, #272]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d116      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e1c7      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2e:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4937      	ldr	r1, [pc, #220]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	e03a      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4c:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fe fc13 	bl	800267c <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7fe fc0f 	bl	800267c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e1a8      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4925      	ldr	r1, [pc, #148]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
 8003e8c:	e015      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe fbf2 	bl	800267c <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fe fbee 	bl	800267c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e187      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d036      	beq.n	8003f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ece:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fe fbd2 	bl	800267c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003edc:	f7fe fbce 	bl	800267c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e167      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x200>
 8003efa:	e01b      	b.n	8003f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fe fbbb 	bl	800267c <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	e00e      	b.n	8003f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fe fbb7 	bl	800267c <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d907      	bls.n	8003f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e150      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470000 	.word	0x42470000
 8003f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1ea      	bne.n	8003f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8097 	beq.w	8004070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b81      	ldr	r3, [pc, #516]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	4b7d      	ldr	r3, [pc, #500]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a7c      	ldr	r2, [pc, #496]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b7a      	ldr	r3, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b77      	ldr	r3, [pc, #476]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b74      	ldr	r3, [pc, #464]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a73      	ldr	r2, [pc, #460]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe fb77 	bl	800267c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fe fb73 	bl	800267c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e10c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b6a      	ldr	r3, [pc, #424]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x2ea>
 8003fb8:	4b64      	ldr	r3, [pc, #400]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a63      	ldr	r2, [pc, #396]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	e01c      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x30c>
 8003fce:	4b5f      	ldr	r3, [pc, #380]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a5e      	ldr	r2, [pc, #376]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a5b      	ldr	r2, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fe8:	4b58      	ldr	r3, [pc, #352]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a57      	ldr	r2, [pc, #348]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	4b55      	ldr	r3, [pc, #340]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a54      	ldr	r2, [pc, #336]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 0304 	bic.w	r3, r3, #4
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fe fb38 	bl	800267c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	e00a      	b.n	8004026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004010:	f7fe fb34 	bl	800267c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0cb      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	4b49      	ldr	r3, [pc, #292]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ee      	beq.n	8004010 <HAL_RCC_OscConfig+0x334>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004034:	f7fe fb22 	bl	800267c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fe fb1e 	bl	800267c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0b5      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ee      	bne.n	800403c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	4a38      	ldr	r2, [pc, #224]	; (800414c <HAL_RCC_OscConfig+0x470>)
 800406a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a1 	beq.w	80041bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_OscConfig+0x470>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b08      	cmp	r3, #8
 8004084:	d05c      	beq.n	8004140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d141      	bne.n	8004112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe faf2 	bl	800267c <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409c:	f7fe faee 	bl	800267c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e087      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x470>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	491b      	ldr	r1, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x470>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fe fac7 	bl	800267c <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe fac3 	bl	800267c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e05c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x416>
 8004110:	e054      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fe fab0 	bl	800267c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004120:	f7fe faac 	bl	800267c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e045      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x444>
 800413e:	e03d      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e038      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 800414c:	40023800 	.word	0x40023800
 8004150:	40007000 	.word	0x40007000
 8004154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <HAL_RCC_OscConfig+0x4ec>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d028      	beq.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d121      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d11a      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004188:	4013      	ands	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004190:	4293      	cmp	r3, r2
 8004192:	d111      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	3b01      	subs	r3, #1
 80041a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800

080041cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0cc      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b68      	ldr	r3, [pc, #416]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d90c      	bls.n	8004208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b65      	ldr	r3, [pc, #404]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0b8      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a58      	ldr	r2, [pc, #352]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800422a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a52      	ldr	r2, [pc, #328]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004244:	4b50      	ldr	r3, [pc, #320]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	494d      	ldr	r1, [pc, #308]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d044      	beq.n	80042ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d119      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e07f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d003      	beq.n	800428a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004286:	2b03      	cmp	r3, #3
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e06f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e067      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 0203 	bic.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4934      	ldr	r1, [pc, #208]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042bc:	f7fe f9de 	bl	800267c <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fe f9da 	bl	800267c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e04f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 020c 	and.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1eb      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d20c      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e032      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4916      	ldr	r1, [pc, #88]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	490e      	ldr	r1, [pc, #56]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004352:	f000 f821 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	490a      	ldr	r1, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	5ccb      	ldrb	r3, [r1, r3]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	4a09      	ldr	r2, [pc, #36]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe f93e 	bl	80025f4 <HAL_InitTick>

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023c00 	.word	0x40023c00
 8004388:	40023800 	.word	0x40023800
 800438c:	08007760 	.word	0x08007760
 8004390:	20000004 	.word	0x20000004
 8004394:	20000008 	.word	0x20000008

08004398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800439c:	b090      	sub	sp, #64	; 0x40
 800439e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
 80043a4:	2300      	movs	r3, #0
 80043a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a8:	2300      	movs	r3, #0
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b0:	4b59      	ldr	r3, [pc, #356]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d00d      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x40>
 80043bc:	2b08      	cmp	r3, #8
 80043be:	f200 80a1 	bhi.w	8004504 <HAL_RCC_GetSysClockFreq+0x16c>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x34>
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ca:	e09b      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_GetSysClockFreq+0x184>)
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043d0:	e09b      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d2:	4b53      	ldr	r3, [pc, #332]	; (8004520 <HAL_RCC_GetSysClockFreq+0x188>)
 80043d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043d6:	e098      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d8:	4b4f      	ldr	r3, [pc, #316]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e2:	4b4d      	ldr	r3, [pc, #308]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d028      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ee:	4b4a      	ldr	r3, [pc, #296]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	099b      	lsrs	r3, r3, #6
 80043f4:	2200      	movs	r2, #0
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	627a      	str	r2, [r7, #36]	; 0x24
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004400:	2100      	movs	r1, #0
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_RCC_GetSysClockFreq+0x188>)
 8004404:	fb03 f201 	mul.w	r2, r3, r1
 8004408:	2300      	movs	r3, #0
 800440a:	fb00 f303 	mul.w	r3, r0, r3
 800440e:	4413      	add	r3, r2
 8004410:	4a43      	ldr	r2, [pc, #268]	; (8004520 <HAL_RCC_GetSysClockFreq+0x188>)
 8004412:	fba0 1202 	umull	r1, r2, r0, r2
 8004416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004418:	460a      	mov	r2, r1
 800441a:	62ba      	str	r2, [r7, #40]	; 0x28
 800441c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800441e:	4413      	add	r3, r2
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004424:	2200      	movs	r2, #0
 8004426:	61bb      	str	r3, [r7, #24]
 8004428:	61fa      	str	r2, [r7, #28]
 800442a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800442e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004432:	f7fb ff25 	bl	8000280 <__aeabi_uldivmod>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4613      	mov	r3, r2
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443e:	e053      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004440:	4b35      	ldr	r3, [pc, #212]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	2200      	movs	r2, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	617a      	str	r2, [r7, #20]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004452:	f04f 0b00 	mov.w	fp, #0
 8004456:	4652      	mov	r2, sl
 8004458:	465b      	mov	r3, fp
 800445a:	f04f 0000 	mov.w	r0, #0
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	0159      	lsls	r1, r3, #5
 8004464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004468:	0150      	lsls	r0, r2, #5
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	ebb2 080a 	subs.w	r8, r2, sl
 8004472:	eb63 090b 	sbc.w	r9, r3, fp
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004482:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004486:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800448a:	ebb2 0408 	subs.w	r4, r2, r8
 800448e:	eb63 0509 	sbc.w	r5, r3, r9
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	00eb      	lsls	r3, r5, #3
 800449c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044a0:	00e2      	lsls	r2, r4, #3
 80044a2:	4614      	mov	r4, r2
 80044a4:	461d      	mov	r5, r3
 80044a6:	eb14 030a 	adds.w	r3, r4, sl
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	eb45 030b 	adc.w	r3, r5, fp
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044be:	4629      	mov	r1, r5
 80044c0:	028b      	lsls	r3, r1, #10
 80044c2:	4621      	mov	r1, r4
 80044c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c8:	4621      	mov	r1, r4
 80044ca:	028a      	lsls	r2, r1, #10
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	2200      	movs	r2, #0
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	60fa      	str	r2, [r7, #12]
 80044d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044dc:	f7fb fed0 	bl	8000280 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	3301      	adds	r3, #1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80044f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004502:	e002      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetSysClockFreq+0x184>)
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800450c:	4618      	mov	r0, r3
 800450e:	3740      	adds	r7, #64	; 0x40
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
 800451c:	00f42400 	.word	0x00f42400
 8004520:	017d7840 	.word	0x017d7840

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000004 	.word	0x20000004

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004540:	f7ff fff0 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0a9b      	lsrs	r3, r3, #10
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	08007770 	.word	0x08007770

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004568:	f7ff ffdc 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0b5b      	lsrs	r3, r3, #13
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4903      	ldr	r1, [pc, #12]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	08007770 	.word	0x08007770

0800458c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e041      	b.n	8004622 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd fd08 	bl	8001fc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f000 fad4 	bl	8004b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_TIM_PWM_Start+0x24>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e022      	b.n	8004696 <HAL_TIM_PWM_Start+0x6a>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d109      	bne.n	800466a <HAL_TIM_PWM_Start+0x3e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b01      	cmp	r3, #1
 8004660:	bf14      	ite	ne
 8004662:	2301      	movne	r3, #1
 8004664:	2300      	moveq	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	e015      	b.n	8004696 <HAL_TIM_PWM_Start+0x6a>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d109      	bne.n	8004684 <HAL_TIM_PWM_Start+0x58>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e008      	b.n	8004696 <HAL_TIM_PWM_Start+0x6a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e068      	b.n	8004770 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0x82>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ac:	e013      	b.n	80046d6 <HAL_TIM_PWM_Start+0xaa>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Start+0x92>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046bc:	e00b      	b.n	80046d6 <HAL_TIM_PWM_Start+0xaa>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_PWM_Start+0xa2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046cc:	e003      	b.n	80046d6 <HAL_TIM_PWM_Start+0xaa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	6839      	ldr	r1, [r7, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fc56 	bl	8004f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a23      	ldr	r2, [pc, #140]	; (8004778 <HAL_TIM_PWM_Start+0x14c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d107      	bne.n	80046fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <HAL_TIM_PWM_Start+0x14c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_TIM_PWM_Start+0x10e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d013      	beq.n	800473a <HAL_TIM_PWM_Start+0x10e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a19      	ldr	r2, [pc, #100]	; (800477c <HAL_TIM_PWM_Start+0x150>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_TIM_PWM_Start+0x10e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a17      	ldr	r2, [pc, #92]	; (8004780 <HAL_TIM_PWM_Start+0x154>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_TIM_PWM_Start+0x10e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a16      	ldr	r2, [pc, #88]	; (8004784 <HAL_TIM_PWM_Start+0x158>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_TIM_PWM_Start+0x10e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a14      	ldr	r2, [pc, #80]	; (8004788 <HAL_TIM_PWM_Start+0x15c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d111      	bne.n	800475e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b06      	cmp	r3, #6
 800474a:	d010      	beq.n	800476e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475c:	e007      	b.n	800476e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40010000 	.word	0x40010000
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40000c00 	.word	0x40000c00
 8004788:	40014000 	.word	0x40014000

0800478c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e097      	b.n	80048d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7fd fc53 	bl	8002060 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d0:	f023 0307 	bic.w	r3, r3, #7
 80047d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f000 f9c9 	bl	8004b78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480e:	f023 0303 	bic.w	r3, r3, #3
 8004812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	4313      	orrs	r3, r2
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800482c:	f023 030c 	bic.w	r3, r3, #12
 8004830:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	4313      	orrs	r3, r2
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	011a      	lsls	r2, r3, #4
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	031b      	lsls	r3, r3, #12
 800485c:	4313      	orrs	r3, r2
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800486a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	4313      	orrs	r3, r2
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004900:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d110      	bne.n	800492a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800490e:	7b7b      	ldrb	r3, [r7, #13]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e069      	b.n	80049ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004928:	e031      	b.n	800498e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d110      	bne.n	8004952 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004930:	7bbb      	ldrb	r3, [r7, #14]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004936:	7b3b      	ldrb	r3, [r7, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d001      	beq.n	8004940 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e055      	b.n	80049ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004950:	e01d      	b.n	800498e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d108      	bne.n	800496a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004958:	7bbb      	ldrb	r3, [r7, #14]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d105      	bne.n	800496a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800495e:	7b7b      	ldrb	r3, [r7, #13]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004964:	7b3b      	ldrb	r3, [r7, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e03e      	b.n	80049ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_TIM_Encoder_Start+0xc4>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d008      	beq.n	80049ac <HAL_TIM_Encoder_Start+0xd4>
 800499a:	e00f      	b.n	80049bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2201      	movs	r2, #1
 80049a2:	2100      	movs	r1, #0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 faf3 	bl	8004f90 <TIM_CCxChannelCmd>
      break;
 80049aa:	e016      	b.n	80049da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	2104      	movs	r1, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 faeb 	bl	8004f90 <TIM_CCxChannelCmd>
      break;
 80049ba:	e00e      	b.n	80049da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2201      	movs	r2, #1
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fae3 	bl	8004f90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2201      	movs	r2, #1
 80049d0:	2104      	movs	r1, #4
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fadc 	bl	8004f90 <TIM_CCxChannelCmd>
      break;
 80049d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e0ae      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	f200 809f 	bhi.w	8004b60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a5d 	.word	0x08004a5d
 8004a2c:	08004b61 	.word	0x08004b61
 8004a30:	08004b61 	.word	0x08004b61
 8004a34:	08004b61 	.word	0x08004b61
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004b61 	.word	0x08004b61
 8004a40:	08004b61 	.word	0x08004b61
 8004a44:	08004b61 	.word	0x08004b61
 8004a48:	08004adf 	.word	0x08004adf
 8004a4c:	08004b61 	.word	0x08004b61
 8004a50:	08004b61 	.word	0x08004b61
 8004a54:	08004b61 	.word	0x08004b61
 8004a58:	08004b1f 	.word	0x08004b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f908 	bl	8004c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0204 	bic.w	r2, r2, #4
 8004a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	619a      	str	r2, [r3, #24]
      break;
 8004a9a:	e064      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f94e 	bl	8004d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6999      	ldr	r1, [r3, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	021a      	lsls	r2, r3, #8
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	619a      	str	r2, [r3, #24]
      break;
 8004adc:	e043      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 f999 	bl	8004e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0208 	orr.w	r2, r2, #8
 8004af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0204 	bic.w	r2, r2, #4
 8004b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
      break;
 8004b1c:	e023      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f9e3 	bl	8004ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69d9      	ldr	r1, [r3, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	021a      	lsls	r2, r3, #8
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	61da      	str	r2, [r3, #28]
      break;
 8004b5e:	e002      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	75fb      	strb	r3, [r7, #23]
      break;
 8004b64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a34      	ldr	r2, [pc, #208]	; (8004c5c <TIM_Base_SetConfig+0xe4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_Base_SetConfig+0x38>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b96:	d00b      	beq.n	8004bb0 <TIM_Base_SetConfig+0x38>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a31      	ldr	r2, [pc, #196]	; (8004c60 <TIM_Base_SetConfig+0xe8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_Base_SetConfig+0x38>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a30      	ldr	r2, [pc, #192]	; (8004c64 <TIM_Base_SetConfig+0xec>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_Base_SetConfig+0x38>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <TIM_Base_SetConfig+0xf0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d108      	bne.n	8004bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a25      	ldr	r2, [pc, #148]	; (8004c5c <TIM_Base_SetConfig+0xe4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01b      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd0:	d017      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <TIM_Base_SetConfig+0xe8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <TIM_Base_SetConfig+0xec>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <TIM_Base_SetConfig+0xf0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <TIM_Base_SetConfig+0xf4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <TIM_Base_SetConfig+0xf8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <TIM_Base_SetConfig+0xfc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <TIM_Base_SetConfig+0xe4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d103      	bne.n	8004c48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	615a      	str	r2, [r3, #20]
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800

08004c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0201 	bic.w	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 0302 	bic.w	r3, r3, #2
 8004cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <TIM_OC1_SetConfig+0xc8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d10c      	bne.n	8004cee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f023 0308 	bic.w	r3, r3, #8
 8004cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f023 0304 	bic.w	r3, r3, #4
 8004cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <TIM_OC1_SetConfig+0xc8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d111      	bne.n	8004d1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40010000 	.word	0x40010000

08004d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f023 0210 	bic.w	r2, r3, #16
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f023 0320 	bic.w	r3, r3, #32
 8004d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <TIM_OC2_SetConfig+0xd4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10d      	bne.n	8004dc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <TIM_OC2_SetConfig+0xd4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d113      	bne.n	8004df0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000

08004e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <TIM_OC3_SetConfig+0xd0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10d      	bne.n	8004e96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a14      	ldr	r2, [pc, #80]	; (8004eec <TIM_OC3_SetConfig+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d113      	bne.n	8004ec6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40010000 	.word	0x40010000

08004ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	031b      	lsls	r3, r3, #12
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a10      	ldr	r2, [pc, #64]	; (8004f8c <TIM_OC4_SetConfig+0x9c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d109      	bne.n	8004f64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	019b      	lsls	r3, r3, #6
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000

08004f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1a      	ldr	r2, [r3, #32]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1a      	ldr	r2, [r3, #32]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e050      	b.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1c      	ldr	r2, [pc, #112]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d018      	beq.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005040:	d013      	beq.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00e      	beq.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a16      	ldr	r2, [pc, #88]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d009      	beq.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d10c      	bne.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	4313      	orrs	r3, r2
 800507a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40014000 	.word	0x40014000

080050b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e03d      	b.n	8005150 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e03f      	b.n	80051ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fd f86e 	bl	8002264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2224      	movs	r2, #36	; 0x24
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800519e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fde9 	bl	8005d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b08a      	sub	sp, #40	; 0x28
 80051fa:	af02      	add	r7, sp, #8
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b20      	cmp	r3, #32
 8005214:	d17c      	bne.n	8005310 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_UART_Transmit+0x2c>
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e075      	b.n	8005312 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_UART_Transmit+0x3e>
 8005230:	2302      	movs	r3, #2
 8005232:	e06e      	b.n	8005312 <HAL_UART_Transmit+0x11c>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2221      	movs	r2, #33	; 0x21
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800524a:	f7fd fa17 	bl	800267c <HAL_GetTick>
 800524e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005264:	d108      	bne.n	8005278 <HAL_UART_Transmit+0x82>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	e003      	b.n	8005280 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005288:	e02a      	b.n	80052e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	2180      	movs	r1, #128	; 0x80
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fb29 	bl	80058ec <UART_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e036      	b.n	8005312 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	3302      	adds	r3, #2
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	e007      	b.n	80052d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	3301      	adds	r3, #1
 80052d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1cf      	bne.n	800528a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2200      	movs	r2, #0
 80052f2:	2140      	movs	r1, #64	; 0x40
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 faf9 	bl	80058ec <UART_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e006      	b.n	8005312 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	e000      	b.n	8005312 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	4613      	mov	r3, r2
 8005326:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b20      	cmp	r3, #32
 8005332:	d11d      	bne.n	8005370 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_UART_Receive_IT+0x26>
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e016      	b.n	8005372 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_UART_Receive_IT+0x38>
 800534e:	2302      	movs	r3, #2
 8005350:	e00f      	b.n	8005372 <HAL_UART_Receive_IT+0x58>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	461a      	mov	r2, r3
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fb2e 	bl	80059c8 <UART_Start_Receive_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	e000      	b.n	8005372 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b0ba      	sub	sp, #232	; 0xe8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10f      	bne.n	80053e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
 80053ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fc11 	bl	8005c02 <UART_Receive_IT>
      return;
 80053e0:	e256      	b.n	8005890 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80de 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
 80053ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80d1 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
 8005412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
 8005436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0202 	orr.w	r2, r3, #2
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
 800545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f043 0204 	orr.w	r2, r3, #4
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d011      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
 800547e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800548a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	f043 0208 	orr.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 81ed 	beq.w	8005886 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb9c 	bl	8005c02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <HAL_UART_IRQHandler+0x17a>
 80054ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04f      	beq.n	8005596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 faa4 	bl	8005a44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005506:	2b40      	cmp	r3, #64	; 0x40
 8005508:	d141      	bne.n	800558e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005536:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800553a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800554e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1d9      	bne.n	800550a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	2b00      	cmp	r3, #0
 800555c:	d013      	beq.n	8005586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	4a7d      	ldr	r2, [pc, #500]	; (8005758 <HAL_UART_IRQHandler+0x3dc>)
 8005564:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd fa37 	bl	80029de <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d016      	beq.n	80055a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e00e      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f99a 	bl	80058c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	e00a      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f996 	bl	80058c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	e006      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f992 	bl	80058c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055a2:	e170      	b.n	8005886 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	bf00      	nop
    return;
 80055a6:	e16e      	b.n	8005886 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	f040 814a 	bne.w	8005846 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8143 	beq.w	8005846 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 813c 	beq.w	8005846 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	f040 80b4 	bne.w	800575c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8140 	beq.w	800588a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800560e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005612:	429a      	cmp	r2, r3
 8005614:	f080 8139 	bcs.w	800588a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800561e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800562a:	f000 8088 	beq.w	800573e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800564c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800565a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800565e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1d9      	bne.n	800562e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800568a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800569e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e1      	bne.n	800567a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3314      	adds	r3, #20
 80056d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e3      	bne.n	80056b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800570c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570e:	f023 0310 	bic.w	r3, r3, #16
 8005712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005720:	65ba      	str	r2, [r7, #88]	; 0x58
 8005722:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005726:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800572e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e3      	bne.n	80056fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	4618      	mov	r0, r3
 800573a:	f7fd f8e0 	bl	80028fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005746:	b29b      	uxth	r3, r3
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	b29b      	uxth	r3, r3
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f8c0 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005754:	e099      	b.n	800588a <HAL_UART_IRQHandler+0x50e>
 8005756:	bf00      	nop
 8005758:	08005b0b 	.word	0x08005b0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005764:	b29b      	uxth	r3, r3
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 808b 	beq.w	800588e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8086 	beq.w	800588e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	330c      	adds	r3, #12
 8005788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057a6:	647a      	str	r2, [r7, #68]	; 0x44
 80057a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e3      	bne.n	8005782 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3314      	adds	r3, #20
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	623b      	str	r3, [r7, #32]
   return(result);
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3314      	adds	r3, #20
 80057da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057de:	633a      	str	r2, [r7, #48]	; 0x30
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e3      	bne.n	80057ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0310 	bic.w	r3, r3, #16
 8005816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005824:	61fa      	str	r2, [r7, #28]
 8005826:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	617b      	str	r3, [r7, #20]
   return(result);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e3      	bne.n	8005800 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f848 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005844:	e023      	b.n	800588e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <HAL_UART_IRQHandler+0x4ea>
 8005852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f967 	bl	8005b32 <UART_Transmit_IT>
    return;
 8005864:	e014      	b.n	8005890 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00e      	beq.n	8005890 <HAL_UART_IRQHandler+0x514>
 8005872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d008      	beq.n	8005890 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9a7 	bl	8005bd2 <UART_EndTransmit_IT>
    return;
 8005884:	e004      	b.n	8005890 <HAL_UART_IRQHandler+0x514>
    return;
 8005886:	bf00      	nop
 8005888:	e002      	b.n	8005890 <HAL_UART_IRQHandler+0x514>
      return;
 800588a:	bf00      	nop
 800588c:	e000      	b.n	8005890 <HAL_UART_IRQHandler+0x514>
      return;
 800588e:	bf00      	nop
  }
}
 8005890:	37e8      	adds	r7, #232	; 0xe8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop

08005898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b090      	sub	sp, #64	; 0x40
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fc:	e050      	b.n	80059a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005904:	d04c      	beq.n	80059a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <UART_WaitOnFlagUntilTimeout+0x30>
 800590c:	f7fc feb6 	bl	800267c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005918:	429a      	cmp	r2, r3
 800591a:	d241      	bcs.n	80059a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800593c:	637a      	str	r2, [r7, #52]	; 0x34
 800593e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e5      	bne.n	800591c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	63bb      	str	r3, [r7, #56]	; 0x38
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005970:	623a      	str	r2, [r7, #32]
 8005972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	61bb      	str	r3, [r7, #24]
   return(result);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e00f      	b.n	80059c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4013      	ands	r3, r2
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d09f      	beq.n	80058fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3740      	adds	r7, #64	; 0x40
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	88fa      	ldrh	r2, [r7, #6]
 80059e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2222      	movs	r2, #34	; 0x22
 80059f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0220 	orr.w	r2, r2, #32
 8005a34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b095      	sub	sp, #84	; 0x54
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a6c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e5      	bne.n	8005a4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3314      	adds	r3, #20
 8005a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e5      	bne.n	8005a80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d119      	bne.n	8005af0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 0310 	bic.w	r3, r3, #16
 8005ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005adc:	61ba      	str	r2, [r7, #24]
 8005ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6979      	ldr	r1, [r7, #20]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e5      	bne.n	8005abc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005afe:	bf00      	nop
 8005b00:	3754      	adds	r7, #84	; 0x54
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff fecb 	bl	80058c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b21      	cmp	r3, #33	; 0x21
 8005b44:	d13e      	bne.n	8005bc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4e:	d114      	bne.n	8005b7a <UART_Transmit_IT+0x48>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d110      	bne.n	8005b7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]
 8005b78:	e008      	b.n	8005b8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	1c59      	adds	r1, r3, #1
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6211      	str	r1, [r2, #32]
 8005b84:	781a      	ldrb	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10f      	bne.n	8005bc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e000      	b.n	8005bc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bc4:	2302      	movs	r3, #2
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff fe50 	bl	8005898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b08c      	sub	sp, #48	; 0x30
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b22      	cmp	r3, #34	; 0x22
 8005c14:	f040 80ab 	bne.w	8005d6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c20:	d117      	bne.n	8005c52 <UART_Receive_IT+0x50>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d113      	bne.n	8005c52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	1c9a      	adds	r2, r3, #2
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c50:	e026      	b.n	8005ca0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c64:	d007      	beq.n	8005c76 <UART_Receive_IT+0x74>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <UART_Receive_IT+0x82>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	e008      	b.n	8005c96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4619      	mov	r1, r3
 8005cae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d15a      	bne.n	8005d6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0220 	bic.w	r2, r2, #32
 8005cc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d135      	bne.n	8005d60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f023 0310 	bic.w	r3, r3, #16
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1a:	623a      	str	r2, [r7, #32]
 8005d1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	69f9      	ldr	r1, [r7, #28]
 8005d20:	6a3a      	ldr	r2, [r7, #32]
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e5      	bne.n	8005cfa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d10a      	bne.n	8005d52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff fdbb 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
 8005d5e:	e002      	b.n	8005d66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff fda3 	bl	80058ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e002      	b.n	8005d70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
  }
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3730      	adds	r7, #48	; 0x30
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d7c:	b0c0      	sub	sp, #256	; 0x100
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d94:	68d9      	ldr	r1, [r3, #12]
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	ea40 0301 	orr.w	r3, r0, r1
 8005da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dd0:	f021 010c 	bic.w	r1, r1, #12
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005dde:	430b      	orrs	r3, r1
 8005de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df2:	6999      	ldr	r1, [r3, #24]
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	ea40 0301 	orr.w	r3, r0, r1
 8005dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	4b8f      	ldr	r3, [pc, #572]	; (8006044 <UART_SetConfig+0x2cc>)
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d005      	beq.n	8005e18 <UART_SetConfig+0xa0>
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b8d      	ldr	r3, [pc, #564]	; (8006048 <UART_SetConfig+0x2d0>)
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d104      	bne.n	8005e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e18:	f7fe fba4 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e20:	e003      	b.n	8005e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e22:	f7fe fb8b 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e34:	f040 810c 	bne.w	8006050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e4a:	4622      	mov	r2, r4
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	1891      	adds	r1, r2, r2
 8005e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e52:	415b      	adcs	r3, r3
 8005e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	eb12 0801 	adds.w	r8, r2, r1
 8005e60:	4629      	mov	r1, r5
 8005e62:	eb43 0901 	adc.w	r9, r3, r1
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e7a:	4690      	mov	r8, r2
 8005e7c:	4699      	mov	r9, r3
 8005e7e:	4623      	mov	r3, r4
 8005e80:	eb18 0303 	adds.w	r3, r8, r3
 8005e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e88:	462b      	mov	r3, r5
 8005e8a:	eb49 0303 	adc.w	r3, r9, r3
 8005e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	18db      	adds	r3, r3, r3
 8005eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8005eac:	4613      	mov	r3, r2
 8005eae:	eb42 0303 	adc.w	r3, r2, r3
 8005eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ebc:	f7fa f9e0 	bl	8000280 <__aeabi_uldivmod>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4b61      	ldr	r3, [pc, #388]	; (800604c <UART_SetConfig+0x2d4>)
 8005ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	011c      	lsls	r4, r3, #4
 8005ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	464b      	mov	r3, r9
 8005ee4:	1891      	adds	r1, r2, r2
 8005ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ee8:	415b      	adcs	r3, r3
 8005eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f10:	4692      	mov	sl, r2
 8005f12:	469b      	mov	fp, r3
 8005f14:	4643      	mov	r3, r8
 8005f16:	eb1a 0303 	adds.w	r3, sl, r3
 8005f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f1e:	464b      	mov	r3, r9
 8005f20:	eb4b 0303 	adc.w	r3, fp, r3
 8005f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	18db      	adds	r3, r3, r3
 8005f40:	643b      	str	r3, [r7, #64]	; 0x40
 8005f42:	4613      	mov	r3, r2
 8005f44:	eb42 0303 	adc.w	r3, r2, r3
 8005f48:	647b      	str	r3, [r7, #68]	; 0x44
 8005f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f52:	f7fa f995 	bl	8000280 <__aeabi_uldivmod>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4b3b      	ldr	r3, [pc, #236]	; (800604c <UART_SetConfig+0x2d4>)
 8005f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	2264      	movs	r2, #100	; 0x64
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	1acb      	subs	r3, r1, r3
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f72:	4b36      	ldr	r3, [pc, #216]	; (800604c <UART_SetConfig+0x2d4>)
 8005f74:	fba3 2302 	umull	r2, r3, r3, r2
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f80:	441c      	add	r4, r3
 8005f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	1891      	adds	r1, r2, r2
 8005f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f9c:	415b      	adcs	r3, r3
 8005f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	1851      	adds	r1, r2, r1
 8005fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8005faa:	4649      	mov	r1, r9
 8005fac:	414b      	adcs	r3, r1
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	00cb      	lsls	r3, r1, #3
 8005fc0:	4651      	mov	r1, sl
 8005fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fc6:	4651      	mov	r1, sl
 8005fc8:	00ca      	lsls	r2, r1, #3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	189b      	adds	r3, r3, r2
 8005fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fd8:	464b      	mov	r3, r9
 8005fda:	460a      	mov	r2, r1
 8005fdc:	eb42 0303 	adc.w	r3, r2, r3
 8005fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	18db      	adds	r3, r3, r3
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffe:	4613      	mov	r3, r2
 8006000:	eb42 0303 	adc.w	r3, r2, r3
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800600a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800600e:	f7fa f937 	bl	8000280 <__aeabi_uldivmod>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4b0d      	ldr	r3, [pc, #52]	; (800604c <UART_SetConfig+0x2d4>)
 8006018:	fba3 1302 	umull	r1, r3, r3, r2
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	2164      	movs	r1, #100	; 0x64
 8006020:	fb01 f303 	mul.w	r3, r1, r3
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	3332      	adds	r3, #50	; 0x32
 800602a:	4a08      	ldr	r2, [pc, #32]	; (800604c <UART_SetConfig+0x2d4>)
 800602c:	fba2 2303 	umull	r2, r3, r2, r3
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	f003 0207 	and.w	r2, r3, #7
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4422      	add	r2, r4
 800603e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006040:	e105      	b.n	800624e <UART_SetConfig+0x4d6>
 8006042:	bf00      	nop
 8006044:	40011000 	.word	0x40011000
 8006048:	40011400 	.word	0x40011400
 800604c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006054:	2200      	movs	r2, #0
 8006056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800605a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800605e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006062:	4642      	mov	r2, r8
 8006064:	464b      	mov	r3, r9
 8006066:	1891      	adds	r1, r2, r2
 8006068:	6239      	str	r1, [r7, #32]
 800606a:	415b      	adcs	r3, r3
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
 800606e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006072:	4641      	mov	r1, r8
 8006074:	1854      	adds	r4, r2, r1
 8006076:	4649      	mov	r1, r9
 8006078:	eb43 0501 	adc.w	r5, r3, r1
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	00eb      	lsls	r3, r5, #3
 8006086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800608a:	00e2      	lsls	r2, r4, #3
 800608c:	4614      	mov	r4, r2
 800608e:	461d      	mov	r5, r3
 8006090:	4643      	mov	r3, r8
 8006092:	18e3      	adds	r3, r4, r3
 8006094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006098:	464b      	mov	r3, r9
 800609a:	eb45 0303 	adc.w	r3, r5, r3
 800609e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060be:	4629      	mov	r1, r5
 80060c0:	008b      	lsls	r3, r1, #2
 80060c2:	4621      	mov	r1, r4
 80060c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060c8:	4621      	mov	r1, r4
 80060ca:	008a      	lsls	r2, r1, #2
 80060cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060d0:	f7fa f8d6 	bl	8000280 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4b60      	ldr	r3, [pc, #384]	; (800625c <UART_SetConfig+0x4e4>)
 80060da:	fba3 2302 	umull	r2, r3, r3, r2
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	011c      	lsls	r4, r3, #4
 80060e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	1891      	adds	r1, r2, r2
 80060fa:	61b9      	str	r1, [r7, #24]
 80060fc:	415b      	adcs	r3, r3
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006104:	4641      	mov	r1, r8
 8006106:	1851      	adds	r1, r2, r1
 8006108:	6139      	str	r1, [r7, #16]
 800610a:	4649      	mov	r1, r9
 800610c:	414b      	adcs	r3, r1
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800611c:	4659      	mov	r1, fp
 800611e:	00cb      	lsls	r3, r1, #3
 8006120:	4651      	mov	r1, sl
 8006122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006126:	4651      	mov	r1, sl
 8006128:	00ca      	lsls	r2, r1, #3
 800612a:	4610      	mov	r0, r2
 800612c:	4619      	mov	r1, r3
 800612e:	4603      	mov	r3, r0
 8006130:	4642      	mov	r2, r8
 8006132:	189b      	adds	r3, r3, r2
 8006134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006138:	464b      	mov	r3, r9
 800613a:	460a      	mov	r2, r1
 800613c:	eb42 0303 	adc.w	r3, r2, r3
 8006140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	67bb      	str	r3, [r7, #120]	; 0x78
 800614e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800615c:	4649      	mov	r1, r9
 800615e:	008b      	lsls	r3, r1, #2
 8006160:	4641      	mov	r1, r8
 8006162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006166:	4641      	mov	r1, r8
 8006168:	008a      	lsls	r2, r1, #2
 800616a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800616e:	f7fa f887 	bl	8000280 <__aeabi_uldivmod>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4b39      	ldr	r3, [pc, #228]	; (800625c <UART_SetConfig+0x4e4>)
 8006178:	fba3 1302 	umull	r1, r3, r3, r2
 800617c:	095b      	lsrs	r3, r3, #5
 800617e:	2164      	movs	r1, #100	; 0x64
 8006180:	fb01 f303 	mul.w	r3, r1, r3
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	3332      	adds	r3, #50	; 0x32
 800618a:	4a34      	ldr	r2, [pc, #208]	; (800625c <UART_SetConfig+0x4e4>)
 800618c:	fba2 2303 	umull	r2, r3, r2, r3
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006196:	441c      	add	r4, r3
 8006198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619c:	2200      	movs	r2, #0
 800619e:	673b      	str	r3, [r7, #112]	; 0x70
 80061a0:	677a      	str	r2, [r7, #116]	; 0x74
 80061a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061a6:	4642      	mov	r2, r8
 80061a8:	464b      	mov	r3, r9
 80061aa:	1891      	adds	r1, r2, r2
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	415b      	adcs	r3, r3
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061b6:	4641      	mov	r1, r8
 80061b8:	1851      	adds	r1, r2, r1
 80061ba:	6039      	str	r1, [r7, #0]
 80061bc:	4649      	mov	r1, r9
 80061be:	414b      	adcs	r3, r1
 80061c0:	607b      	str	r3, [r7, #4]
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061ce:	4659      	mov	r1, fp
 80061d0:	00cb      	lsls	r3, r1, #3
 80061d2:	4651      	mov	r1, sl
 80061d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061d8:	4651      	mov	r1, sl
 80061da:	00ca      	lsls	r2, r1, #3
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	4603      	mov	r3, r0
 80061e2:	4642      	mov	r2, r8
 80061e4:	189b      	adds	r3, r3, r2
 80061e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80061e8:	464b      	mov	r3, r9
 80061ea:	460a      	mov	r2, r1
 80061ec:	eb42 0303 	adc.w	r3, r2, r3
 80061f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	663b      	str	r3, [r7, #96]	; 0x60
 80061fc:	667a      	str	r2, [r7, #100]	; 0x64
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800620a:	4649      	mov	r1, r9
 800620c:	008b      	lsls	r3, r1, #2
 800620e:	4641      	mov	r1, r8
 8006210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006214:	4641      	mov	r1, r8
 8006216:	008a      	lsls	r2, r1, #2
 8006218:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800621c:	f7fa f830 	bl	8000280 <__aeabi_uldivmod>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4b0d      	ldr	r3, [pc, #52]	; (800625c <UART_SetConfig+0x4e4>)
 8006226:	fba3 1302 	umull	r1, r3, r3, r2
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	2164      	movs	r1, #100	; 0x64
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	3332      	adds	r3, #50	; 0x32
 8006238:	4a08      	ldr	r2, [pc, #32]	; (800625c <UART_SetConfig+0x4e4>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	f003 020f 	and.w	r2, r3, #15
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4422      	add	r2, r4
 800624c:	609a      	str	r2, [r3, #8]
}
 800624e:	bf00      	nop
 8006250:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006254:	46bd      	mov	sp, r7
 8006256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800625a:	bf00      	nop
 800625c:	51eb851f 	.word	0x51eb851f

08006260 <_Znaj>:
 8006260:	f000 b800 	b.w	8006264 <_Znwj>

08006264 <_Znwj>:
 8006264:	2801      	cmp	r0, #1
 8006266:	bf38      	it	cc
 8006268:	2001      	movcc	r0, #1
 800626a:	b510      	push	{r4, lr}
 800626c:	4604      	mov	r4, r0
 800626e:	4620      	mov	r0, r4
 8006270:	f000 f844 	bl	80062fc <malloc>
 8006274:	b930      	cbnz	r0, 8006284 <_Znwj+0x20>
 8006276:	f000 f807 	bl	8006288 <_ZSt15get_new_handlerv>
 800627a:	b908      	cbnz	r0, 8006280 <_Znwj+0x1c>
 800627c:	f000 f80c 	bl	8006298 <abort>
 8006280:	4780      	blx	r0
 8006282:	e7f4      	b.n	800626e <_Znwj+0xa>
 8006284:	bd10      	pop	{r4, pc}
	...

08006288 <_ZSt15get_new_handlerv>:
 8006288:	4b02      	ldr	r3, [pc, #8]	; (8006294 <_ZSt15get_new_handlerv+0xc>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	f3bf 8f5b 	dmb	ish
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	2000029c 	.word	0x2000029c

08006298 <abort>:
 8006298:	b508      	push	{r3, lr}
 800629a:	2006      	movs	r0, #6
 800629c:	f000 f96e 	bl	800657c <raise>
 80062a0:	2001      	movs	r0, #1
 80062a2:	f7fc f89b 	bl	80023dc <_exit>
	...

080062a8 <__errno>:
 80062a8:	4b01      	ldr	r3, [pc, #4]	; (80062b0 <__errno+0x8>)
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	20000010 	.word	0x20000010

080062b4 <__libc_init_array>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	4d0d      	ldr	r5, [pc, #52]	; (80062ec <__libc_init_array+0x38>)
 80062b8:	4c0d      	ldr	r4, [pc, #52]	; (80062f0 <__libc_init_array+0x3c>)
 80062ba:	1b64      	subs	r4, r4, r5
 80062bc:	10a4      	asrs	r4, r4, #2
 80062be:	2600      	movs	r6, #0
 80062c0:	42a6      	cmp	r6, r4
 80062c2:	d109      	bne.n	80062d8 <__libc_init_array+0x24>
 80062c4:	4d0b      	ldr	r5, [pc, #44]	; (80062f4 <__libc_init_array+0x40>)
 80062c6:	4c0c      	ldr	r4, [pc, #48]	; (80062f8 <__libc_init_array+0x44>)
 80062c8:	f001 f9d6 	bl	8007678 <_init>
 80062cc:	1b64      	subs	r4, r4, r5
 80062ce:	10a4      	asrs	r4, r4, #2
 80062d0:	2600      	movs	r6, #0
 80062d2:	42a6      	cmp	r6, r4
 80062d4:	d105      	bne.n	80062e2 <__libc_init_array+0x2e>
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062dc:	4798      	blx	r3
 80062de:	3601      	adds	r6, #1
 80062e0:	e7ee      	b.n	80062c0 <__libc_init_array+0xc>
 80062e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e6:	4798      	blx	r3
 80062e8:	3601      	adds	r6, #1
 80062ea:	e7f2      	b.n	80062d2 <__libc_init_array+0x1e>
 80062ec:	08007818 	.word	0x08007818
 80062f0:	08007818 	.word	0x08007818
 80062f4:	08007818 	.word	0x08007818
 80062f8:	0800781c 	.word	0x0800781c

080062fc <malloc>:
 80062fc:	4b02      	ldr	r3, [pc, #8]	; (8006308 <malloc+0xc>)
 80062fe:	4601      	mov	r1, r0
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	f000 b877 	b.w	80063f4 <_malloc_r>
 8006306:	bf00      	nop
 8006308:	20000010 	.word	0x20000010

0800630c <memset>:
 800630c:	4402      	add	r2, r0
 800630e:	4603      	mov	r3, r0
 8006310:	4293      	cmp	r3, r2
 8006312:	d100      	bne.n	8006316 <memset+0xa>
 8006314:	4770      	bx	lr
 8006316:	f803 1b01 	strb.w	r1, [r3], #1
 800631a:	e7f9      	b.n	8006310 <memset+0x4>

0800631c <_free_r>:
 800631c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800631e:	2900      	cmp	r1, #0
 8006320:	d044      	beq.n	80063ac <_free_r+0x90>
 8006322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006326:	9001      	str	r0, [sp, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f1a1 0404 	sub.w	r4, r1, #4
 800632e:	bfb8      	it	lt
 8006330:	18e4      	addlt	r4, r4, r3
 8006332:	f000 fa57 	bl	80067e4 <__malloc_lock>
 8006336:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <_free_r+0x94>)
 8006338:	9801      	ldr	r0, [sp, #4]
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	b933      	cbnz	r3, 800634c <_free_r+0x30>
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	6014      	str	r4, [r2, #0]
 8006342:	b003      	add	sp, #12
 8006344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006348:	f000 ba52 	b.w	80067f0 <__malloc_unlock>
 800634c:	42a3      	cmp	r3, r4
 800634e:	d908      	bls.n	8006362 <_free_r+0x46>
 8006350:	6825      	ldr	r5, [r4, #0]
 8006352:	1961      	adds	r1, r4, r5
 8006354:	428b      	cmp	r3, r1
 8006356:	bf01      	itttt	eq
 8006358:	6819      	ldreq	r1, [r3, #0]
 800635a:	685b      	ldreq	r3, [r3, #4]
 800635c:	1949      	addeq	r1, r1, r5
 800635e:	6021      	streq	r1, [r4, #0]
 8006360:	e7ed      	b.n	800633e <_free_r+0x22>
 8006362:	461a      	mov	r2, r3
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	b10b      	cbz	r3, 800636c <_free_r+0x50>
 8006368:	42a3      	cmp	r3, r4
 800636a:	d9fa      	bls.n	8006362 <_free_r+0x46>
 800636c:	6811      	ldr	r1, [r2, #0]
 800636e:	1855      	adds	r5, r2, r1
 8006370:	42a5      	cmp	r5, r4
 8006372:	d10b      	bne.n	800638c <_free_r+0x70>
 8006374:	6824      	ldr	r4, [r4, #0]
 8006376:	4421      	add	r1, r4
 8006378:	1854      	adds	r4, r2, r1
 800637a:	42a3      	cmp	r3, r4
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	d1e0      	bne.n	8006342 <_free_r+0x26>
 8006380:	681c      	ldr	r4, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	6053      	str	r3, [r2, #4]
 8006386:	4421      	add	r1, r4
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	e7da      	b.n	8006342 <_free_r+0x26>
 800638c:	d902      	bls.n	8006394 <_free_r+0x78>
 800638e:	230c      	movs	r3, #12
 8006390:	6003      	str	r3, [r0, #0]
 8006392:	e7d6      	b.n	8006342 <_free_r+0x26>
 8006394:	6825      	ldr	r5, [r4, #0]
 8006396:	1961      	adds	r1, r4, r5
 8006398:	428b      	cmp	r3, r1
 800639a:	bf04      	itt	eq
 800639c:	6819      	ldreq	r1, [r3, #0]
 800639e:	685b      	ldreq	r3, [r3, #4]
 80063a0:	6063      	str	r3, [r4, #4]
 80063a2:	bf04      	itt	eq
 80063a4:	1949      	addeq	r1, r1, r5
 80063a6:	6021      	streq	r1, [r4, #0]
 80063a8:	6054      	str	r4, [r2, #4]
 80063aa:	e7ca      	b.n	8006342 <_free_r+0x26>
 80063ac:	b003      	add	sp, #12
 80063ae:	bd30      	pop	{r4, r5, pc}
 80063b0:	200002a0 	.word	0x200002a0

080063b4 <sbrk_aligned>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4e0e      	ldr	r6, [pc, #56]	; (80063f0 <sbrk_aligned+0x3c>)
 80063b8:	460c      	mov	r4, r1
 80063ba:	6831      	ldr	r1, [r6, #0]
 80063bc:	4605      	mov	r5, r0
 80063be:	b911      	cbnz	r1, 80063c6 <sbrk_aligned+0x12>
 80063c0:	f000 f8a4 	bl	800650c <_sbrk_r>
 80063c4:	6030      	str	r0, [r6, #0]
 80063c6:	4621      	mov	r1, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 f89f 	bl	800650c <_sbrk_r>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d00a      	beq.n	80063e8 <sbrk_aligned+0x34>
 80063d2:	1cc4      	adds	r4, r0, #3
 80063d4:	f024 0403 	bic.w	r4, r4, #3
 80063d8:	42a0      	cmp	r0, r4
 80063da:	d007      	beq.n	80063ec <sbrk_aligned+0x38>
 80063dc:	1a21      	subs	r1, r4, r0
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 f894 	bl	800650c <_sbrk_r>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d101      	bne.n	80063ec <sbrk_aligned+0x38>
 80063e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80063ec:	4620      	mov	r0, r4
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	200002a4 	.word	0x200002a4

080063f4 <_malloc_r>:
 80063f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f8:	1ccd      	adds	r5, r1, #3
 80063fa:	f025 0503 	bic.w	r5, r5, #3
 80063fe:	3508      	adds	r5, #8
 8006400:	2d0c      	cmp	r5, #12
 8006402:	bf38      	it	cc
 8006404:	250c      	movcc	r5, #12
 8006406:	2d00      	cmp	r5, #0
 8006408:	4607      	mov	r7, r0
 800640a:	db01      	blt.n	8006410 <_malloc_r+0x1c>
 800640c:	42a9      	cmp	r1, r5
 800640e:	d905      	bls.n	800641c <_malloc_r+0x28>
 8006410:	230c      	movs	r3, #12
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	2600      	movs	r6, #0
 8006416:	4630      	mov	r0, r6
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641c:	4e2e      	ldr	r6, [pc, #184]	; (80064d8 <_malloc_r+0xe4>)
 800641e:	f000 f9e1 	bl	80067e4 <__malloc_lock>
 8006422:	6833      	ldr	r3, [r6, #0]
 8006424:	461c      	mov	r4, r3
 8006426:	bb34      	cbnz	r4, 8006476 <_malloc_r+0x82>
 8006428:	4629      	mov	r1, r5
 800642a:	4638      	mov	r0, r7
 800642c:	f7ff ffc2 	bl	80063b4 <sbrk_aligned>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	4604      	mov	r4, r0
 8006434:	d14d      	bne.n	80064d2 <_malloc_r+0xde>
 8006436:	6834      	ldr	r4, [r6, #0]
 8006438:	4626      	mov	r6, r4
 800643a:	2e00      	cmp	r6, #0
 800643c:	d140      	bne.n	80064c0 <_malloc_r+0xcc>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	4631      	mov	r1, r6
 8006442:	4638      	mov	r0, r7
 8006444:	eb04 0803 	add.w	r8, r4, r3
 8006448:	f000 f860 	bl	800650c <_sbrk_r>
 800644c:	4580      	cmp	r8, r0
 800644e:	d13a      	bne.n	80064c6 <_malloc_r+0xd2>
 8006450:	6821      	ldr	r1, [r4, #0]
 8006452:	3503      	adds	r5, #3
 8006454:	1a6d      	subs	r5, r5, r1
 8006456:	f025 0503 	bic.w	r5, r5, #3
 800645a:	3508      	adds	r5, #8
 800645c:	2d0c      	cmp	r5, #12
 800645e:	bf38      	it	cc
 8006460:	250c      	movcc	r5, #12
 8006462:	4629      	mov	r1, r5
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff ffa5 	bl	80063b4 <sbrk_aligned>
 800646a:	3001      	adds	r0, #1
 800646c:	d02b      	beq.n	80064c6 <_malloc_r+0xd2>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	442b      	add	r3, r5
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	e00e      	b.n	8006494 <_malloc_r+0xa0>
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	1b52      	subs	r2, r2, r5
 800647a:	d41e      	bmi.n	80064ba <_malloc_r+0xc6>
 800647c:	2a0b      	cmp	r2, #11
 800647e:	d916      	bls.n	80064ae <_malloc_r+0xba>
 8006480:	1961      	adds	r1, r4, r5
 8006482:	42a3      	cmp	r3, r4
 8006484:	6025      	str	r5, [r4, #0]
 8006486:	bf18      	it	ne
 8006488:	6059      	strne	r1, [r3, #4]
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	bf08      	it	eq
 800648e:	6031      	streq	r1, [r6, #0]
 8006490:	5162      	str	r2, [r4, r5]
 8006492:	604b      	str	r3, [r1, #4]
 8006494:	4638      	mov	r0, r7
 8006496:	f104 060b 	add.w	r6, r4, #11
 800649a:	f000 f9a9 	bl	80067f0 <__malloc_unlock>
 800649e:	f026 0607 	bic.w	r6, r6, #7
 80064a2:	1d23      	adds	r3, r4, #4
 80064a4:	1af2      	subs	r2, r6, r3
 80064a6:	d0b6      	beq.n	8006416 <_malloc_r+0x22>
 80064a8:	1b9b      	subs	r3, r3, r6
 80064aa:	50a3      	str	r3, [r4, r2]
 80064ac:	e7b3      	b.n	8006416 <_malloc_r+0x22>
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	bf0c      	ite	eq
 80064b4:	6032      	streq	r2, [r6, #0]
 80064b6:	605a      	strne	r2, [r3, #4]
 80064b8:	e7ec      	b.n	8006494 <_malloc_r+0xa0>
 80064ba:	4623      	mov	r3, r4
 80064bc:	6864      	ldr	r4, [r4, #4]
 80064be:	e7b2      	b.n	8006426 <_malloc_r+0x32>
 80064c0:	4634      	mov	r4, r6
 80064c2:	6876      	ldr	r6, [r6, #4]
 80064c4:	e7b9      	b.n	800643a <_malloc_r+0x46>
 80064c6:	230c      	movs	r3, #12
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	4638      	mov	r0, r7
 80064cc:	f000 f990 	bl	80067f0 <__malloc_unlock>
 80064d0:	e7a1      	b.n	8006416 <_malloc_r+0x22>
 80064d2:	6025      	str	r5, [r4, #0]
 80064d4:	e7de      	b.n	8006494 <_malloc_r+0xa0>
 80064d6:	bf00      	nop
 80064d8:	200002a0 	.word	0x200002a0

080064dc <iprintf>:
 80064dc:	b40f      	push	{r0, r1, r2, r3}
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <iprintf+0x2c>)
 80064e0:	b513      	push	{r0, r1, r4, lr}
 80064e2:	681c      	ldr	r4, [r3, #0]
 80064e4:	b124      	cbz	r4, 80064f0 <iprintf+0x14>
 80064e6:	69a3      	ldr	r3, [r4, #24]
 80064e8:	b913      	cbnz	r3, 80064f0 <iprintf+0x14>
 80064ea:	4620      	mov	r0, r4
 80064ec:	f000 f8da 	bl	80066a4 <__sinit>
 80064f0:	ab05      	add	r3, sp, #20
 80064f2:	9a04      	ldr	r2, [sp, #16]
 80064f4:	68a1      	ldr	r1, [r4, #8]
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fb05 	bl	8006b08 <_vfiprintf_r>
 80064fe:	b002      	add	sp, #8
 8006500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006504:	b004      	add	sp, #16
 8006506:	4770      	bx	lr
 8006508:	20000010 	.word	0x20000010

0800650c <_sbrk_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d06      	ldr	r5, [pc, #24]	; (8006528 <_sbrk_r+0x1c>)
 8006510:	2300      	movs	r3, #0
 8006512:	4604      	mov	r4, r0
 8006514:	4608      	mov	r0, r1
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	f7fb ffd8 	bl	80024cc <_sbrk>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	d102      	bne.n	8006526 <_sbrk_r+0x1a>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	b103      	cbz	r3, 8006526 <_sbrk_r+0x1a>
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	200002ac 	.word	0x200002ac

0800652c <_raise_r>:
 800652c:	291f      	cmp	r1, #31
 800652e:	b538      	push	{r3, r4, r5, lr}
 8006530:	4604      	mov	r4, r0
 8006532:	460d      	mov	r5, r1
 8006534:	d904      	bls.n	8006540 <_raise_r+0x14>
 8006536:	2316      	movs	r3, #22
 8006538:	6003      	str	r3, [r0, #0]
 800653a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006542:	b112      	cbz	r2, 800654a <_raise_r+0x1e>
 8006544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006548:	b94b      	cbnz	r3, 800655e <_raise_r+0x32>
 800654a:	4620      	mov	r0, r4
 800654c:	f000 f830 	bl	80065b0 <_getpid_r>
 8006550:	462a      	mov	r2, r5
 8006552:	4601      	mov	r1, r0
 8006554:	4620      	mov	r0, r4
 8006556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800655a:	f000 b817 	b.w	800658c <_kill_r>
 800655e:	2b01      	cmp	r3, #1
 8006560:	d00a      	beq.n	8006578 <_raise_r+0x4c>
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	d103      	bne.n	800656e <_raise_r+0x42>
 8006566:	2316      	movs	r3, #22
 8006568:	6003      	str	r3, [r0, #0]
 800656a:	2001      	movs	r0, #1
 800656c:	e7e7      	b.n	800653e <_raise_r+0x12>
 800656e:	2400      	movs	r4, #0
 8006570:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006574:	4628      	mov	r0, r5
 8006576:	4798      	blx	r3
 8006578:	2000      	movs	r0, #0
 800657a:	e7e0      	b.n	800653e <_raise_r+0x12>

0800657c <raise>:
 800657c:	4b02      	ldr	r3, [pc, #8]	; (8006588 <raise+0xc>)
 800657e:	4601      	mov	r1, r0
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	f7ff bfd3 	b.w	800652c <_raise_r>
 8006586:	bf00      	nop
 8006588:	20000010 	.word	0x20000010

0800658c <_kill_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4d07      	ldr	r5, [pc, #28]	; (80065ac <_kill_r+0x20>)
 8006590:	2300      	movs	r3, #0
 8006592:	4604      	mov	r4, r0
 8006594:	4608      	mov	r0, r1
 8006596:	4611      	mov	r1, r2
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	f7fb ff0f 	bl	80023bc <_kill>
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	d102      	bne.n	80065a8 <_kill_r+0x1c>
 80065a2:	682b      	ldr	r3, [r5, #0]
 80065a4:	b103      	cbz	r3, 80065a8 <_kill_r+0x1c>
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	bd38      	pop	{r3, r4, r5, pc}
 80065aa:	bf00      	nop
 80065ac:	200002ac 	.word	0x200002ac

080065b0 <_getpid_r>:
 80065b0:	f7fb befc 	b.w	80023ac <_getpid>

080065b4 <siprintf>:
 80065b4:	b40e      	push	{r1, r2, r3}
 80065b6:	b500      	push	{lr}
 80065b8:	b09c      	sub	sp, #112	; 0x70
 80065ba:	ab1d      	add	r3, sp, #116	; 0x74
 80065bc:	9002      	str	r0, [sp, #8]
 80065be:	9006      	str	r0, [sp, #24]
 80065c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065c4:	4809      	ldr	r0, [pc, #36]	; (80065ec <siprintf+0x38>)
 80065c6:	9107      	str	r1, [sp, #28]
 80065c8:	9104      	str	r1, [sp, #16]
 80065ca:	4909      	ldr	r1, [pc, #36]	; (80065f0 <siprintf+0x3c>)
 80065cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d0:	9105      	str	r1, [sp, #20]
 80065d2:	6800      	ldr	r0, [r0, #0]
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	a902      	add	r1, sp, #8
 80065d8:	f000 f96c 	bl	80068b4 <_svfiprintf_r>
 80065dc:	9b02      	ldr	r3, [sp, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	b01c      	add	sp, #112	; 0x70
 80065e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065e8:	b003      	add	sp, #12
 80065ea:	4770      	bx	lr
 80065ec:	20000010 	.word	0x20000010
 80065f0:	ffff0208 	.word	0xffff0208

080065f4 <std>:
 80065f4:	2300      	movs	r3, #0
 80065f6:	b510      	push	{r4, lr}
 80065f8:	4604      	mov	r4, r0
 80065fa:	e9c0 3300 	strd	r3, r3, [r0]
 80065fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006602:	6083      	str	r3, [r0, #8]
 8006604:	8181      	strh	r1, [r0, #12]
 8006606:	6643      	str	r3, [r0, #100]	; 0x64
 8006608:	81c2      	strh	r2, [r0, #14]
 800660a:	6183      	str	r3, [r0, #24]
 800660c:	4619      	mov	r1, r3
 800660e:	2208      	movs	r2, #8
 8006610:	305c      	adds	r0, #92	; 0x5c
 8006612:	f7ff fe7b 	bl	800630c <memset>
 8006616:	4b05      	ldr	r3, [pc, #20]	; (800662c <std+0x38>)
 8006618:	6263      	str	r3, [r4, #36]	; 0x24
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <std+0x3c>)
 800661c:	62a3      	str	r3, [r4, #40]	; 0x28
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <std+0x40>)
 8006620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <std+0x44>)
 8006624:	6224      	str	r4, [r4, #32]
 8006626:	6323      	str	r3, [r4, #48]	; 0x30
 8006628:	bd10      	pop	{r4, pc}
 800662a:	bf00      	nop
 800662c:	08007091 	.word	0x08007091
 8006630:	080070b3 	.word	0x080070b3
 8006634:	080070eb 	.word	0x080070eb
 8006638:	0800710f 	.word	0x0800710f

0800663c <_cleanup_r>:
 800663c:	4901      	ldr	r1, [pc, #4]	; (8006644 <_cleanup_r+0x8>)
 800663e:	f000 b8af 	b.w	80067a0 <_fwalk_reent>
 8006642:	bf00      	nop
 8006644:	080073e9 	.word	0x080073e9

08006648 <__sfmoreglue>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	2268      	movs	r2, #104	; 0x68
 800664c:	1e4d      	subs	r5, r1, #1
 800664e:	4355      	muls	r5, r2
 8006650:	460e      	mov	r6, r1
 8006652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006656:	f7ff fecd 	bl	80063f4 <_malloc_r>
 800665a:	4604      	mov	r4, r0
 800665c:	b140      	cbz	r0, 8006670 <__sfmoreglue+0x28>
 800665e:	2100      	movs	r1, #0
 8006660:	e9c0 1600 	strd	r1, r6, [r0]
 8006664:	300c      	adds	r0, #12
 8006666:	60a0      	str	r0, [r4, #8]
 8006668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800666c:	f7ff fe4e 	bl	800630c <memset>
 8006670:	4620      	mov	r0, r4
 8006672:	bd70      	pop	{r4, r5, r6, pc}

08006674 <__sfp_lock_acquire>:
 8006674:	4801      	ldr	r0, [pc, #4]	; (800667c <__sfp_lock_acquire+0x8>)
 8006676:	f000 b8b3 	b.w	80067e0 <__retarget_lock_acquire_recursive>
 800667a:	bf00      	nop
 800667c:	200002a9 	.word	0x200002a9

08006680 <__sfp_lock_release>:
 8006680:	4801      	ldr	r0, [pc, #4]	; (8006688 <__sfp_lock_release+0x8>)
 8006682:	f000 b8ae 	b.w	80067e2 <__retarget_lock_release_recursive>
 8006686:	bf00      	nop
 8006688:	200002a9 	.word	0x200002a9

0800668c <__sinit_lock_acquire>:
 800668c:	4801      	ldr	r0, [pc, #4]	; (8006694 <__sinit_lock_acquire+0x8>)
 800668e:	f000 b8a7 	b.w	80067e0 <__retarget_lock_acquire_recursive>
 8006692:	bf00      	nop
 8006694:	200002aa 	.word	0x200002aa

08006698 <__sinit_lock_release>:
 8006698:	4801      	ldr	r0, [pc, #4]	; (80066a0 <__sinit_lock_release+0x8>)
 800669a:	f000 b8a2 	b.w	80067e2 <__retarget_lock_release_recursive>
 800669e:	bf00      	nop
 80066a0:	200002aa 	.word	0x200002aa

080066a4 <__sinit>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	4604      	mov	r4, r0
 80066a8:	f7ff fff0 	bl	800668c <__sinit_lock_acquire>
 80066ac:	69a3      	ldr	r3, [r4, #24]
 80066ae:	b11b      	cbz	r3, 80066b8 <__sinit+0x14>
 80066b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b4:	f7ff bff0 	b.w	8006698 <__sinit_lock_release>
 80066b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066bc:	6523      	str	r3, [r4, #80]	; 0x50
 80066be:	4b13      	ldr	r3, [pc, #76]	; (800670c <__sinit+0x68>)
 80066c0:	4a13      	ldr	r2, [pc, #76]	; (8006710 <__sinit+0x6c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80066c6:	42a3      	cmp	r3, r4
 80066c8:	bf04      	itt	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	61a3      	streq	r3, [r4, #24]
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 f820 	bl	8006714 <__sfp>
 80066d4:	6060      	str	r0, [r4, #4]
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 f81c 	bl	8006714 <__sfp>
 80066dc:	60a0      	str	r0, [r4, #8]
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 f818 	bl	8006714 <__sfp>
 80066e4:	2200      	movs	r2, #0
 80066e6:	60e0      	str	r0, [r4, #12]
 80066e8:	2104      	movs	r1, #4
 80066ea:	6860      	ldr	r0, [r4, #4]
 80066ec:	f7ff ff82 	bl	80065f4 <std>
 80066f0:	68a0      	ldr	r0, [r4, #8]
 80066f2:	2201      	movs	r2, #1
 80066f4:	2109      	movs	r1, #9
 80066f6:	f7ff ff7d 	bl	80065f4 <std>
 80066fa:	68e0      	ldr	r0, [r4, #12]
 80066fc:	2202      	movs	r2, #2
 80066fe:	2112      	movs	r1, #18
 8006700:	f7ff ff78 	bl	80065f4 <std>
 8006704:	2301      	movs	r3, #1
 8006706:	61a3      	str	r3, [r4, #24]
 8006708:	e7d2      	b.n	80066b0 <__sinit+0xc>
 800670a:	bf00      	nop
 800670c:	08007778 	.word	0x08007778
 8006710:	0800663d 	.word	0x0800663d

08006714 <__sfp>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	4607      	mov	r7, r0
 8006718:	f7ff ffac 	bl	8006674 <__sfp_lock_acquire>
 800671c:	4b1e      	ldr	r3, [pc, #120]	; (8006798 <__sfp+0x84>)
 800671e:	681e      	ldr	r6, [r3, #0]
 8006720:	69b3      	ldr	r3, [r6, #24]
 8006722:	b913      	cbnz	r3, 800672a <__sfp+0x16>
 8006724:	4630      	mov	r0, r6
 8006726:	f7ff ffbd 	bl	80066a4 <__sinit>
 800672a:	3648      	adds	r6, #72	; 0x48
 800672c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006730:	3b01      	subs	r3, #1
 8006732:	d503      	bpl.n	800673c <__sfp+0x28>
 8006734:	6833      	ldr	r3, [r6, #0]
 8006736:	b30b      	cbz	r3, 800677c <__sfp+0x68>
 8006738:	6836      	ldr	r6, [r6, #0]
 800673a:	e7f7      	b.n	800672c <__sfp+0x18>
 800673c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006740:	b9d5      	cbnz	r5, 8006778 <__sfp+0x64>
 8006742:	4b16      	ldr	r3, [pc, #88]	; (800679c <__sfp+0x88>)
 8006744:	60e3      	str	r3, [r4, #12]
 8006746:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800674a:	6665      	str	r5, [r4, #100]	; 0x64
 800674c:	f000 f847 	bl	80067de <__retarget_lock_init_recursive>
 8006750:	f7ff ff96 	bl	8006680 <__sfp_lock_release>
 8006754:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006758:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800675c:	6025      	str	r5, [r4, #0]
 800675e:	61a5      	str	r5, [r4, #24]
 8006760:	2208      	movs	r2, #8
 8006762:	4629      	mov	r1, r5
 8006764:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006768:	f7ff fdd0 	bl	800630c <memset>
 800676c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006770:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006774:	4620      	mov	r0, r4
 8006776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006778:	3468      	adds	r4, #104	; 0x68
 800677a:	e7d9      	b.n	8006730 <__sfp+0x1c>
 800677c:	2104      	movs	r1, #4
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff ff62 	bl	8006648 <__sfmoreglue>
 8006784:	4604      	mov	r4, r0
 8006786:	6030      	str	r0, [r6, #0]
 8006788:	2800      	cmp	r0, #0
 800678a:	d1d5      	bne.n	8006738 <__sfp+0x24>
 800678c:	f7ff ff78 	bl	8006680 <__sfp_lock_release>
 8006790:	230c      	movs	r3, #12
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	e7ee      	b.n	8006774 <__sfp+0x60>
 8006796:	bf00      	nop
 8006798:	08007778 	.word	0x08007778
 800679c:	ffff0001 	.word	0xffff0001

080067a0 <_fwalk_reent>:
 80067a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a4:	4606      	mov	r6, r0
 80067a6:	4688      	mov	r8, r1
 80067a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067ac:	2700      	movs	r7, #0
 80067ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067b2:	f1b9 0901 	subs.w	r9, r9, #1
 80067b6:	d505      	bpl.n	80067c4 <_fwalk_reent+0x24>
 80067b8:	6824      	ldr	r4, [r4, #0]
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	d1f7      	bne.n	80067ae <_fwalk_reent+0xe>
 80067be:	4638      	mov	r0, r7
 80067c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c4:	89ab      	ldrh	r3, [r5, #12]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d907      	bls.n	80067da <_fwalk_reent+0x3a>
 80067ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067ce:	3301      	adds	r3, #1
 80067d0:	d003      	beq.n	80067da <_fwalk_reent+0x3a>
 80067d2:	4629      	mov	r1, r5
 80067d4:	4630      	mov	r0, r6
 80067d6:	47c0      	blx	r8
 80067d8:	4307      	orrs	r7, r0
 80067da:	3568      	adds	r5, #104	; 0x68
 80067dc:	e7e9      	b.n	80067b2 <_fwalk_reent+0x12>

080067de <__retarget_lock_init_recursive>:
 80067de:	4770      	bx	lr

080067e0 <__retarget_lock_acquire_recursive>:
 80067e0:	4770      	bx	lr

080067e2 <__retarget_lock_release_recursive>:
 80067e2:	4770      	bx	lr

080067e4 <__malloc_lock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__malloc_lock+0x8>)
 80067e6:	f7ff bffb 	b.w	80067e0 <__retarget_lock_acquire_recursive>
 80067ea:	bf00      	nop
 80067ec:	200002a8 	.word	0x200002a8

080067f0 <__malloc_unlock>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__malloc_unlock+0x8>)
 80067f2:	f7ff bff6 	b.w	80067e2 <__retarget_lock_release_recursive>
 80067f6:	bf00      	nop
 80067f8:	200002a8 	.word	0x200002a8

080067fc <__ssputs_r>:
 80067fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	688e      	ldr	r6, [r1, #8]
 8006802:	429e      	cmp	r6, r3
 8006804:	4682      	mov	sl, r0
 8006806:	460c      	mov	r4, r1
 8006808:	4690      	mov	r8, r2
 800680a:	461f      	mov	r7, r3
 800680c:	d838      	bhi.n	8006880 <__ssputs_r+0x84>
 800680e:	898a      	ldrh	r2, [r1, #12]
 8006810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006814:	d032      	beq.n	800687c <__ssputs_r+0x80>
 8006816:	6825      	ldr	r5, [r4, #0]
 8006818:	6909      	ldr	r1, [r1, #16]
 800681a:	eba5 0901 	sub.w	r9, r5, r1
 800681e:	6965      	ldr	r5, [r4, #20]
 8006820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006828:	3301      	adds	r3, #1
 800682a:	444b      	add	r3, r9
 800682c:	106d      	asrs	r5, r5, #1
 800682e:	429d      	cmp	r5, r3
 8006830:	bf38      	it	cc
 8006832:	461d      	movcc	r5, r3
 8006834:	0553      	lsls	r3, r2, #21
 8006836:	d531      	bpl.n	800689c <__ssputs_r+0xa0>
 8006838:	4629      	mov	r1, r5
 800683a:	f7ff fddb 	bl	80063f4 <_malloc_r>
 800683e:	4606      	mov	r6, r0
 8006840:	b950      	cbnz	r0, 8006858 <__ssputs_r+0x5c>
 8006842:	230c      	movs	r3, #12
 8006844:	f8ca 3000 	str.w	r3, [sl]
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006858:	6921      	ldr	r1, [r4, #16]
 800685a:	464a      	mov	r2, r9
 800685c:	f000 fe78 	bl	8007550 <memcpy>
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	6126      	str	r6, [r4, #16]
 800686e:	6165      	str	r5, [r4, #20]
 8006870:	444e      	add	r6, r9
 8006872:	eba5 0509 	sub.w	r5, r5, r9
 8006876:	6026      	str	r6, [r4, #0]
 8006878:	60a5      	str	r5, [r4, #8]
 800687a:	463e      	mov	r6, r7
 800687c:	42be      	cmp	r6, r7
 800687e:	d900      	bls.n	8006882 <__ssputs_r+0x86>
 8006880:	463e      	mov	r6, r7
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	4632      	mov	r2, r6
 8006886:	4641      	mov	r1, r8
 8006888:	f000 fe70 	bl	800756c <memmove>
 800688c:	68a3      	ldr	r3, [r4, #8]
 800688e:	1b9b      	subs	r3, r3, r6
 8006890:	60a3      	str	r3, [r4, #8]
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	4433      	add	r3, r6
 8006896:	6023      	str	r3, [r4, #0]
 8006898:	2000      	movs	r0, #0
 800689a:	e7db      	b.n	8006854 <__ssputs_r+0x58>
 800689c:	462a      	mov	r2, r5
 800689e:	f000 fe7f 	bl	80075a0 <_realloc_r>
 80068a2:	4606      	mov	r6, r0
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d1e1      	bne.n	800686c <__ssputs_r+0x70>
 80068a8:	6921      	ldr	r1, [r4, #16]
 80068aa:	4650      	mov	r0, sl
 80068ac:	f7ff fd36 	bl	800631c <_free_r>
 80068b0:	e7c7      	b.n	8006842 <__ssputs_r+0x46>
	...

080068b4 <_svfiprintf_r>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	4698      	mov	r8, r3
 80068ba:	898b      	ldrh	r3, [r1, #12]
 80068bc:	061b      	lsls	r3, r3, #24
 80068be:	b09d      	sub	sp, #116	; 0x74
 80068c0:	4607      	mov	r7, r0
 80068c2:	460d      	mov	r5, r1
 80068c4:	4614      	mov	r4, r2
 80068c6:	d50e      	bpl.n	80068e6 <_svfiprintf_r+0x32>
 80068c8:	690b      	ldr	r3, [r1, #16]
 80068ca:	b963      	cbnz	r3, 80068e6 <_svfiprintf_r+0x32>
 80068cc:	2140      	movs	r1, #64	; 0x40
 80068ce:	f7ff fd91 	bl	80063f4 <_malloc_r>
 80068d2:	6028      	str	r0, [r5, #0]
 80068d4:	6128      	str	r0, [r5, #16]
 80068d6:	b920      	cbnz	r0, 80068e2 <_svfiprintf_r+0x2e>
 80068d8:	230c      	movs	r3, #12
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068e0:	e0d1      	b.n	8006a86 <_svfiprintf_r+0x1d2>
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	616b      	str	r3, [r5, #20]
 80068e6:	2300      	movs	r3, #0
 80068e8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ea:	2320      	movs	r3, #32
 80068ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80068f4:	2330      	movs	r3, #48	; 0x30
 80068f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006aa0 <_svfiprintf_r+0x1ec>
 80068fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068fe:	f04f 0901 	mov.w	r9, #1
 8006902:	4623      	mov	r3, r4
 8006904:	469a      	mov	sl, r3
 8006906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800690a:	b10a      	cbz	r2, 8006910 <_svfiprintf_r+0x5c>
 800690c:	2a25      	cmp	r2, #37	; 0x25
 800690e:	d1f9      	bne.n	8006904 <_svfiprintf_r+0x50>
 8006910:	ebba 0b04 	subs.w	fp, sl, r4
 8006914:	d00b      	beq.n	800692e <_svfiprintf_r+0x7a>
 8006916:	465b      	mov	r3, fp
 8006918:	4622      	mov	r2, r4
 800691a:	4629      	mov	r1, r5
 800691c:	4638      	mov	r0, r7
 800691e:	f7ff ff6d 	bl	80067fc <__ssputs_r>
 8006922:	3001      	adds	r0, #1
 8006924:	f000 80aa 	beq.w	8006a7c <_svfiprintf_r+0x1c8>
 8006928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800692a:	445a      	add	r2, fp
 800692c:	9209      	str	r2, [sp, #36]	; 0x24
 800692e:	f89a 3000 	ldrb.w	r3, [sl]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 80a2 	beq.w	8006a7c <_svfiprintf_r+0x1c8>
 8006938:	2300      	movs	r3, #0
 800693a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800693e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006942:	f10a 0a01 	add.w	sl, sl, #1
 8006946:	9304      	str	r3, [sp, #16]
 8006948:	9307      	str	r3, [sp, #28]
 800694a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800694e:	931a      	str	r3, [sp, #104]	; 0x68
 8006950:	4654      	mov	r4, sl
 8006952:	2205      	movs	r2, #5
 8006954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006958:	4851      	ldr	r0, [pc, #324]	; (8006aa0 <_svfiprintf_r+0x1ec>)
 800695a:	f7f9 fc41 	bl	80001e0 <memchr>
 800695e:	9a04      	ldr	r2, [sp, #16]
 8006960:	b9d8      	cbnz	r0, 800699a <_svfiprintf_r+0xe6>
 8006962:	06d0      	lsls	r0, r2, #27
 8006964:	bf44      	itt	mi
 8006966:	2320      	movmi	r3, #32
 8006968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800696c:	0711      	lsls	r1, r2, #28
 800696e:	bf44      	itt	mi
 8006970:	232b      	movmi	r3, #43	; 0x2b
 8006972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006976:	f89a 3000 	ldrb.w	r3, [sl]
 800697a:	2b2a      	cmp	r3, #42	; 0x2a
 800697c:	d015      	beq.n	80069aa <_svfiprintf_r+0xf6>
 800697e:	9a07      	ldr	r2, [sp, #28]
 8006980:	4654      	mov	r4, sl
 8006982:	2000      	movs	r0, #0
 8006984:	f04f 0c0a 	mov.w	ip, #10
 8006988:	4621      	mov	r1, r4
 800698a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800698e:	3b30      	subs	r3, #48	; 0x30
 8006990:	2b09      	cmp	r3, #9
 8006992:	d94e      	bls.n	8006a32 <_svfiprintf_r+0x17e>
 8006994:	b1b0      	cbz	r0, 80069c4 <_svfiprintf_r+0x110>
 8006996:	9207      	str	r2, [sp, #28]
 8006998:	e014      	b.n	80069c4 <_svfiprintf_r+0x110>
 800699a:	eba0 0308 	sub.w	r3, r0, r8
 800699e:	fa09 f303 	lsl.w	r3, r9, r3
 80069a2:	4313      	orrs	r3, r2
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	46a2      	mov	sl, r4
 80069a8:	e7d2      	b.n	8006950 <_svfiprintf_r+0x9c>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	1d19      	adds	r1, r3, #4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	9103      	str	r1, [sp, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfbb      	ittet	lt
 80069b6:	425b      	neglt	r3, r3
 80069b8:	f042 0202 	orrlt.w	r2, r2, #2
 80069bc:	9307      	strge	r3, [sp, #28]
 80069be:	9307      	strlt	r3, [sp, #28]
 80069c0:	bfb8      	it	lt
 80069c2:	9204      	strlt	r2, [sp, #16]
 80069c4:	7823      	ldrb	r3, [r4, #0]
 80069c6:	2b2e      	cmp	r3, #46	; 0x2e
 80069c8:	d10c      	bne.n	80069e4 <_svfiprintf_r+0x130>
 80069ca:	7863      	ldrb	r3, [r4, #1]
 80069cc:	2b2a      	cmp	r3, #42	; 0x2a
 80069ce:	d135      	bne.n	8006a3c <_svfiprintf_r+0x188>
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	1d1a      	adds	r2, r3, #4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	9203      	str	r2, [sp, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bfb8      	it	lt
 80069dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069e0:	3402      	adds	r4, #2
 80069e2:	9305      	str	r3, [sp, #20]
 80069e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ab0 <_svfiprintf_r+0x1fc>
 80069e8:	7821      	ldrb	r1, [r4, #0]
 80069ea:	2203      	movs	r2, #3
 80069ec:	4650      	mov	r0, sl
 80069ee:	f7f9 fbf7 	bl	80001e0 <memchr>
 80069f2:	b140      	cbz	r0, 8006a06 <_svfiprintf_r+0x152>
 80069f4:	2340      	movs	r3, #64	; 0x40
 80069f6:	eba0 000a 	sub.w	r0, r0, sl
 80069fa:	fa03 f000 	lsl.w	r0, r3, r0
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	4303      	orrs	r3, r0
 8006a02:	3401      	adds	r4, #1
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0a:	4826      	ldr	r0, [pc, #152]	; (8006aa4 <_svfiprintf_r+0x1f0>)
 8006a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a10:	2206      	movs	r2, #6
 8006a12:	f7f9 fbe5 	bl	80001e0 <memchr>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d038      	beq.n	8006a8c <_svfiprintf_r+0x1d8>
 8006a1a:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <_svfiprintf_r+0x1f4>)
 8006a1c:	bb1b      	cbnz	r3, 8006a66 <_svfiprintf_r+0x1b2>
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	3307      	adds	r3, #7
 8006a22:	f023 0307 	bic.w	r3, r3, #7
 8006a26:	3308      	adds	r3, #8
 8006a28:	9303      	str	r3, [sp, #12]
 8006a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2c:	4433      	add	r3, r6
 8006a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a30:	e767      	b.n	8006902 <_svfiprintf_r+0x4e>
 8006a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a36:	460c      	mov	r4, r1
 8006a38:	2001      	movs	r0, #1
 8006a3a:	e7a5      	b.n	8006988 <_svfiprintf_r+0xd4>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	3401      	adds	r4, #1
 8006a40:	9305      	str	r3, [sp, #20]
 8006a42:	4619      	mov	r1, r3
 8006a44:	f04f 0c0a 	mov.w	ip, #10
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a4e:	3a30      	subs	r2, #48	; 0x30
 8006a50:	2a09      	cmp	r2, #9
 8006a52:	d903      	bls.n	8006a5c <_svfiprintf_r+0x1a8>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0c5      	beq.n	80069e4 <_svfiprintf_r+0x130>
 8006a58:	9105      	str	r1, [sp, #20]
 8006a5a:	e7c3      	b.n	80069e4 <_svfiprintf_r+0x130>
 8006a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a60:	4604      	mov	r4, r0
 8006a62:	2301      	movs	r3, #1
 8006a64:	e7f0      	b.n	8006a48 <_svfiprintf_r+0x194>
 8006a66:	ab03      	add	r3, sp, #12
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <_svfiprintf_r+0x1f8>)
 8006a6e:	a904      	add	r1, sp, #16
 8006a70:	4638      	mov	r0, r7
 8006a72:	f3af 8000 	nop.w
 8006a76:	1c42      	adds	r2, r0, #1
 8006a78:	4606      	mov	r6, r0
 8006a7a:	d1d6      	bne.n	8006a2a <_svfiprintf_r+0x176>
 8006a7c:	89ab      	ldrh	r3, [r5, #12]
 8006a7e:	065b      	lsls	r3, r3, #25
 8006a80:	f53f af2c 	bmi.w	80068dc <_svfiprintf_r+0x28>
 8006a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a86:	b01d      	add	sp, #116	; 0x74
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	ab03      	add	r3, sp, #12
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	462a      	mov	r2, r5
 8006a92:	4b06      	ldr	r3, [pc, #24]	; (8006aac <_svfiprintf_r+0x1f8>)
 8006a94:	a904      	add	r1, sp, #16
 8006a96:	4638      	mov	r0, r7
 8006a98:	f000 f9d4 	bl	8006e44 <_printf_i>
 8006a9c:	e7eb      	b.n	8006a76 <_svfiprintf_r+0x1c2>
 8006a9e:	bf00      	nop
 8006aa0:	080077dc 	.word	0x080077dc
 8006aa4:	080077e6 	.word	0x080077e6
 8006aa8:	00000000 	.word	0x00000000
 8006aac:	080067fd 	.word	0x080067fd
 8006ab0:	080077e2 	.word	0x080077e2

08006ab4 <__sfputc_r>:
 8006ab4:	6893      	ldr	r3, [r2, #8]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	b410      	push	{r4}
 8006abc:	6093      	str	r3, [r2, #8]
 8006abe:	da08      	bge.n	8006ad2 <__sfputc_r+0x1e>
 8006ac0:	6994      	ldr	r4, [r2, #24]
 8006ac2:	42a3      	cmp	r3, r4
 8006ac4:	db01      	blt.n	8006aca <__sfputc_r+0x16>
 8006ac6:	290a      	cmp	r1, #10
 8006ac8:	d103      	bne.n	8006ad2 <__sfputc_r+0x1e>
 8006aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ace:	f000 bb23 	b.w	8007118 <__swbuf_r>
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	1c58      	adds	r0, r3, #1
 8006ad6:	6010      	str	r0, [r2, #0]
 8006ad8:	7019      	strb	r1, [r3, #0]
 8006ada:	4608      	mov	r0, r1
 8006adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <__sfputs_r>:
 8006ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	460f      	mov	r7, r1
 8006ae8:	4614      	mov	r4, r2
 8006aea:	18d5      	adds	r5, r2, r3
 8006aec:	42ac      	cmp	r4, r5
 8006aee:	d101      	bne.n	8006af4 <__sfputs_r+0x12>
 8006af0:	2000      	movs	r0, #0
 8006af2:	e007      	b.n	8006b04 <__sfputs_r+0x22>
 8006af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af8:	463a      	mov	r2, r7
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7ff ffda 	bl	8006ab4 <__sfputc_r>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d1f3      	bne.n	8006aec <__sfputs_r+0xa>
 8006b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b08 <_vfiprintf_r>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	460d      	mov	r5, r1
 8006b0e:	b09d      	sub	sp, #116	; 0x74
 8006b10:	4614      	mov	r4, r2
 8006b12:	4698      	mov	r8, r3
 8006b14:	4606      	mov	r6, r0
 8006b16:	b118      	cbz	r0, 8006b20 <_vfiprintf_r+0x18>
 8006b18:	6983      	ldr	r3, [r0, #24]
 8006b1a:	b90b      	cbnz	r3, 8006b20 <_vfiprintf_r+0x18>
 8006b1c:	f7ff fdc2 	bl	80066a4 <__sinit>
 8006b20:	4b89      	ldr	r3, [pc, #548]	; (8006d48 <_vfiprintf_r+0x240>)
 8006b22:	429d      	cmp	r5, r3
 8006b24:	d11b      	bne.n	8006b5e <_vfiprintf_r+0x56>
 8006b26:	6875      	ldr	r5, [r6, #4]
 8006b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b2a:	07d9      	lsls	r1, r3, #31
 8006b2c:	d405      	bmi.n	8006b3a <_vfiprintf_r+0x32>
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	059a      	lsls	r2, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_vfiprintf_r+0x32>
 8006b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b36:	f7ff fe53 	bl	80067e0 <__retarget_lock_acquire_recursive>
 8006b3a:	89ab      	ldrh	r3, [r5, #12]
 8006b3c:	071b      	lsls	r3, r3, #28
 8006b3e:	d501      	bpl.n	8006b44 <_vfiprintf_r+0x3c>
 8006b40:	692b      	ldr	r3, [r5, #16]
 8006b42:	b9eb      	cbnz	r3, 8006b80 <_vfiprintf_r+0x78>
 8006b44:	4629      	mov	r1, r5
 8006b46:	4630      	mov	r0, r6
 8006b48:	f000 fb4a 	bl	80071e0 <__swsetup_r>
 8006b4c:	b1c0      	cbz	r0, 8006b80 <_vfiprintf_r+0x78>
 8006b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b50:	07dc      	lsls	r4, r3, #31
 8006b52:	d50e      	bpl.n	8006b72 <_vfiprintf_r+0x6a>
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b58:	b01d      	add	sp, #116	; 0x74
 8006b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5e:	4b7b      	ldr	r3, [pc, #492]	; (8006d4c <_vfiprintf_r+0x244>)
 8006b60:	429d      	cmp	r5, r3
 8006b62:	d101      	bne.n	8006b68 <_vfiprintf_r+0x60>
 8006b64:	68b5      	ldr	r5, [r6, #8]
 8006b66:	e7df      	b.n	8006b28 <_vfiprintf_r+0x20>
 8006b68:	4b79      	ldr	r3, [pc, #484]	; (8006d50 <_vfiprintf_r+0x248>)
 8006b6a:	429d      	cmp	r5, r3
 8006b6c:	bf08      	it	eq
 8006b6e:	68f5      	ldreq	r5, [r6, #12]
 8006b70:	e7da      	b.n	8006b28 <_vfiprintf_r+0x20>
 8006b72:	89ab      	ldrh	r3, [r5, #12]
 8006b74:	0598      	lsls	r0, r3, #22
 8006b76:	d4ed      	bmi.n	8006b54 <_vfiprintf_r+0x4c>
 8006b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b7a:	f7ff fe32 	bl	80067e2 <__retarget_lock_release_recursive>
 8006b7e:	e7e9      	b.n	8006b54 <_vfiprintf_r+0x4c>
 8006b80:	2300      	movs	r3, #0
 8006b82:	9309      	str	r3, [sp, #36]	; 0x24
 8006b84:	2320      	movs	r3, #32
 8006b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b8e:	2330      	movs	r3, #48	; 0x30
 8006b90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d54 <_vfiprintf_r+0x24c>
 8006b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b98:	f04f 0901 	mov.w	r9, #1
 8006b9c:	4623      	mov	r3, r4
 8006b9e:	469a      	mov	sl, r3
 8006ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ba4:	b10a      	cbz	r2, 8006baa <_vfiprintf_r+0xa2>
 8006ba6:	2a25      	cmp	r2, #37	; 0x25
 8006ba8:	d1f9      	bne.n	8006b9e <_vfiprintf_r+0x96>
 8006baa:	ebba 0b04 	subs.w	fp, sl, r4
 8006bae:	d00b      	beq.n	8006bc8 <_vfiprintf_r+0xc0>
 8006bb0:	465b      	mov	r3, fp
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7ff ff93 	bl	8006ae2 <__sfputs_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f000 80aa 	beq.w	8006d16 <_vfiprintf_r+0x20e>
 8006bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc4:	445a      	add	r2, fp
 8006bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80a2 	beq.w	8006d16 <_vfiprintf_r+0x20e>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bdc:	f10a 0a01 	add.w	sl, sl, #1
 8006be0:	9304      	str	r3, [sp, #16]
 8006be2:	9307      	str	r3, [sp, #28]
 8006be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006be8:	931a      	str	r3, [sp, #104]	; 0x68
 8006bea:	4654      	mov	r4, sl
 8006bec:	2205      	movs	r2, #5
 8006bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf2:	4858      	ldr	r0, [pc, #352]	; (8006d54 <_vfiprintf_r+0x24c>)
 8006bf4:	f7f9 faf4 	bl	80001e0 <memchr>
 8006bf8:	9a04      	ldr	r2, [sp, #16]
 8006bfa:	b9d8      	cbnz	r0, 8006c34 <_vfiprintf_r+0x12c>
 8006bfc:	06d1      	lsls	r1, r2, #27
 8006bfe:	bf44      	itt	mi
 8006c00:	2320      	movmi	r3, #32
 8006c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c06:	0713      	lsls	r3, r2, #28
 8006c08:	bf44      	itt	mi
 8006c0a:	232b      	movmi	r3, #43	; 0x2b
 8006c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c10:	f89a 3000 	ldrb.w	r3, [sl]
 8006c14:	2b2a      	cmp	r3, #42	; 0x2a
 8006c16:	d015      	beq.n	8006c44 <_vfiprintf_r+0x13c>
 8006c18:	9a07      	ldr	r2, [sp, #28]
 8006c1a:	4654      	mov	r4, sl
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f04f 0c0a 	mov.w	ip, #10
 8006c22:	4621      	mov	r1, r4
 8006c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c28:	3b30      	subs	r3, #48	; 0x30
 8006c2a:	2b09      	cmp	r3, #9
 8006c2c:	d94e      	bls.n	8006ccc <_vfiprintf_r+0x1c4>
 8006c2e:	b1b0      	cbz	r0, 8006c5e <_vfiprintf_r+0x156>
 8006c30:	9207      	str	r2, [sp, #28]
 8006c32:	e014      	b.n	8006c5e <_vfiprintf_r+0x156>
 8006c34:	eba0 0308 	sub.w	r3, r0, r8
 8006c38:	fa09 f303 	lsl.w	r3, r9, r3
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	46a2      	mov	sl, r4
 8006c42:	e7d2      	b.n	8006bea <_vfiprintf_r+0xe2>
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	1d19      	adds	r1, r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	9103      	str	r1, [sp, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bfbb      	ittet	lt
 8006c50:	425b      	neglt	r3, r3
 8006c52:	f042 0202 	orrlt.w	r2, r2, #2
 8006c56:	9307      	strge	r3, [sp, #28]
 8006c58:	9307      	strlt	r3, [sp, #28]
 8006c5a:	bfb8      	it	lt
 8006c5c:	9204      	strlt	r2, [sp, #16]
 8006c5e:	7823      	ldrb	r3, [r4, #0]
 8006c60:	2b2e      	cmp	r3, #46	; 0x2e
 8006c62:	d10c      	bne.n	8006c7e <_vfiprintf_r+0x176>
 8006c64:	7863      	ldrb	r3, [r4, #1]
 8006c66:	2b2a      	cmp	r3, #42	; 0x2a
 8006c68:	d135      	bne.n	8006cd6 <_vfiprintf_r+0x1ce>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	1d1a      	adds	r2, r3, #4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	9203      	str	r2, [sp, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bfb8      	it	lt
 8006c76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c7a:	3402      	adds	r4, #2
 8006c7c:	9305      	str	r3, [sp, #20]
 8006c7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d64 <_vfiprintf_r+0x25c>
 8006c82:	7821      	ldrb	r1, [r4, #0]
 8006c84:	2203      	movs	r2, #3
 8006c86:	4650      	mov	r0, sl
 8006c88:	f7f9 faaa 	bl	80001e0 <memchr>
 8006c8c:	b140      	cbz	r0, 8006ca0 <_vfiprintf_r+0x198>
 8006c8e:	2340      	movs	r3, #64	; 0x40
 8006c90:	eba0 000a 	sub.w	r0, r0, sl
 8006c94:	fa03 f000 	lsl.w	r0, r3, r0
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	4303      	orrs	r3, r0
 8006c9c:	3401      	adds	r4, #1
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca4:	482c      	ldr	r0, [pc, #176]	; (8006d58 <_vfiprintf_r+0x250>)
 8006ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006caa:	2206      	movs	r2, #6
 8006cac:	f7f9 fa98 	bl	80001e0 <memchr>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d03f      	beq.n	8006d34 <_vfiprintf_r+0x22c>
 8006cb4:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <_vfiprintf_r+0x254>)
 8006cb6:	bb1b      	cbnz	r3, 8006d00 <_vfiprintf_r+0x1f8>
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	3307      	adds	r3, #7
 8006cbc:	f023 0307 	bic.w	r3, r3, #7
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	9303      	str	r3, [sp, #12]
 8006cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc6:	443b      	add	r3, r7
 8006cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cca:	e767      	b.n	8006b9c <_vfiprintf_r+0x94>
 8006ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	e7a5      	b.n	8006c22 <_vfiprintf_r+0x11a>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	3401      	adds	r4, #1
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f04f 0c0a 	mov.w	ip, #10
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ce8:	3a30      	subs	r2, #48	; 0x30
 8006cea:	2a09      	cmp	r2, #9
 8006cec:	d903      	bls.n	8006cf6 <_vfiprintf_r+0x1ee>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0c5      	beq.n	8006c7e <_vfiprintf_r+0x176>
 8006cf2:	9105      	str	r1, [sp, #20]
 8006cf4:	e7c3      	b.n	8006c7e <_vfiprintf_r+0x176>
 8006cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e7f0      	b.n	8006ce2 <_vfiprintf_r+0x1da>
 8006d00:	ab03      	add	r3, sp, #12
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	462a      	mov	r2, r5
 8006d06:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <_vfiprintf_r+0x258>)
 8006d08:	a904      	add	r1, sp, #16
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f3af 8000 	nop.w
 8006d10:	4607      	mov	r7, r0
 8006d12:	1c78      	adds	r0, r7, #1
 8006d14:	d1d6      	bne.n	8006cc4 <_vfiprintf_r+0x1bc>
 8006d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d18:	07d9      	lsls	r1, r3, #31
 8006d1a:	d405      	bmi.n	8006d28 <_vfiprintf_r+0x220>
 8006d1c:	89ab      	ldrh	r3, [r5, #12]
 8006d1e:	059a      	lsls	r2, r3, #22
 8006d20:	d402      	bmi.n	8006d28 <_vfiprintf_r+0x220>
 8006d22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d24:	f7ff fd5d 	bl	80067e2 <__retarget_lock_release_recursive>
 8006d28:	89ab      	ldrh	r3, [r5, #12]
 8006d2a:	065b      	lsls	r3, r3, #25
 8006d2c:	f53f af12 	bmi.w	8006b54 <_vfiprintf_r+0x4c>
 8006d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d32:	e711      	b.n	8006b58 <_vfiprintf_r+0x50>
 8006d34:	ab03      	add	r3, sp, #12
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	462a      	mov	r2, r5
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <_vfiprintf_r+0x258>)
 8006d3c:	a904      	add	r1, sp, #16
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f000 f880 	bl	8006e44 <_printf_i>
 8006d44:	e7e4      	b.n	8006d10 <_vfiprintf_r+0x208>
 8006d46:	bf00      	nop
 8006d48:	0800779c 	.word	0x0800779c
 8006d4c:	080077bc 	.word	0x080077bc
 8006d50:	0800777c 	.word	0x0800777c
 8006d54:	080077dc 	.word	0x080077dc
 8006d58:	080077e6 	.word	0x080077e6
 8006d5c:	00000000 	.word	0x00000000
 8006d60:	08006ae3 	.word	0x08006ae3
 8006d64:	080077e2 	.word	0x080077e2

08006d68 <_printf_common>:
 8006d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	4699      	mov	r9, r3
 8006d70:	688a      	ldr	r2, [r1, #8]
 8006d72:	690b      	ldr	r3, [r1, #16]
 8006d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	bfb8      	it	lt
 8006d7c:	4613      	movlt	r3, r2
 8006d7e:	6033      	str	r3, [r6, #0]
 8006d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d84:	4607      	mov	r7, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	b10a      	cbz	r2, 8006d8e <_printf_common+0x26>
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	6033      	str	r3, [r6, #0]
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	0699      	lsls	r1, r3, #26
 8006d92:	bf42      	ittt	mi
 8006d94:	6833      	ldrmi	r3, [r6, #0]
 8006d96:	3302      	addmi	r3, #2
 8006d98:	6033      	strmi	r3, [r6, #0]
 8006d9a:	6825      	ldr	r5, [r4, #0]
 8006d9c:	f015 0506 	ands.w	r5, r5, #6
 8006da0:	d106      	bne.n	8006db0 <_printf_common+0x48>
 8006da2:	f104 0a19 	add.w	sl, r4, #25
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	6832      	ldr	r2, [r6, #0]
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	dc26      	bgt.n	8006dfe <_printf_common+0x96>
 8006db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006db4:	1e13      	subs	r3, r2, #0
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	bf18      	it	ne
 8006dba:	2301      	movne	r3, #1
 8006dbc:	0692      	lsls	r2, r2, #26
 8006dbe:	d42b      	bmi.n	8006e18 <_printf_common+0xb0>
 8006dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	47c0      	blx	r8
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d01e      	beq.n	8006e0c <_printf_common+0xa4>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	68e5      	ldr	r5, [r4, #12]
 8006dd2:	6832      	ldr	r2, [r6, #0]
 8006dd4:	f003 0306 	and.w	r3, r3, #6
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	bf08      	it	eq
 8006ddc:	1aad      	subeq	r5, r5, r2
 8006dde:	68a3      	ldr	r3, [r4, #8]
 8006de0:	6922      	ldr	r2, [r4, #16]
 8006de2:	bf0c      	ite	eq
 8006de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006de8:	2500      	movne	r5, #0
 8006dea:	4293      	cmp	r3, r2
 8006dec:	bfc4      	itt	gt
 8006dee:	1a9b      	subgt	r3, r3, r2
 8006df0:	18ed      	addgt	r5, r5, r3
 8006df2:	2600      	movs	r6, #0
 8006df4:	341a      	adds	r4, #26
 8006df6:	42b5      	cmp	r5, r6
 8006df8:	d11a      	bne.n	8006e30 <_printf_common+0xc8>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e008      	b.n	8006e10 <_printf_common+0xa8>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4652      	mov	r2, sl
 8006e02:	4649      	mov	r1, r9
 8006e04:	4638      	mov	r0, r7
 8006e06:	47c0      	blx	r8
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d103      	bne.n	8006e14 <_printf_common+0xac>
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e14:	3501      	adds	r5, #1
 8006e16:	e7c6      	b.n	8006da6 <_printf_common+0x3e>
 8006e18:	18e1      	adds	r1, r4, r3
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	2030      	movs	r0, #48	; 0x30
 8006e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e22:	4422      	add	r2, r4
 8006e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	e7c7      	b.n	8006dc0 <_printf_common+0x58>
 8006e30:	2301      	movs	r3, #1
 8006e32:	4622      	mov	r2, r4
 8006e34:	4649      	mov	r1, r9
 8006e36:	4638      	mov	r0, r7
 8006e38:	47c0      	blx	r8
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d0e6      	beq.n	8006e0c <_printf_common+0xa4>
 8006e3e:	3601      	adds	r6, #1
 8006e40:	e7d9      	b.n	8006df6 <_printf_common+0x8e>
	...

08006e44 <_printf_i>:
 8006e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	7e0f      	ldrb	r7, [r1, #24]
 8006e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e4c:	2f78      	cmp	r7, #120	; 0x78
 8006e4e:	4691      	mov	r9, r2
 8006e50:	4680      	mov	r8, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	469a      	mov	sl, r3
 8006e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e5a:	d807      	bhi.n	8006e6c <_printf_i+0x28>
 8006e5c:	2f62      	cmp	r7, #98	; 0x62
 8006e5e:	d80a      	bhi.n	8006e76 <_printf_i+0x32>
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	f000 80d8 	beq.w	8007016 <_printf_i+0x1d2>
 8006e66:	2f58      	cmp	r7, #88	; 0x58
 8006e68:	f000 80a3 	beq.w	8006fb2 <_printf_i+0x16e>
 8006e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e74:	e03a      	b.n	8006eec <_printf_i+0xa8>
 8006e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e7a:	2b15      	cmp	r3, #21
 8006e7c:	d8f6      	bhi.n	8006e6c <_printf_i+0x28>
 8006e7e:	a101      	add	r1, pc, #4	; (adr r1, 8006e84 <_printf_i+0x40>)
 8006e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e84:	08006edd 	.word	0x08006edd
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006e6d 	.word	0x08006e6d
 8006e90:	08006e6d 	.word	0x08006e6d
 8006e94:	08006e6d 	.word	0x08006e6d
 8006e98:	08006e6d 	.word	0x08006e6d
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006e6d 	.word	0x08006e6d
 8006ea4:	08006e6d 	.word	0x08006e6d
 8006ea8:	08006e6d 	.word	0x08006e6d
 8006eac:	08006e6d 	.word	0x08006e6d
 8006eb0:	08006ffd 	.word	0x08006ffd
 8006eb4:	08006f21 	.word	0x08006f21
 8006eb8:	08006fdf 	.word	0x08006fdf
 8006ebc:	08006e6d 	.word	0x08006e6d
 8006ec0:	08006e6d 	.word	0x08006e6d
 8006ec4:	0800701f 	.word	0x0800701f
 8006ec8:	08006e6d 	.word	0x08006e6d
 8006ecc:	08006f21 	.word	0x08006f21
 8006ed0:	08006e6d 	.word	0x08006e6d
 8006ed4:	08006e6d 	.word	0x08006e6d
 8006ed8:	08006fe7 	.word	0x08006fe7
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	1d1a      	adds	r2, r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	602a      	str	r2, [r5, #0]
 8006ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0a3      	b.n	8007038 <_printf_i+0x1f4>
 8006ef0:	6820      	ldr	r0, [r4, #0]
 8006ef2:	6829      	ldr	r1, [r5, #0]
 8006ef4:	0606      	lsls	r6, r0, #24
 8006ef6:	f101 0304 	add.w	r3, r1, #4
 8006efa:	d50a      	bpl.n	8006f12 <_printf_i+0xce>
 8006efc:	680e      	ldr	r6, [r1, #0]
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	da03      	bge.n	8006f0c <_printf_i+0xc8>
 8006f04:	232d      	movs	r3, #45	; 0x2d
 8006f06:	4276      	negs	r6, r6
 8006f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0c:	485e      	ldr	r0, [pc, #376]	; (8007088 <_printf_i+0x244>)
 8006f0e:	230a      	movs	r3, #10
 8006f10:	e019      	b.n	8006f46 <_printf_i+0x102>
 8006f12:	680e      	ldr	r6, [r1, #0]
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f1a:	bf18      	it	ne
 8006f1c:	b236      	sxthne	r6, r6
 8006f1e:	e7ef      	b.n	8006f00 <_printf_i+0xbc>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	6820      	ldr	r0, [r4, #0]
 8006f24:	1d19      	adds	r1, r3, #4
 8006f26:	6029      	str	r1, [r5, #0]
 8006f28:	0601      	lsls	r1, r0, #24
 8006f2a:	d501      	bpl.n	8006f30 <_printf_i+0xec>
 8006f2c:	681e      	ldr	r6, [r3, #0]
 8006f2e:	e002      	b.n	8006f36 <_printf_i+0xf2>
 8006f30:	0646      	lsls	r6, r0, #25
 8006f32:	d5fb      	bpl.n	8006f2c <_printf_i+0xe8>
 8006f34:	881e      	ldrh	r6, [r3, #0]
 8006f36:	4854      	ldr	r0, [pc, #336]	; (8007088 <_printf_i+0x244>)
 8006f38:	2f6f      	cmp	r7, #111	; 0x6f
 8006f3a:	bf0c      	ite	eq
 8006f3c:	2308      	moveq	r3, #8
 8006f3e:	230a      	movne	r3, #10
 8006f40:	2100      	movs	r1, #0
 8006f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f46:	6865      	ldr	r5, [r4, #4]
 8006f48:	60a5      	str	r5, [r4, #8]
 8006f4a:	2d00      	cmp	r5, #0
 8006f4c:	bfa2      	ittt	ge
 8006f4e:	6821      	ldrge	r1, [r4, #0]
 8006f50:	f021 0104 	bicge.w	r1, r1, #4
 8006f54:	6021      	strge	r1, [r4, #0]
 8006f56:	b90e      	cbnz	r6, 8006f5c <_printf_i+0x118>
 8006f58:	2d00      	cmp	r5, #0
 8006f5a:	d04d      	beq.n	8006ff8 <_printf_i+0x1b4>
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f62:	fb03 6711 	mls	r7, r3, r1, r6
 8006f66:	5dc7      	ldrb	r7, [r0, r7]
 8006f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f6c:	4637      	mov	r7, r6
 8006f6e:	42bb      	cmp	r3, r7
 8006f70:	460e      	mov	r6, r1
 8006f72:	d9f4      	bls.n	8006f5e <_printf_i+0x11a>
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d10b      	bne.n	8006f90 <_printf_i+0x14c>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	07de      	lsls	r6, r3, #31
 8006f7c:	d508      	bpl.n	8006f90 <_printf_i+0x14c>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	6861      	ldr	r1, [r4, #4]
 8006f82:	4299      	cmp	r1, r3
 8006f84:	bfde      	ittt	le
 8006f86:	2330      	movle	r3, #48	; 0x30
 8006f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f90:	1b52      	subs	r2, r2, r5
 8006f92:	6122      	str	r2, [r4, #16]
 8006f94:	f8cd a000 	str.w	sl, [sp]
 8006f98:	464b      	mov	r3, r9
 8006f9a:	aa03      	add	r2, sp, #12
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	f7ff fee2 	bl	8006d68 <_printf_common>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d14c      	bne.n	8007042 <_printf_i+0x1fe>
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fac:	b004      	add	sp, #16
 8006fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb2:	4835      	ldr	r0, [pc, #212]	; (8007088 <_printf_i+0x244>)
 8006fb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fb8:	6829      	ldr	r1, [r5, #0]
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fc0:	6029      	str	r1, [r5, #0]
 8006fc2:	061d      	lsls	r5, r3, #24
 8006fc4:	d514      	bpl.n	8006ff0 <_printf_i+0x1ac>
 8006fc6:	07df      	lsls	r7, r3, #31
 8006fc8:	bf44      	itt	mi
 8006fca:	f043 0320 	orrmi.w	r3, r3, #32
 8006fce:	6023      	strmi	r3, [r4, #0]
 8006fd0:	b91e      	cbnz	r6, 8006fda <_printf_i+0x196>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	f023 0320 	bic.w	r3, r3, #32
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	2310      	movs	r3, #16
 8006fdc:	e7b0      	b.n	8006f40 <_printf_i+0xfc>
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	f043 0320 	orr.w	r3, r3, #32
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	2378      	movs	r3, #120	; 0x78
 8006fe8:	4828      	ldr	r0, [pc, #160]	; (800708c <_printf_i+0x248>)
 8006fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fee:	e7e3      	b.n	8006fb8 <_printf_i+0x174>
 8006ff0:	0659      	lsls	r1, r3, #25
 8006ff2:	bf48      	it	mi
 8006ff4:	b2b6      	uxthmi	r6, r6
 8006ff6:	e7e6      	b.n	8006fc6 <_printf_i+0x182>
 8006ff8:	4615      	mov	r5, r2
 8006ffa:	e7bb      	b.n	8006f74 <_printf_i+0x130>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	6826      	ldr	r6, [r4, #0]
 8007000:	6961      	ldr	r1, [r4, #20]
 8007002:	1d18      	adds	r0, r3, #4
 8007004:	6028      	str	r0, [r5, #0]
 8007006:	0635      	lsls	r5, r6, #24
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	d501      	bpl.n	8007010 <_printf_i+0x1cc>
 800700c:	6019      	str	r1, [r3, #0]
 800700e:	e002      	b.n	8007016 <_printf_i+0x1d2>
 8007010:	0670      	lsls	r0, r6, #25
 8007012:	d5fb      	bpl.n	800700c <_printf_i+0x1c8>
 8007014:	8019      	strh	r1, [r3, #0]
 8007016:	2300      	movs	r3, #0
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	4615      	mov	r5, r2
 800701c:	e7ba      	b.n	8006f94 <_printf_i+0x150>
 800701e:	682b      	ldr	r3, [r5, #0]
 8007020:	1d1a      	adds	r2, r3, #4
 8007022:	602a      	str	r2, [r5, #0]
 8007024:	681d      	ldr	r5, [r3, #0]
 8007026:	6862      	ldr	r2, [r4, #4]
 8007028:	2100      	movs	r1, #0
 800702a:	4628      	mov	r0, r5
 800702c:	f7f9 f8d8 	bl	80001e0 <memchr>
 8007030:	b108      	cbz	r0, 8007036 <_printf_i+0x1f2>
 8007032:	1b40      	subs	r0, r0, r5
 8007034:	6060      	str	r0, [r4, #4]
 8007036:	6863      	ldr	r3, [r4, #4]
 8007038:	6123      	str	r3, [r4, #16]
 800703a:	2300      	movs	r3, #0
 800703c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007040:	e7a8      	b.n	8006f94 <_printf_i+0x150>
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	462a      	mov	r2, r5
 8007046:	4649      	mov	r1, r9
 8007048:	4640      	mov	r0, r8
 800704a:	47d0      	blx	sl
 800704c:	3001      	adds	r0, #1
 800704e:	d0ab      	beq.n	8006fa8 <_printf_i+0x164>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	079b      	lsls	r3, r3, #30
 8007054:	d413      	bmi.n	800707e <_printf_i+0x23a>
 8007056:	68e0      	ldr	r0, [r4, #12]
 8007058:	9b03      	ldr	r3, [sp, #12]
 800705a:	4298      	cmp	r0, r3
 800705c:	bfb8      	it	lt
 800705e:	4618      	movlt	r0, r3
 8007060:	e7a4      	b.n	8006fac <_printf_i+0x168>
 8007062:	2301      	movs	r3, #1
 8007064:	4632      	mov	r2, r6
 8007066:	4649      	mov	r1, r9
 8007068:	4640      	mov	r0, r8
 800706a:	47d0      	blx	sl
 800706c:	3001      	adds	r0, #1
 800706e:	d09b      	beq.n	8006fa8 <_printf_i+0x164>
 8007070:	3501      	adds	r5, #1
 8007072:	68e3      	ldr	r3, [r4, #12]
 8007074:	9903      	ldr	r1, [sp, #12]
 8007076:	1a5b      	subs	r3, r3, r1
 8007078:	42ab      	cmp	r3, r5
 800707a:	dcf2      	bgt.n	8007062 <_printf_i+0x21e>
 800707c:	e7eb      	b.n	8007056 <_printf_i+0x212>
 800707e:	2500      	movs	r5, #0
 8007080:	f104 0619 	add.w	r6, r4, #25
 8007084:	e7f5      	b.n	8007072 <_printf_i+0x22e>
 8007086:	bf00      	nop
 8007088:	080077ed 	.word	0x080077ed
 800708c:	080077fe 	.word	0x080077fe

08007090 <__sread>:
 8007090:	b510      	push	{r4, lr}
 8007092:	460c      	mov	r4, r1
 8007094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007098:	f000 fab2 	bl	8007600 <_read_r>
 800709c:	2800      	cmp	r0, #0
 800709e:	bfab      	itete	ge
 80070a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070a2:	89a3      	ldrhlt	r3, [r4, #12]
 80070a4:	181b      	addge	r3, r3, r0
 80070a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070aa:	bfac      	ite	ge
 80070ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80070ae:	81a3      	strhlt	r3, [r4, #12]
 80070b0:	bd10      	pop	{r4, pc}

080070b2 <__swrite>:
 80070b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b6:	461f      	mov	r7, r3
 80070b8:	898b      	ldrh	r3, [r1, #12]
 80070ba:	05db      	lsls	r3, r3, #23
 80070bc:	4605      	mov	r5, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	4616      	mov	r6, r2
 80070c2:	d505      	bpl.n	80070d0 <__swrite+0x1e>
 80070c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c8:	2302      	movs	r3, #2
 80070ca:	2200      	movs	r2, #0
 80070cc:	f000 f9c8 	bl	8007460 <_lseek_r>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	4632      	mov	r2, r6
 80070de:	463b      	mov	r3, r7
 80070e0:	4628      	mov	r0, r5
 80070e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070e6:	f000 b869 	b.w	80071bc <_write_r>

080070ea <__sseek>:
 80070ea:	b510      	push	{r4, lr}
 80070ec:	460c      	mov	r4, r1
 80070ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f2:	f000 f9b5 	bl	8007460 <_lseek_r>
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	bf15      	itete	ne
 80070fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007106:	81a3      	strheq	r3, [r4, #12]
 8007108:	bf18      	it	ne
 800710a:	81a3      	strhne	r3, [r4, #12]
 800710c:	bd10      	pop	{r4, pc}

0800710e <__sclose>:
 800710e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007112:	f000 b8d3 	b.w	80072bc <_close_r>
	...

08007118 <__swbuf_r>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	460e      	mov	r6, r1
 800711c:	4614      	mov	r4, r2
 800711e:	4605      	mov	r5, r0
 8007120:	b118      	cbz	r0, 800712a <__swbuf_r+0x12>
 8007122:	6983      	ldr	r3, [r0, #24]
 8007124:	b90b      	cbnz	r3, 800712a <__swbuf_r+0x12>
 8007126:	f7ff fabd 	bl	80066a4 <__sinit>
 800712a:	4b21      	ldr	r3, [pc, #132]	; (80071b0 <__swbuf_r+0x98>)
 800712c:	429c      	cmp	r4, r3
 800712e:	d12b      	bne.n	8007188 <__swbuf_r+0x70>
 8007130:	686c      	ldr	r4, [r5, #4]
 8007132:	69a3      	ldr	r3, [r4, #24]
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	071a      	lsls	r2, r3, #28
 800713a:	d52f      	bpl.n	800719c <__swbuf_r+0x84>
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	b36b      	cbz	r3, 800719c <__swbuf_r+0x84>
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	6820      	ldr	r0, [r4, #0]
 8007144:	1ac0      	subs	r0, r0, r3
 8007146:	6963      	ldr	r3, [r4, #20]
 8007148:	b2f6      	uxtb	r6, r6
 800714a:	4283      	cmp	r3, r0
 800714c:	4637      	mov	r7, r6
 800714e:	dc04      	bgt.n	800715a <__swbuf_r+0x42>
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f948 	bl	80073e8 <_fflush_r>
 8007158:	bb30      	cbnz	r0, 80071a8 <__swbuf_r+0x90>
 800715a:	68a3      	ldr	r3, [r4, #8]
 800715c:	3b01      	subs	r3, #1
 800715e:	60a3      	str	r3, [r4, #8]
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	6022      	str	r2, [r4, #0]
 8007166:	701e      	strb	r6, [r3, #0]
 8007168:	6963      	ldr	r3, [r4, #20]
 800716a:	3001      	adds	r0, #1
 800716c:	4283      	cmp	r3, r0
 800716e:	d004      	beq.n	800717a <__swbuf_r+0x62>
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	07db      	lsls	r3, r3, #31
 8007174:	d506      	bpl.n	8007184 <__swbuf_r+0x6c>
 8007176:	2e0a      	cmp	r6, #10
 8007178:	d104      	bne.n	8007184 <__swbuf_r+0x6c>
 800717a:	4621      	mov	r1, r4
 800717c:	4628      	mov	r0, r5
 800717e:	f000 f933 	bl	80073e8 <_fflush_r>
 8007182:	b988      	cbnz	r0, 80071a8 <__swbuf_r+0x90>
 8007184:	4638      	mov	r0, r7
 8007186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007188:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <__swbuf_r+0x9c>)
 800718a:	429c      	cmp	r4, r3
 800718c:	d101      	bne.n	8007192 <__swbuf_r+0x7a>
 800718e:	68ac      	ldr	r4, [r5, #8]
 8007190:	e7cf      	b.n	8007132 <__swbuf_r+0x1a>
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <__swbuf_r+0xa0>)
 8007194:	429c      	cmp	r4, r3
 8007196:	bf08      	it	eq
 8007198:	68ec      	ldreq	r4, [r5, #12]
 800719a:	e7ca      	b.n	8007132 <__swbuf_r+0x1a>
 800719c:	4621      	mov	r1, r4
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 f81e 	bl	80071e0 <__swsetup_r>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d0cb      	beq.n	8007140 <__swbuf_r+0x28>
 80071a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071ac:	e7ea      	b.n	8007184 <__swbuf_r+0x6c>
 80071ae:	bf00      	nop
 80071b0:	0800779c 	.word	0x0800779c
 80071b4:	080077bc 	.word	0x080077bc
 80071b8:	0800777c 	.word	0x0800777c

080071bc <_write_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d07      	ldr	r5, [pc, #28]	; (80071dc <_write_r+0x20>)
 80071c0:	4604      	mov	r4, r0
 80071c2:	4608      	mov	r0, r1
 80071c4:	4611      	mov	r1, r2
 80071c6:	2200      	movs	r2, #0
 80071c8:	602a      	str	r2, [r5, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f7fb f92d 	bl	800242a <_write>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_write_r+0x1e>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b103      	cbz	r3, 80071da <_write_r+0x1e>
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	200002ac 	.word	0x200002ac

080071e0 <__swsetup_r>:
 80071e0:	4b32      	ldr	r3, [pc, #200]	; (80072ac <__swsetup_r+0xcc>)
 80071e2:	b570      	push	{r4, r5, r6, lr}
 80071e4:	681d      	ldr	r5, [r3, #0]
 80071e6:	4606      	mov	r6, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	b125      	cbz	r5, 80071f6 <__swsetup_r+0x16>
 80071ec:	69ab      	ldr	r3, [r5, #24]
 80071ee:	b913      	cbnz	r3, 80071f6 <__swsetup_r+0x16>
 80071f0:	4628      	mov	r0, r5
 80071f2:	f7ff fa57 	bl	80066a4 <__sinit>
 80071f6:	4b2e      	ldr	r3, [pc, #184]	; (80072b0 <__swsetup_r+0xd0>)
 80071f8:	429c      	cmp	r4, r3
 80071fa:	d10f      	bne.n	800721c <__swsetup_r+0x3c>
 80071fc:	686c      	ldr	r4, [r5, #4]
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007204:	0719      	lsls	r1, r3, #28
 8007206:	d42c      	bmi.n	8007262 <__swsetup_r+0x82>
 8007208:	06dd      	lsls	r5, r3, #27
 800720a:	d411      	bmi.n	8007230 <__swsetup_r+0x50>
 800720c:	2309      	movs	r3, #9
 800720e:	6033      	str	r3, [r6, #0]
 8007210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007214:	81a3      	strh	r3, [r4, #12]
 8007216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800721a:	e03e      	b.n	800729a <__swsetup_r+0xba>
 800721c:	4b25      	ldr	r3, [pc, #148]	; (80072b4 <__swsetup_r+0xd4>)
 800721e:	429c      	cmp	r4, r3
 8007220:	d101      	bne.n	8007226 <__swsetup_r+0x46>
 8007222:	68ac      	ldr	r4, [r5, #8]
 8007224:	e7eb      	b.n	80071fe <__swsetup_r+0x1e>
 8007226:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <__swsetup_r+0xd8>)
 8007228:	429c      	cmp	r4, r3
 800722a:	bf08      	it	eq
 800722c:	68ec      	ldreq	r4, [r5, #12]
 800722e:	e7e6      	b.n	80071fe <__swsetup_r+0x1e>
 8007230:	0758      	lsls	r0, r3, #29
 8007232:	d512      	bpl.n	800725a <__swsetup_r+0x7a>
 8007234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007236:	b141      	cbz	r1, 800724a <__swsetup_r+0x6a>
 8007238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800723c:	4299      	cmp	r1, r3
 800723e:	d002      	beq.n	8007246 <__swsetup_r+0x66>
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff f86b 	bl	800631c <_free_r>
 8007246:	2300      	movs	r3, #0
 8007248:	6363      	str	r3, [r4, #52]	; 0x34
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	2300      	movs	r3, #0
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f043 0308 	orr.w	r3, r3, #8
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	b94b      	cbnz	r3, 800727a <__swsetup_r+0x9a>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800726c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007270:	d003      	beq.n	800727a <__swsetup_r+0x9a>
 8007272:	4621      	mov	r1, r4
 8007274:	4630      	mov	r0, r6
 8007276:	f000 f92b 	bl	80074d0 <__smakebuf_r>
 800727a:	89a0      	ldrh	r0, [r4, #12]
 800727c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007280:	f010 0301 	ands.w	r3, r0, #1
 8007284:	d00a      	beq.n	800729c <__swsetup_r+0xbc>
 8007286:	2300      	movs	r3, #0
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	6963      	ldr	r3, [r4, #20]
 800728c:	425b      	negs	r3, r3
 800728e:	61a3      	str	r3, [r4, #24]
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	b943      	cbnz	r3, 80072a6 <__swsetup_r+0xc6>
 8007294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007298:	d1ba      	bne.n	8007210 <__swsetup_r+0x30>
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	0781      	lsls	r1, r0, #30
 800729e:	bf58      	it	pl
 80072a0:	6963      	ldrpl	r3, [r4, #20]
 80072a2:	60a3      	str	r3, [r4, #8]
 80072a4:	e7f4      	b.n	8007290 <__swsetup_r+0xb0>
 80072a6:	2000      	movs	r0, #0
 80072a8:	e7f7      	b.n	800729a <__swsetup_r+0xba>
 80072aa:	bf00      	nop
 80072ac:	20000010 	.word	0x20000010
 80072b0:	0800779c 	.word	0x0800779c
 80072b4:	080077bc 	.word	0x080077bc
 80072b8:	0800777c 	.word	0x0800777c

080072bc <_close_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d06      	ldr	r5, [pc, #24]	; (80072d8 <_close_r+0x1c>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	602b      	str	r3, [r5, #0]
 80072c8:	f7fb f8cb 	bl	8002462 <_close>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d102      	bne.n	80072d6 <_close_r+0x1a>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	b103      	cbz	r3, 80072d6 <_close_r+0x1a>
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	200002ac 	.word	0x200002ac

080072dc <__sflush_r>:
 80072dc:	898a      	ldrh	r2, [r1, #12]
 80072de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e2:	4605      	mov	r5, r0
 80072e4:	0710      	lsls	r0, r2, #28
 80072e6:	460c      	mov	r4, r1
 80072e8:	d458      	bmi.n	800739c <__sflush_r+0xc0>
 80072ea:	684b      	ldr	r3, [r1, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	dc05      	bgt.n	80072fc <__sflush_r+0x20>
 80072f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	dc02      	bgt.n	80072fc <__sflush_r+0x20>
 80072f6:	2000      	movs	r0, #0
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072fe:	2e00      	cmp	r6, #0
 8007300:	d0f9      	beq.n	80072f6 <__sflush_r+0x1a>
 8007302:	2300      	movs	r3, #0
 8007304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007308:	682f      	ldr	r7, [r5, #0]
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	d032      	beq.n	8007374 <__sflush_r+0x98>
 800730e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	075a      	lsls	r2, r3, #29
 8007314:	d505      	bpl.n	8007322 <__sflush_r+0x46>
 8007316:	6863      	ldr	r3, [r4, #4]
 8007318:	1ac0      	subs	r0, r0, r3
 800731a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800731c:	b10b      	cbz	r3, 8007322 <__sflush_r+0x46>
 800731e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007320:	1ac0      	subs	r0, r0, r3
 8007322:	2300      	movs	r3, #0
 8007324:	4602      	mov	r2, r0
 8007326:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007328:	6a21      	ldr	r1, [r4, #32]
 800732a:	4628      	mov	r0, r5
 800732c:	47b0      	blx	r6
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	d106      	bne.n	8007342 <__sflush_r+0x66>
 8007334:	6829      	ldr	r1, [r5, #0]
 8007336:	291d      	cmp	r1, #29
 8007338:	d82c      	bhi.n	8007394 <__sflush_r+0xb8>
 800733a:	4a2a      	ldr	r2, [pc, #168]	; (80073e4 <__sflush_r+0x108>)
 800733c:	40ca      	lsrs	r2, r1
 800733e:	07d6      	lsls	r6, r2, #31
 8007340:	d528      	bpl.n	8007394 <__sflush_r+0xb8>
 8007342:	2200      	movs	r2, #0
 8007344:	6062      	str	r2, [r4, #4]
 8007346:	04d9      	lsls	r1, r3, #19
 8007348:	6922      	ldr	r2, [r4, #16]
 800734a:	6022      	str	r2, [r4, #0]
 800734c:	d504      	bpl.n	8007358 <__sflush_r+0x7c>
 800734e:	1c42      	adds	r2, r0, #1
 8007350:	d101      	bne.n	8007356 <__sflush_r+0x7a>
 8007352:	682b      	ldr	r3, [r5, #0]
 8007354:	b903      	cbnz	r3, 8007358 <__sflush_r+0x7c>
 8007356:	6560      	str	r0, [r4, #84]	; 0x54
 8007358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800735a:	602f      	str	r7, [r5, #0]
 800735c:	2900      	cmp	r1, #0
 800735e:	d0ca      	beq.n	80072f6 <__sflush_r+0x1a>
 8007360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007364:	4299      	cmp	r1, r3
 8007366:	d002      	beq.n	800736e <__sflush_r+0x92>
 8007368:	4628      	mov	r0, r5
 800736a:	f7fe ffd7 	bl	800631c <_free_r>
 800736e:	2000      	movs	r0, #0
 8007370:	6360      	str	r0, [r4, #52]	; 0x34
 8007372:	e7c1      	b.n	80072f8 <__sflush_r+0x1c>
 8007374:	6a21      	ldr	r1, [r4, #32]
 8007376:	2301      	movs	r3, #1
 8007378:	4628      	mov	r0, r5
 800737a:	47b0      	blx	r6
 800737c:	1c41      	adds	r1, r0, #1
 800737e:	d1c7      	bne.n	8007310 <__sflush_r+0x34>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0c4      	beq.n	8007310 <__sflush_r+0x34>
 8007386:	2b1d      	cmp	r3, #29
 8007388:	d001      	beq.n	800738e <__sflush_r+0xb2>
 800738a:	2b16      	cmp	r3, #22
 800738c:	d101      	bne.n	8007392 <__sflush_r+0xb6>
 800738e:	602f      	str	r7, [r5, #0]
 8007390:	e7b1      	b.n	80072f6 <__sflush_r+0x1a>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	e7ad      	b.n	80072f8 <__sflush_r+0x1c>
 800739c:	690f      	ldr	r7, [r1, #16]
 800739e:	2f00      	cmp	r7, #0
 80073a0:	d0a9      	beq.n	80072f6 <__sflush_r+0x1a>
 80073a2:	0793      	lsls	r3, r2, #30
 80073a4:	680e      	ldr	r6, [r1, #0]
 80073a6:	bf08      	it	eq
 80073a8:	694b      	ldreq	r3, [r1, #20]
 80073aa:	600f      	str	r7, [r1, #0]
 80073ac:	bf18      	it	ne
 80073ae:	2300      	movne	r3, #0
 80073b0:	eba6 0807 	sub.w	r8, r6, r7
 80073b4:	608b      	str	r3, [r1, #8]
 80073b6:	f1b8 0f00 	cmp.w	r8, #0
 80073ba:	dd9c      	ble.n	80072f6 <__sflush_r+0x1a>
 80073bc:	6a21      	ldr	r1, [r4, #32]
 80073be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073c0:	4643      	mov	r3, r8
 80073c2:	463a      	mov	r2, r7
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b0      	blx	r6
 80073c8:	2800      	cmp	r0, #0
 80073ca:	dc06      	bgt.n	80073da <__sflush_r+0xfe>
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073d8:	e78e      	b.n	80072f8 <__sflush_r+0x1c>
 80073da:	4407      	add	r7, r0
 80073dc:	eba8 0800 	sub.w	r8, r8, r0
 80073e0:	e7e9      	b.n	80073b6 <__sflush_r+0xda>
 80073e2:	bf00      	nop
 80073e4:	20400001 	.word	0x20400001

080073e8 <_fflush_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	690b      	ldr	r3, [r1, #16]
 80073ec:	4605      	mov	r5, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	b913      	cbnz	r3, 80073f8 <_fflush_r+0x10>
 80073f2:	2500      	movs	r5, #0
 80073f4:	4628      	mov	r0, r5
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	b118      	cbz	r0, 8007402 <_fflush_r+0x1a>
 80073fa:	6983      	ldr	r3, [r0, #24]
 80073fc:	b90b      	cbnz	r3, 8007402 <_fflush_r+0x1a>
 80073fe:	f7ff f951 	bl	80066a4 <__sinit>
 8007402:	4b14      	ldr	r3, [pc, #80]	; (8007454 <_fflush_r+0x6c>)
 8007404:	429c      	cmp	r4, r3
 8007406:	d11b      	bne.n	8007440 <_fflush_r+0x58>
 8007408:	686c      	ldr	r4, [r5, #4]
 800740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0ef      	beq.n	80073f2 <_fflush_r+0xa>
 8007412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007414:	07d0      	lsls	r0, r2, #31
 8007416:	d404      	bmi.n	8007422 <_fflush_r+0x3a>
 8007418:	0599      	lsls	r1, r3, #22
 800741a:	d402      	bmi.n	8007422 <_fflush_r+0x3a>
 800741c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800741e:	f7ff f9df 	bl	80067e0 <__retarget_lock_acquire_recursive>
 8007422:	4628      	mov	r0, r5
 8007424:	4621      	mov	r1, r4
 8007426:	f7ff ff59 	bl	80072dc <__sflush_r>
 800742a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800742c:	07da      	lsls	r2, r3, #31
 800742e:	4605      	mov	r5, r0
 8007430:	d4e0      	bmi.n	80073f4 <_fflush_r+0xc>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	059b      	lsls	r3, r3, #22
 8007436:	d4dd      	bmi.n	80073f4 <_fflush_r+0xc>
 8007438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800743a:	f7ff f9d2 	bl	80067e2 <__retarget_lock_release_recursive>
 800743e:	e7d9      	b.n	80073f4 <_fflush_r+0xc>
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <_fflush_r+0x70>)
 8007442:	429c      	cmp	r4, r3
 8007444:	d101      	bne.n	800744a <_fflush_r+0x62>
 8007446:	68ac      	ldr	r4, [r5, #8]
 8007448:	e7df      	b.n	800740a <_fflush_r+0x22>
 800744a:	4b04      	ldr	r3, [pc, #16]	; (800745c <_fflush_r+0x74>)
 800744c:	429c      	cmp	r4, r3
 800744e:	bf08      	it	eq
 8007450:	68ec      	ldreq	r4, [r5, #12]
 8007452:	e7da      	b.n	800740a <_fflush_r+0x22>
 8007454:	0800779c 	.word	0x0800779c
 8007458:	080077bc 	.word	0x080077bc
 800745c:	0800777c 	.word	0x0800777c

08007460 <_lseek_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4d07      	ldr	r5, [pc, #28]	; (8007480 <_lseek_r+0x20>)
 8007464:	4604      	mov	r4, r0
 8007466:	4608      	mov	r0, r1
 8007468:	4611      	mov	r1, r2
 800746a:	2200      	movs	r2, #0
 800746c:	602a      	str	r2, [r5, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	f7fb f81e 	bl	80024b0 <_lseek>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d102      	bne.n	800747e <_lseek_r+0x1e>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	b103      	cbz	r3, 800747e <_lseek_r+0x1e>
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	200002ac 	.word	0x200002ac

08007484 <__swhatbuf_r>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	460e      	mov	r6, r1
 8007488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748c:	2900      	cmp	r1, #0
 800748e:	b096      	sub	sp, #88	; 0x58
 8007490:	4614      	mov	r4, r2
 8007492:	461d      	mov	r5, r3
 8007494:	da08      	bge.n	80074a8 <__swhatbuf_r+0x24>
 8007496:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	061a      	lsls	r2, r3, #24
 80074a0:	d410      	bmi.n	80074c4 <__swhatbuf_r+0x40>
 80074a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074a6:	e00e      	b.n	80074c6 <__swhatbuf_r+0x42>
 80074a8:	466a      	mov	r2, sp
 80074aa:	f000 f8bb 	bl	8007624 <_fstat_r>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	dbf1      	blt.n	8007496 <__swhatbuf_r+0x12>
 80074b2:	9a01      	ldr	r2, [sp, #4]
 80074b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074bc:	425a      	negs	r2, r3
 80074be:	415a      	adcs	r2, r3
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	e7ee      	b.n	80074a2 <__swhatbuf_r+0x1e>
 80074c4:	2340      	movs	r3, #64	; 0x40
 80074c6:	2000      	movs	r0, #0
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	b016      	add	sp, #88	; 0x58
 80074cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080074d0 <__smakebuf_r>:
 80074d0:	898b      	ldrh	r3, [r1, #12]
 80074d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074d4:	079d      	lsls	r5, r3, #30
 80074d6:	4606      	mov	r6, r0
 80074d8:	460c      	mov	r4, r1
 80074da:	d507      	bpl.n	80074ec <__smakebuf_r+0x1c>
 80074dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	6123      	str	r3, [r4, #16]
 80074e4:	2301      	movs	r3, #1
 80074e6:	6163      	str	r3, [r4, #20]
 80074e8:	b002      	add	sp, #8
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	ab01      	add	r3, sp, #4
 80074ee:	466a      	mov	r2, sp
 80074f0:	f7ff ffc8 	bl	8007484 <__swhatbuf_r>
 80074f4:	9900      	ldr	r1, [sp, #0]
 80074f6:	4605      	mov	r5, r0
 80074f8:	4630      	mov	r0, r6
 80074fa:	f7fe ff7b 	bl	80063f4 <_malloc_r>
 80074fe:	b948      	cbnz	r0, 8007514 <__smakebuf_r+0x44>
 8007500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007504:	059a      	lsls	r2, r3, #22
 8007506:	d4ef      	bmi.n	80074e8 <__smakebuf_r+0x18>
 8007508:	f023 0303 	bic.w	r3, r3, #3
 800750c:	f043 0302 	orr.w	r3, r3, #2
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	e7e3      	b.n	80074dc <__smakebuf_r+0xc>
 8007514:	4b0d      	ldr	r3, [pc, #52]	; (800754c <__smakebuf_r+0x7c>)
 8007516:	62b3      	str	r3, [r6, #40]	; 0x28
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	6020      	str	r0, [r4, #0]
 800751c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007520:	81a3      	strh	r3, [r4, #12]
 8007522:	9b00      	ldr	r3, [sp, #0]
 8007524:	6163      	str	r3, [r4, #20]
 8007526:	9b01      	ldr	r3, [sp, #4]
 8007528:	6120      	str	r0, [r4, #16]
 800752a:	b15b      	cbz	r3, 8007544 <__smakebuf_r+0x74>
 800752c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007530:	4630      	mov	r0, r6
 8007532:	f000 f889 	bl	8007648 <_isatty_r>
 8007536:	b128      	cbz	r0, 8007544 <__smakebuf_r+0x74>
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	f023 0303 	bic.w	r3, r3, #3
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	81a3      	strh	r3, [r4, #12]
 8007544:	89a0      	ldrh	r0, [r4, #12]
 8007546:	4305      	orrs	r5, r0
 8007548:	81a5      	strh	r5, [r4, #12]
 800754a:	e7cd      	b.n	80074e8 <__smakebuf_r+0x18>
 800754c:	0800663d 	.word	0x0800663d

08007550 <memcpy>:
 8007550:	440a      	add	r2, r1
 8007552:	4291      	cmp	r1, r2
 8007554:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007558:	d100      	bne.n	800755c <memcpy+0xc>
 800755a:	4770      	bx	lr
 800755c:	b510      	push	{r4, lr}
 800755e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007566:	4291      	cmp	r1, r2
 8007568:	d1f9      	bne.n	800755e <memcpy+0xe>
 800756a:	bd10      	pop	{r4, pc}

0800756c <memmove>:
 800756c:	4288      	cmp	r0, r1
 800756e:	b510      	push	{r4, lr}
 8007570:	eb01 0402 	add.w	r4, r1, r2
 8007574:	d902      	bls.n	800757c <memmove+0x10>
 8007576:	4284      	cmp	r4, r0
 8007578:	4623      	mov	r3, r4
 800757a:	d807      	bhi.n	800758c <memmove+0x20>
 800757c:	1e43      	subs	r3, r0, #1
 800757e:	42a1      	cmp	r1, r4
 8007580:	d008      	beq.n	8007594 <memmove+0x28>
 8007582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800758a:	e7f8      	b.n	800757e <memmove+0x12>
 800758c:	4402      	add	r2, r0
 800758e:	4601      	mov	r1, r0
 8007590:	428a      	cmp	r2, r1
 8007592:	d100      	bne.n	8007596 <memmove+0x2a>
 8007594:	bd10      	pop	{r4, pc}
 8007596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800759a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800759e:	e7f7      	b.n	8007590 <memmove+0x24>

080075a0 <_realloc_r>:
 80075a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a4:	4680      	mov	r8, r0
 80075a6:	4614      	mov	r4, r2
 80075a8:	460e      	mov	r6, r1
 80075aa:	b921      	cbnz	r1, 80075b6 <_realloc_r+0x16>
 80075ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b0:	4611      	mov	r1, r2
 80075b2:	f7fe bf1f 	b.w	80063f4 <_malloc_r>
 80075b6:	b92a      	cbnz	r2, 80075c4 <_realloc_r+0x24>
 80075b8:	f7fe feb0 	bl	800631c <_free_r>
 80075bc:	4625      	mov	r5, r4
 80075be:	4628      	mov	r0, r5
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	f000 f850 	bl	8007668 <_malloc_usable_size_r>
 80075c8:	4284      	cmp	r4, r0
 80075ca:	4607      	mov	r7, r0
 80075cc:	d802      	bhi.n	80075d4 <_realloc_r+0x34>
 80075ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075d2:	d812      	bhi.n	80075fa <_realloc_r+0x5a>
 80075d4:	4621      	mov	r1, r4
 80075d6:	4640      	mov	r0, r8
 80075d8:	f7fe ff0c 	bl	80063f4 <_malloc_r>
 80075dc:	4605      	mov	r5, r0
 80075de:	2800      	cmp	r0, #0
 80075e0:	d0ed      	beq.n	80075be <_realloc_r+0x1e>
 80075e2:	42bc      	cmp	r4, r7
 80075e4:	4622      	mov	r2, r4
 80075e6:	4631      	mov	r1, r6
 80075e8:	bf28      	it	cs
 80075ea:	463a      	movcs	r2, r7
 80075ec:	f7ff ffb0 	bl	8007550 <memcpy>
 80075f0:	4631      	mov	r1, r6
 80075f2:	4640      	mov	r0, r8
 80075f4:	f7fe fe92 	bl	800631c <_free_r>
 80075f8:	e7e1      	b.n	80075be <_realloc_r+0x1e>
 80075fa:	4635      	mov	r5, r6
 80075fc:	e7df      	b.n	80075be <_realloc_r+0x1e>
	...

08007600 <_read_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4d07      	ldr	r5, [pc, #28]	; (8007620 <_read_r+0x20>)
 8007604:	4604      	mov	r4, r0
 8007606:	4608      	mov	r0, r1
 8007608:	4611      	mov	r1, r2
 800760a:	2200      	movs	r2, #0
 800760c:	602a      	str	r2, [r5, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	f7fa feee 	bl	80023f0 <_read>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d102      	bne.n	800761e <_read_r+0x1e>
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	b103      	cbz	r3, 800761e <_read_r+0x1e>
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	200002ac 	.word	0x200002ac

08007624 <_fstat_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4d07      	ldr	r5, [pc, #28]	; (8007644 <_fstat_r+0x20>)
 8007628:	2300      	movs	r3, #0
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	4611      	mov	r1, r2
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	f7fa ff22 	bl	800247a <_fstat>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	d102      	bne.n	8007640 <_fstat_r+0x1c>
 800763a:	682b      	ldr	r3, [r5, #0]
 800763c:	b103      	cbz	r3, 8007640 <_fstat_r+0x1c>
 800763e:	6023      	str	r3, [r4, #0]
 8007640:	bd38      	pop	{r3, r4, r5, pc}
 8007642:	bf00      	nop
 8007644:	200002ac 	.word	0x200002ac

08007648 <_isatty_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d06      	ldr	r5, [pc, #24]	; (8007664 <_isatty_r+0x1c>)
 800764c:	2300      	movs	r3, #0
 800764e:	4604      	mov	r4, r0
 8007650:	4608      	mov	r0, r1
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	f7fa ff21 	bl	800249a <_isatty>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d102      	bne.n	8007662 <_isatty_r+0x1a>
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	b103      	cbz	r3, 8007662 <_isatty_r+0x1a>
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	bd38      	pop	{r3, r4, r5, pc}
 8007664:	200002ac 	.word	0x200002ac

08007668 <_malloc_usable_size_r>:
 8007668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766c:	1f18      	subs	r0, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	bfbc      	itt	lt
 8007672:	580b      	ldrlt	r3, [r1, r0]
 8007674:	18c0      	addlt	r0, r0, r3
 8007676:	4770      	bx	lr

08007678 <_init>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr

08007684 <_fini>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr
